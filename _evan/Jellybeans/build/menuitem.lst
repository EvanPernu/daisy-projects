ARM GAS  /tmp/ccOYETru.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"menuitem.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN2mu8MenuItemC2Ev,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	_ZN2mu8MenuItemC2Ev
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	_ZN2mu8MenuItemC2Ev:
  27              	.LVL0:
  28              	.LFB2248:
  29              		.file 1 "Mu/logistics/menuitem.cpp"
   1:Mu/logistics/menuitem.cpp **** /* 
   2:Mu/logistics/menuitem.cpp ****  * Copyright (C) 2021 Evan Pernu - All Rights Reserved
   3:Mu/logistics/menuitem.cpp ****  * You may use, distribute and modify this code under the
   4:Mu/logistics/menuitem.cpp ****  * terms of the GNU AGPLv3 license.
   5:Mu/logistics/menuitem.cpp ****  * 
   6:Mu/logistics/menuitem.cpp ****  * You should have received a copy of the GNU AGPLv3 license with
   7:Mu/logistics/menuitem.cpp ****  * this file (LICENSE.md). If not, please write to: evanpernu@gmail.com, 
   8:Mu/logistics/menuitem.cpp ****  * or visit: https://www.gnu.org/licenses/agpl-3.0.en.html
   9:Mu/logistics/menuitem.cpp ****  */
  10:Mu/logistics/menuitem.cpp **** 
  11:Mu/logistics/menuitem.cpp **** #include "menuitem.h"
  12:Mu/logistics/menuitem.cpp **** 
  13:Mu/logistics/menuitem.cpp **** #include <string>
  14:Mu/logistics/menuitem.cpp **** #include <vector>
  15:Mu/logistics/menuitem.cpp **** #include <functional>
  16:Mu/logistics/menuitem.cpp **** 
  17:Mu/logistics/menuitem.cpp **** using namespace mu;
  18:Mu/logistics/menuitem.cpp **** 
  19:Mu/logistics/menuitem.cpp **** MenuItem::MenuItem(){};
  30              		.loc 1 19 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LBB1097:
  36              	.LBB1098:
  37              	.LBB1099:
  38              	.LBB1100:
  39              		.file 2 "/usr/include/newlib/c++/9.2.1/bits/basic_string.h"
ARM GAS  /tmp/ccOYETru.s 			page 2


   1:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****  */
  29:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  30:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** //
  31:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** //
  33:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  34:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  37:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  39:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  43:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
  46:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  47:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** # include <string_view>
  49:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
  50:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  52:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** {
  54:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  56:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  57:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
ARM GAS  /tmp/ccOYETru.s 			page 3


  58:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   /**
  59:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  60:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  61:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
  62:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @ingroup strings
  63:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @ingroup sequences
  64:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
  65:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  66:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  67:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *                   char_traits<_CharT>.
  68:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  69:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
  70:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  71:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  72:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  73:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  74:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  75:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    */
  76:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  77:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     class basic_string
  78:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     {
  79:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  80:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  81:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  82:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
  83:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Types:
  84:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
  85:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef _Traits					traits_type;
  86:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  87:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  88:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  89:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  90:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  91:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  92:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  93:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  94:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  95:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  96:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 							const_iterator;
  97:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  98:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  99:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 100:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 101:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 102:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 103:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     protected:
 104:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 105:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus < 201103L
 106:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef iterator __const_iterator;
 107:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 108:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 109:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 110:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 111:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     private:
 112:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 113:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 114:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
ARM GAS  /tmp/ccOYETru.s 			page 4


 115:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 116:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 117:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 118:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 119:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 120:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 121:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _Res>;
 122:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 123:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 124:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static __sv_type
 125:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 126:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __svt; }
 127:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 128:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 129:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // allows to add an internal constructor that does not
 130:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // participate in overload resolution when a string_view
 131:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // is provided.
 132:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       struct __sv_wrapper
 133:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 134:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 135:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__sv_type _M_sv;
 136:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       };
 137:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 138:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 139:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 140:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *          wrapper.
 141:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 142:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 143:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 144:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       explicit
 145:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 146:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 147:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 148:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 149:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 151:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 152:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus < 201103L
 153:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 154:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 155:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 156:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 157:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 158:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 161:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 162:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 163:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 164:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       };
 165:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 166:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 167:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type		_M_string_length;
 168:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 169:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 170:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 171:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       union
ARM GAS  /tmp/ccOYETru.s 			page 5


 172:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 173:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 174:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 175:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       };
 176:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 177:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 178:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_data(pointer __p)
 179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 180:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 181:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_length(size_type __length)
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
  40              		.loc 2 183 9 is_stmt 0 view .LVU1
  41 0000 0022     		movs	r2, #0
  42              	.LVL1:
  43              		.loc 2 183 9 view .LVU2
  44              	.LBE1100:
  45              	.LBE1099:
  46              	.LBE1098:
  47              	.LBI1097:
 184:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 185:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       pointer
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_data() const
 187:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 188:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 189:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       pointer
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_local_data()
 191:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 192:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 194:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 195:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return pointer(_M_local_buf);
 196:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 197:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 198:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 199:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_pointer
 200:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_local_data() const
 201:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 202:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 203:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 204:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 205:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 206:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 207:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 208:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 209:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 212:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 213:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_set_length(size_type __n)
 215:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 216:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_length(__n);
 217:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 218:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 219:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 220:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
ARM GAS  /tmp/ccOYETru.s 			page 6


 221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_is_local() const
 222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 223:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 224:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Create & Destroy
 225:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       pointer
 226:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_create(size_type&, size_type);
 227:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 228:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_dispose()
 230:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (!_M_is_local())
 232:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 233:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 234:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 235:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 237:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 238:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 239:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 240:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 241:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _InIterator>
 242:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
 243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 244:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 std::__false_type)
 245:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
 246:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 248:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 249:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 250:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 251:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 252:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Integer>
 253:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
 254:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 255:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 256:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 257:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 258:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 259:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_construct(__req, __c); }
 260:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 261:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _InIterator>
 262:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
 263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 264:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
 265:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 266:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 267:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         }
 268:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 269:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 270:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _InIterator>
 271:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
 272:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 273:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     std::input_iterator_tag);
 274:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 275:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 276:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 277:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _FwdIterator>
ARM GAS  /tmp/ccOYETru.s 			page 7


 278:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
 279:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 280:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     std::forward_iterator_tag);
 281:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 282:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 283:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 284:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 285:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       allocator_type&
 286:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_get_allocator()
 287:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 288:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 289:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const allocator_type&
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_get_allocator() const
 291:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 292:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 293:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     private:
 294:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 295:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 296:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 297:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 298:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 299:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 300:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 301:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 302:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 303:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 304:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 305:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
 306:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 307:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 308:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 309:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
 310:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 311:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 312:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__pos > this->size())
 313:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 314:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 315:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   __s, __pos, this->size());
 316:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return __pos;
 317:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 318:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 319:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 320:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 321:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 322:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 323:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 324:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 325:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 326:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 327:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 328:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
 329:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 330:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 331:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 332:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 333:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 334:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 8


 335:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 336:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
 337:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 338:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 339:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 340:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 341:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 342:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 343:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 344:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // traits_type::copy/move/assign.
 345:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
 346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 347:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n == 1)
 349:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 350:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
 351:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 352:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 353:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 354:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
 355:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 356:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 357:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n == 1)
 358:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 359:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
 360:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 361:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 362:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 363:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
 364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 365:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n == 1)
 367:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 368:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
 369:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 370:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 371:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 372:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 373:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 374:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _Iterator>
 375:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static void
 376:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 377:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
 378:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 379:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 380:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 381:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 382:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
 383:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 384:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 385:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 386:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
 387:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 388:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 389:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 390:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 391:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
ARM GAS  /tmp/ccOYETru.s 			page 9


 392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 393:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 394:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 395:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
 396:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 397:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 398:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 399:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 400:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static int
 401:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 402:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 403:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 404:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 405:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 406:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 407:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 408:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 409:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
 410:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return int(__d);
 411:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 412:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 413:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 414:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_assign(const basic_string&);
 415:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 416:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 417:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 418:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		size_type __len2);
 419:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 420:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 421:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 422:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 423:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
 424:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Construct/copy/destroy:
 425:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 426:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 427:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 428:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 429:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 430:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string()
  48              		.loc 2 431 7 is_stmt 1 view .LVU3
  49              	.LBB1106:
  50              	.LBI1106:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
  51              		.loc 2 190 7 view .LVU4
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
  52              		.loc 2 190 7 is_stmt 0 view .LVU5
  53              	.LBE1106:
  54              	.LBB1108:
  55              	.LBI1108:
  56              		.file 3 "/usr/include/newlib/c++/9.2.1/bits/allocator.h"
   1:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
ARM GAS  /tmp/ccOYETru.s 			page 10


   7:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** /*
  26:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  *
  29:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  */
  37:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  38:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****  */
  42:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  43:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  46:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #include <type_traits>
  50:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #endif
  51:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  52:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #endif
  56:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  57:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** {
  59:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  61:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****   /**
  62:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    *  @addtogroup allocators
  63:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    *  @{
ARM GAS  /tmp/ccOYETru.s 			page 11


  64:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    */
  65:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  66:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****   /// allocator<void> specialization.
  67:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****   template<>
  68:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****     class allocator<void>
  69:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****     {
  70:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****     public:
  71:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef size_t      size_type;
  72:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef void*       pointer;
  74:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef const void* const_pointer;
  75:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  77:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       template<typename _Tp1>
  78:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	struct rebind
  79:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  81:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  86:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  88:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	void
  90:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	noexcept(noexcept(::new((void *)__p)
  92:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 			    _Up(std::forward<_Args>(__args)...)))
  93:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  94:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
  95:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       template<typename _Up>
  96:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	void
  97:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	destroy(_Up* __p)
  98:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	noexcept(noexcept(__p->~_Up()))
  99:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	{ __p->~_Up(); }
 100:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #endif
 101:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****     };
 102:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 103:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****   /**
 104:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 105:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    *
 106:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 107:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    *  for further details.
 108:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    *
 109:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 110:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    */
 111:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****   template<typename _Tp>
 112:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 113:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****     {
 114:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****    public:
 115:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef size_t     size_type;
 116:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 117:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef _Tp*       pointer;
 118:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef const _Tp* const_pointer;
 119:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef _Tp&       reference;
 120:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef const _Tp& const_reference;
ARM GAS  /tmp/ccOYETru.s 			page 12


 121:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef _Tp        value_type;
 122:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 123:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       template<typename _Tp1>
 124:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	struct rebind
 125:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 126:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 127:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
 128:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 129:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 130:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 131:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 132:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       typedef true_type is_always_equal;
 133:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #endif
 134:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 135:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 137:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 138:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
  57              		.loc 3 138 7 is_stmt 1 view .LVU6
  58              	.LBB1109:
  59              	.LBI1109:
  60              		.file 4 "/usr/include/newlib/c++/9.2.1/ext/new_allocator.h"
   1:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
   3:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** //
   5:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  11:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  16:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  20:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  25:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****  */
  28:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  29:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  32:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #include <new>
  34:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #include <bits/move.h>
ARM GAS  /tmp/ccOYETru.s 			page 13


  36:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #endif
  39:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  40:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** {
  42:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  44:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  47:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****   /**
  48:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *
  51:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *
  55:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****    */
  57:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****     {
  60:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****     public:
  61:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  69:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	struct rebind
  71:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  73:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #endif
  78:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  79:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  61              		.loc 4 80 7 view .LVU7
  62              		.loc 4 80 7 is_stmt 0 view .LVU8
  63              	.LBE1109:
  64              	.LBE1108:
  65              	.LBB1110:
  66              	.LBI1110:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
  67              		.loc 2 159 2 is_stmt 1 view .LVU9
  68              	.LBB1111:
  69              	.LBB1112:
  70              	.LBI1112:
  71              		.file 5 "/usr/include/newlib/c++/9.2.1/bits/move.h"
ARM GAS  /tmp/ccOYETru.s 			page 14


   1:/usr/include/newlib/c++/9.2.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/move.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/move.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/move.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/move.h **** /** @file bits/move.h
  26:/usr/include/newlib/c++/9.2.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/9.2.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/newlib/c++/9.2.1/bits/move.h ****  */
  29:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  30:/usr/include/newlib/c++/9.2.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/newlib/c++/9.2.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  33:/usr/include/newlib/c++/9.2.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/newlib/c++/9.2.1/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  36:/usr/include/newlib/c++/9.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/newlib/c++/9.2.1/bits/move.h **** {
  38:/usr/include/newlib/c++/9.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  40:/usr/include/newlib/c++/9.2.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
  42:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/newlib/c++/9.2.1/bits/move.h ****    */
  45:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
  46:/usr/include/newlib/c++/9.2.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/include/newlib/c++/9.2.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/include/newlib/c++/9.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  50:/usr/include/newlib/c++/9.2.1/bits/move.h **** #if __cplusplus >= 201103L
  51:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  52:/usr/include/newlib/c++/9.2.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  53:/usr/include/newlib/c++/9.2.1/bits/move.h **** } // namespace
  54:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  55:/usr/include/newlib/c++/9.2.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  56:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  57:/usr/include/newlib/c++/9.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
ARM GAS  /tmp/ccOYETru.s 			page 15


  58:/usr/include/newlib/c++/9.2.1/bits/move.h **** {
  59:/usr/include/newlib/c++/9.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  61:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
  62:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @addtogroup utilities
  63:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @{
  64:/usr/include/newlib/c++/9.2.1/bits/move.h ****    */
  65:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  66:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
  67:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @brief  Forward an lvalue.
  68:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  69:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *
  70:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  71:/usr/include/newlib/c++/9.2.1/bits/move.h ****    */
  72:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
  73:/usr/include/newlib/c++/9.2.1/bits/move.h ****     constexpr _Tp&&
  74:/usr/include/newlib/c++/9.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  75:/usr/include/newlib/c++/9.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  76:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  77:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
  78:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @brief  Forward an rvalue.
  79:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  80:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *
  81:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  82:/usr/include/newlib/c++/9.2.1/bits/move.h ****    */
  83:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
  84:/usr/include/newlib/c++/9.2.1/bits/move.h ****     constexpr _Tp&&
  85:/usr/include/newlib/c++/9.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  86:/usr/include/newlib/c++/9.2.1/bits/move.h ****     {
  87:/usr/include/newlib/c++/9.2.1/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  88:/usr/include/newlib/c++/9.2.1/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  89:/usr/include/newlib/c++/9.2.1/bits/move.h ****       return static_cast<_Tp&&>(__t);
  90:/usr/include/newlib/c++/9.2.1/bits/move.h ****     }
  91:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
  92:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
  93:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  94:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  95:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  96:/usr/include/newlib/c++/9.2.1/bits/move.h ****   */
  97:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
  98:/usr/include/newlib/c++/9.2.1/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
  99:/usr/include/newlib/c++/9.2.1/bits/move.h ****     move(_Tp&& __t) noexcept
  72              		.loc 5 99 5 view .LVU10
  73              		.loc 5 99 5 is_stmt 0 view .LVU11
  74              	.LBE1112:
  75              	.LBB1113:
  76              	.LBI1113:
 139:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 140:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
  77              		.loc 3 141 7 is_stmt 1 view .LVU12
  78              	.LBB1114:
  79              	.LBI1114:
  81:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  82:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  80              		.loc 4 83 7 view .LVU13
ARM GAS  /tmp/ccOYETru.s 			page 16


  81              		.loc 4 83 7 is_stmt 0 view .LVU14
  82              	.LBE1114:
  83              	.LBE1113:
  84              	.LBE1111:
  85              	.LBE1110:
  86              	.LBE1097:
  87              	.LBB1122:
  88              	.LBB1123:
  89              	.LBB1124:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
  90              		.loc 2 193 51 view .LVU15
  91 0002 00F12401 		add	r1, r0, #36
  92              	.LBE1124:
  93              	.LBE1123:
  94              	.LBE1122:
  95              		.loc 1 19 1 view .LVU16
  96 0006 10B4     		push	{r4}
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 4, -4
  99              	.LBB1146:
 100              	.LBB1116:
 101              	.LBB1107:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 102              		.loc 2 193 51 view .LVU17
 103 0008 00F10C04 		add	r4, r0, #12
 104              	.LVL2:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 105              		.loc 2 193 51 view .LVU18
 106              	.LBE1107:
 107              	.LBE1116:
 108              	.LBE1146:
 109              	.LBB1147:
 110              	.LBB1125:
 111              	.LBB1126:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 112              		.loc 2 160 46 view .LVU19
 113 000c C161     		str	r1, [r0, #28]
 114              	.LBE1126:
 115              	.LBE1125:
 116              	.LBE1147:
 117              	.LBB1148:
 118              	.LBB1117:
 119              	.LBB1101:
 120              	.LBB1102:
 121              		.file 6 "/usr/include/newlib/c++/9.2.1/bits/char_traits.h"
   1:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
ARM GAS  /tmp/ccOYETru.s 			page 17


  13:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****  */
  29:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  30:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** //
  31:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** //
  33:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  34:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  37:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  39:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  43:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  44:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  45:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #endif
  46:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  47:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  48:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** {
  49:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   /**
  52:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  53:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *
  54:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  55:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  56:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  57:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  58:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  59:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  60:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  61:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
  62:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     struct _Char_types
  63:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
  64:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef unsigned long   int_type;
  65:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef std::streampos  pos_type;
  66:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef std::streamoff  off_type;
  67:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  68:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     };
  69:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 18


  70:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  71:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   /**
  72:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  73:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *
  74:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  75:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  76:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  77:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  78:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  79:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  80:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  81:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *
  82:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  83:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  84:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  85:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    */
  86:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
  87:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     struct char_traits
  88:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
  89:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef _CharT                                    char_type;
  90:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  91:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  92:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  93:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  94:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  95:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
  96:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  97:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
  98:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
  99:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 100:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 101:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return __c1 == __c2; }
 102:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 103:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 104:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 105:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return __c1 < __c2; }
 106:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 107:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 108:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 109:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 110:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 111:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       length(const char_type* __s);
 112:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 113:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 114:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 115:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 116:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static char_type*
 117:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 118:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 119:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static char_type*
 120:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 121:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 122:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static char_type*
 123:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 124:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 125:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 126:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       to_char_type(const int_type& __c)
ARM GAS  /tmp/ccOYETru.s 			page 19


 127:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 128:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 129:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 130:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       to_int_type(const char_type& __c)
 131:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 132:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 133:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 134:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 135:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return __c1 == __c2; }
 136:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 137:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       eof()
 139:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 140:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 141:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 142:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       not_eof(const int_type& __c)
 143:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 144:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     };
 145:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 146:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 147:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 148:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     char_traits<_CharT>::
 149:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 150:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 151:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 152:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 153:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return -1;
 154:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 155:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return 1;
 156:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return 0;
 157:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 158:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 159:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 160:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 161:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     char_traits<_CharT>::
 162:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     length(const char_type* __p)
 163:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 164:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       std::size_t __i = 0;
 165:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 166:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****         ++__i;
 167:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return __i;
 168:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 169:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 170:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 171:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 172:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     char_traits<_CharT>::
 173:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 174:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 175:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 176:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****         if (eq(__s[__i], __a))
 177:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****           return __s + __i;
 178:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return 0;
 179:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 180:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 181:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 182:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 183:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     char_traits<_CharT>::
ARM GAS  /tmp/ccOYETru.s 			page 20


 184:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 185:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 186:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       if (__n == 0)
 187:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	return __s1;
 188:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 189:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 190:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 191:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 192:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 193:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 194:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     char_traits<_CharT>::
 195:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 196:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 197:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 198:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 199:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return __s1;
 200:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 201:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 202:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 203:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 204:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     char_traits<_CharT>::
 205:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 206:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 207:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 208:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 209:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return __s;
 210:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 211:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 212:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 213:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** } // namespace
 214:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 215:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 216:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** {
 217:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 218:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 219:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 220:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #define __cpp_lib_constexpr_char_traits 201611
 221:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 222:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   /**
 223:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 224:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  string are known at compile time.
 225:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @param  __s  The string.
 226:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *
 227:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 228:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    */
 229:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 230:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 231:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 232:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 233:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 234:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       (void) __s;
 235:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       // In constexpr contexts all strings should be constant.
 236:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 237:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #else
 238:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 239:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	__s++;
 240:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return __builtin_constant_p(*__s);
ARM GAS  /tmp/ccOYETru.s 			page 21


 241:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #endif
 242:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 243:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 244:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   /**
 245:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 246:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  known at compile time.
 247:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @param  __a  The character array.
 248:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @param  __n  Number of characters.
 249:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *
 250:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 251:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    */
 252:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<typename _CharT>
 253:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 254:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 255:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 256:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 257:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       (void) __a;
 258:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       (void) __n;
 259:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       // In constexpr contexts all character arrays should be constant.
 260:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 261:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #else
 262:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       size_t __i = 0;
 263:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       while (__i < __n && __builtin_constant_p(__a[__i]))
 264:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	__i++;
 265:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       return __i == __n;
 266:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #endif
 267:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     }
 268:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #endif
 269:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 270:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   // 21.1
 271:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   /**
 272:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 273:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *
 274:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 275:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 276:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 277:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 278:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *
 279:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 280:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 281:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 282:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   */
 283:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<class _CharT>
 284:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 285:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     { };
 286:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 287:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 288:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 289:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****   template<>
 290:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     struct char_traits<char>
 291:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****     {
 292:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef char              char_type;
 293:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef int               int_type;
 294:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef streampos         pos_type;
 295:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef streamoff         off_type;
 296:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       typedef mbstate_t         state_type;
 297:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 22


 298:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 122              		.loc 6 300 14 view .LVU20
 123 000e 0273     		strb	r2, [r0, #12]
 124              	.LBE1102:
 125              	.LBE1101:
 126              	.LBE1117:
 127              	.LBE1148:
 128              	.LBB1149:
 129              	.LBB1131:
 130              	.LBB1132:
 131              	.LBB1133:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 132              		.loc 2 183 9 view .LVU21
 133 0010 0262     		str	r2, [r0, #32]
 134              	.LBE1133:
 135              	.LBE1132:
 136              	.LBB1134:
 137              	.LBB1135:
 138              		.loc 6 300 14 view .LVU22
 139 0012 80F82420 		strb	r2, [r0, #36]
 140              	.LBE1135:
 141              	.LBE1134:
 142              	.LBE1131:
 143              	.LBE1149:
 144              	.LBB1150:
 145              	.LBB1151:
 146              	.LBB1152:
 147              	.LBB1153:
 148              	.LBB1154:
 149              		.file 7 "/usr/include/newlib/c++/9.2.1/bits/stl_vector.h"
   1:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** /*
ARM GAS  /tmp/ccOYETru.s 			page 23


  26:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  *
  27:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  *
  30:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  *
  38:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  *
  39:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  *
  42:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  */
  50:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****  */
  55:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  56:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  59:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
  65:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  66:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #include <debug/assertions.h>
  67:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  68:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  69:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** extern "C" void
  70:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  71:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 					  const void*, const void*);
  72:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
  73:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  74:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  75:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** {
  76:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  77:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  78:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  79:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  80:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  81:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     struct _Vector_base
  82:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     {
ARM GAS  /tmp/ccOYETru.s 			page 24


  83:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  84:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  85:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  86:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        	pointer;
  87:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  88:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       struct _Vector_impl_data
  89:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
  90:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	pointer _M_start;
  91:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	pointer _M_finish;
  92:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  93:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  94:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  95:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 150              		.loc 7 95 47 view .LVU23
 151 0016 C263     		str	r2, [r0, #60]
 152              	.LBE1154:
 153              	.LBE1153:
 154              	.LBE1152:
 155              	.LBE1151:
 156              	.LBE1150:
 157              	.LBB1164:
 158              	.LBB1165:
 159              	.LBB1166:
 160              		.file 8 "/usr/include/newlib/c++/9.2.1/bits/std_function.h"
   1:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // Implementation of std::function -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // Copyright (C) 2004-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** /** @file include/bits/std_function.h
  26:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****  *  Do not attempt to use it directly. @headername{functional}
  28:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****  */
  29:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  30:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #ifndef _GLIBCXX_STD_FUNCTION_H
  31:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #define _GLIBCXX_STD_FUNCTION_H 1
  32:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  33:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #pragma GCC system_header
ARM GAS  /tmp/ccOYETru.s 			page 25


  34:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  35:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #if __cplusplus < 201103L
  36:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** # include <bits/c++0x_warning.h>
  37:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #else
  38:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  39:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #if __cpp_rtti
  40:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** # include <typeinfo>
  41:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #endif
  42:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #include <bits/stl_function.h>
  43:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #include <bits/invoke.h>
  44:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #include <bits/refwrap.h>
  45:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #include <bits/functexcept.h>
  46:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  47:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** namespace std _GLIBCXX_VISIBILITY(default)
  48:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** {
  49:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   /**
  52:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  @brief Exception class thrown when class template function's
  53:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  operator() is called with an empty target.
  54:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  @ingroup exceptions
  55:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    */
  56:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   class bad_function_call : public std::exception
  57:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   {
  58:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   public:
  59:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     virtual ~bad_function_call() noexcept;
  60:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  61:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     const char* what() const noexcept;
  62:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   };
  63:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  64:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   /**
  65:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  Trait identifying "location-invariant" types, meaning that the
  66:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  address of the object (or any of its members) will not escape.
  67:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  Trivially copyable types are location-invariant and users can
  68:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  specialize this trait for other types.
  69:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    */
  70:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Tp>
  71:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct __is_location_invariant
  72:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : is_trivially_copyable<_Tp>::type
  73:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     { };
  74:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  75:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   class _Undefined_class;
  76:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  77:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   union _Nocopy_types
  78:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   {
  79:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     void*       _M_object;
  80:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     const void* _M_const_object;
  81:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     void (*_M_function_pointer)();
  82:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     void (_Undefined_class::*_M_member_pointer)();
  83:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   };
  84:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  85:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   union [[gnu::may_alias]] _Any_data
  86:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   {
  87:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     void*       _M_access()       { return &_M_pod_data[0]; }
  88:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     const void* _M_access() const { return &_M_pod_data[0]; }
  89:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  90:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     template<typename _Tp>
ARM GAS  /tmp/ccOYETru.s 			page 26


  91:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Tp&
  92:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _M_access()
  93:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       { return *static_cast<_Tp*>(_M_access()); }
  94:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
  95:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     template<typename _Tp>
  96:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       const _Tp&
  97:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _M_access() const
  98:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       { return *static_cast<const _Tp*>(_M_access()); }
  99:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 100:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     _Nocopy_types _M_unused;
 101:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     char _M_pod_data[sizeof(_Nocopy_types)];
 102:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   };
 103:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 104:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   enum _Manager_operation
 105:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   {
 106:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     __get_type_info,
 107:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     __get_functor_ptr,
 108:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     __clone_functor,
 109:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     __destroy_functor
 110:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   };
 111:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 112:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   // Simple type wrapper that helps avoid annoying const problems
 113:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   // when casting between void pointers and pointers-to-pointers.
 114:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Tp>
 115:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct _Simple_type_wrapper
 116:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 117:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Simple_type_wrapper(_Tp __value) : __value(__value) { }
 118:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 119:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Tp __value;
 120:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     };
 121:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 122:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Tp>
 123:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
 124:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : __is_location_invariant<_Tp>
 125:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     { };
 126:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 127:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Signature>
 128:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     class function;
 129:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 130:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   /// Base class of all polymorphic function object wrappers.
 131:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   class _Function_base
 132:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   {
 133:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   public:
 134:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     static const size_t _M_max_size = sizeof(_Nocopy_types);
 135:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     static const size_t _M_max_align = __alignof__(_Nocopy_types);
 136:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 137:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     template<typename _Functor>
 138:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       class _Base_manager
 139:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 140:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       protected:
 141:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static const bool __stored_locally =
 142:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	(__is_location_invariant<_Functor>::value
 143:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	 && sizeof(_Functor) <= _M_max_size
 144:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	 && __alignof__(_Functor) <= _M_max_align
 145:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	 && (_M_max_align % __alignof__(_Functor) == 0));
 146:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 147:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	typedef integral_constant<bool, __stored_locally> _Local_storage;
ARM GAS  /tmp/ccOYETru.s 			page 27


 148:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 149:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// Retrieve a pointer to the function object
 150:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static _Functor*
 151:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_get_pointer(const _Any_data& __source)
 152:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 153:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  if _GLIBCXX17_CONSTEXPR (__stored_locally)
 154:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    {
 155:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      const _Functor& __f = __source._M_access<_Functor>();
 156:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      return const_cast<_Functor*>(std::__addressof(__f));
 157:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    }
 158:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  else // have stored a pointer
 159:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    return __source._M_access<_Functor*>();
 160:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 161:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 162:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// Clone a location-invariant function object that fits within
 163:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// an _Any_data structure.
 164:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static void
 165:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 166:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 167:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 168:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 169:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 170:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// Clone a function object that is not location-invariant or
 171:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// that cannot fit into an _Any_data structure.
 172:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static void
 173:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 174:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 175:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  __dest._M_access<_Functor*>() =
 176:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    new _Functor(*__source._M_access<const _Functor*>());
 177:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 178:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 179:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// Destroying a location-invariant object may still require
 180:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// destruction.
 181:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static void
 182:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_destroy(_Any_data& __victim, true_type)
 183:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 184:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  __victim._M_access<_Functor>().~_Functor();
 185:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 186:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 187:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	// Destroying an object located on the heap.
 188:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static void
 189:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_destroy(_Any_data& __victim, false_type)
 190:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 191:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  delete __victim._M_access<_Functor*>();
 192:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 193:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 194:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       public:
 195:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static bool
 196:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_manager(_Any_data& __dest, const _Any_data& __source,
 197:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 		   _Manager_operation __op)
 198:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 199:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  switch (__op)
 200:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    {
 201:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #if __cpp_rtti
 202:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    case __get_type_info:
 203:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 204:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      break;
ARM GAS  /tmp/ccOYETru.s 			page 28


 205:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #endif
 206:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    case __get_functor_ptr:
 207:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 208:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      break;
 209:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 210:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    case __clone_functor:
 211:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      _M_clone(__dest, __source, _Local_storage());
 212:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      break;
 213:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 214:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    case __destroy_functor:
 215:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      _M_destroy(__dest, _Local_storage());
 216:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      break;
 217:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    }
 218:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  return false;
 219:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 220:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 221:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static void
 222:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 223:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 224:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 225:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	template<typename _Signature>
 226:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  static bool
 227:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_not_empty_function(const function<_Signature>& __f)
 228:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  { return static_cast<bool>(__f); }
 229:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 230:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	template<typename _Tp>
 231:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  static bool
 232:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_not_empty_function(_Tp* __fp)
 233:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  { return __fp != nullptr; }
 234:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 235:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	template<typename _Class, typename _Tp>
 236:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  static bool
 237:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_not_empty_function(_Tp _Class::* __mp)
 238:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  { return __mp != nullptr; }
 239:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 240:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	template<typename _Tp>
 241:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  static bool
 242:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_not_empty_function(const _Tp&)
 243:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  { return true; }
 244:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 245:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       private:
 246:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static void
 247:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 248:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 249:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 250:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	static void
 251:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 252:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 253:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       };
 254:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     _Function_base() : _M_manager(nullptr) { }
 161              		.loc 8 255 42 view .LVU24
 162 0018 8264     		str	r2, [r0, #72]
 163              	.LBE1166:
 164              	.LBE1165:
 165              	.LBE1164:
 166              	.LBB1168:
ARM GAS  /tmp/ccOYETru.s 			page 29


 167              	.LBB1118:
 168              	.LBB1115:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 169              		.loc 2 160 46 view .LVU25
 170 001a C0E90142 		strd	r4, r2, [r0, #4]
 171              	.LVL3:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 172              		.loc 2 160 46 view .LVU26
 173              	.LBE1115:
 174              	.LBE1118:
 175              	.LBB1119:
 176              	.LBI1119:
 142:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 143:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 144:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
 145:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       // Avoid implicit deprecation.
 146:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 147:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** #endif
 148:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 149:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       template<typename _Tp1>
 150:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 151:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 152:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 153:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 177              		.loc 3 153 7 is_stmt 1 view .LVU27
 178              	.LBB1120:
 179              	.LBI1120:
  84:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  85:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       template<typename _Tp1>
  86:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  87:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  88:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 180              		.loc 4 89 7 view .LVU28
 181              		.loc 4 89 7 is_stmt 0 view .LVU29
 182              	.LBE1120:
 183              	.LBE1119:
 184              	.LBB1121:
 185              	.LBI1098:
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 186              		.loc 2 214 7 is_stmt 1 view .LVU30
 187              	.LBB1104:
 188              	.LBI1099:
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 189              		.loc 2 182 7 view .LVU31
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 190              		.loc 2 182 7 is_stmt 0 view .LVU32
 191              	.LBE1104:
 192              	.LBB1105:
 193              	.LBI1101:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 194              		.loc 6 299 7 is_stmt 1 view .LVU33
 195              	.LBB1103:
 196              		.loc 6 300 9 view .LVU34
 197              		.loc 6 300 9 is_stmt 0 view .LVU35
 198              	.LBE1103:
 199              	.LBE1105:
ARM GAS  /tmp/ccOYETru.s 			page 30


 200              	.LBE1121:
 201              	.LBE1168:
 202              	.LBB1169:
 203              	.LBI1122:
 204              		.loc 2 431 7 is_stmt 1 view .LVU36
 205              	.LBB1139:
 206              	.LBI1123:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 207              		.loc 2 190 7 view .LVU37
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 208              		.loc 2 190 7 is_stmt 0 view .LVU38
 209              	.LBE1139:
 210              	.LBB1140:
 211              	.LBI1140:
 138:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 212              		.loc 3 138 7 is_stmt 1 view .LVU39
 213              	.LBB1141:
 214              	.LBI1141:
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 215              		.loc 4 80 7 view .LVU40
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 216              		.loc 4 80 7 is_stmt 0 view .LVU41
 217              	.LBE1141:
 218              	.LBE1140:
 219              	.LBB1142:
 220              	.LBI1125:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 221              		.loc 2 159 2 is_stmt 1 view .LVU42
 222              	.LBB1130:
 223              	.LBB1127:
 224              	.LBI1127:
 225              		.loc 5 99 5 view .LVU43
 226              		.loc 5 99 5 is_stmt 0 view .LVU44
 227              	.LBE1127:
 228              	.LBB1128:
 229              	.LBI1128:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 230              		.loc 3 141 7 is_stmt 1 view .LVU45
 231              	.LBB1129:
 232              	.LBI1129:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 233              		.loc 4 83 7 view .LVU46
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 234              		.loc 4 83 7 is_stmt 0 view .LVU47
 235              	.LBE1129:
 236              	.LBE1128:
 237              	.LBE1130:
 238              	.LBE1142:
 239              	.LBB1143:
 240              	.LBI1143:
 241              		.loc 3 153 7 is_stmt 1 view .LVU48
 242              	.LBB1144:
 243              	.LBI1144:
 244              		.loc 4 89 7 view .LVU49
 245              		.loc 4 89 7 is_stmt 0 view .LVU50
 246              	.LBE1144:
 247              	.LBE1143:
ARM GAS  /tmp/ccOYETru.s 			page 31


 248              	.LBB1145:
 249              	.LBI1131:
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 250              		.loc 2 214 7 is_stmt 1 view .LVU51
 251              	.LBB1137:
 252              	.LBI1132:
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 253              		.loc 2 182 7 view .LVU52
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 254              		.loc 2 182 7 is_stmt 0 view .LVU53
 255              	.LBE1137:
 256              	.LBB1138:
 257              	.LBI1134:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 258              		.loc 6 299 7 is_stmt 1 view .LVU54
 259              	.LBB1136:
 260              		.loc 6 300 9 view .LVU55
 261              		.loc 6 300 9 is_stmt 0 view .LVU56
 262              	.LBE1136:
 263              	.LBE1138:
 264              	.LBE1145:
 265              	.LBE1169:
 266              	.LBB1170:
 267              	.LBI1150:
  96:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
  97:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
  98:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  99:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 100:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 101:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 102:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 103:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 104:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 105:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	void
 106:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 107:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{
 108:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 109:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 110:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 111:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	}
 112:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 113:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	void
 114:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 115:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{
 116:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 117:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  // information used by TBAA.
 118:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 119:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 120:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_copy_data(__x);
 121:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 122:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	}
 123:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       };
 124:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 125:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       struct _Vector_impl
 126:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 127:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 128:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
ARM GAS  /tmp/ccOYETru.s 			page 32


 129:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 130:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type()
 131:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 132:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 133:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 134:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 135:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 136:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 137:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 138:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 139:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 140:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 141:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 142:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 143:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 144:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 145:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 146:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 147:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 148:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 149:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 150:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 151:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 152:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 153:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 154:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 155:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  struct _Asan
 156:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  {
 157:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 158:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      ::size_type size_type;
 159:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 160:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 161:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 162:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 163:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 164:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 165:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    struct _Grow
 166:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    {
 167:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 168:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 169:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    };
 170:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  };
 171:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 172:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 173:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	template<typename _Up>
 174:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 175:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  {
 176:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 177:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      ::size_type size_type;
 178:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 179:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 180:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 181:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    static void
 182:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 183:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    {
 184:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 185:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
ARM GAS  /tmp/ccOYETru.s 			page 33


 186:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    }
 187:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 188:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    static void
 189:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 190:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 191:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 192:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    static void
 193:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 194:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 195:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 196:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    static void
 197:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 198:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    {
 199:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      if (__impl._M_start)
 200:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 201:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    }
 202:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 203:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 204:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    struct _Reinit
 205:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    {
 206:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 207:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      {
 208:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 209:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 210:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      }
 211:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 212:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      ~_Reinit()
 213:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      {
 214:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 215:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		if (_M_impl._M_start)
 216:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 217:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			    _M_impl._M_finish);
 218:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      }
 219:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 220:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 221:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 222:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 223:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 224:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 225:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 226:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    };
 227:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 228:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 229:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    struct _Grow
 230:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    {
 231:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 232:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 233:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 234:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 235:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 236:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 237:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 238:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 239:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 240:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 241:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 242:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
ARM GAS  /tmp/ccOYETru.s 			page 34


 243:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    private:
 244:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 245:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      size_type _M_n;
 246:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    };
 247:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  };
 248:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 249:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 250:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 251:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 252:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 253:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 254:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 255:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 256:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 257:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 258:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 259:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 260:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 261:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 262:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 263:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 264:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 265:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 266:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 267:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       };
 268:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 269:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     public:
 270:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 271:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 272:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Tp_alloc_type&
 273:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 274:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return this->_M_impl; }
 275:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 276:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const _Tp_alloc_type&
 277:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 278:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return this->_M_impl; }
 279:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 280:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       allocator_type
 281:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 282:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 283:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 284:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 285:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base() = default;
 286:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 287:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base() { }
 288:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 289:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 290:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 291:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _M_impl(__a) { }
 292:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 293:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 294:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 295:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base(size_t __n)
 296:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _M_impl()
 297:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 298:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 299:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 35


 300:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 301:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _M_impl(__a)
 302:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 303:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 304:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 305:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 306:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 307:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 308:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 309:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 310:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 311:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 312:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 313:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _M_impl(__a)
 314:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 315:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 316:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 317:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	else
 318:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  {
 319:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 320:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _M_create_storage(__n);
 321:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  }
 322:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 323:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** # endif
 324:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 325:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 326:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 327:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { }
 328:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 329:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 330:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 331:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 332:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 333:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 334:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 335:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 336:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     public:
 337:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Vector_impl _M_impl;
 338:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 339:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       pointer
 340:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _M_allocate(size_t __n)
 341:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 342:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 343:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 344:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 345:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 346:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 347:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 348:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 349:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 350:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (__p)
 351:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 352:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 353:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 354:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     protected:
 355:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 356:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _M_create_storage(size_t __n)
ARM GAS  /tmp/ccOYETru.s 			page 36


 357:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 358:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 359:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 360:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 361:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 362:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     };
 363:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 364:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   /**
 365:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 366:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  individual elements in any order.
 367:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *
 368:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  @ingroup sequences
 369:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *
 370:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 371:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 372:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *
 373:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 374:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 375:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 376:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 377:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 378:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *
 379:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 380:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 381:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 382:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 383:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 384:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   */
 385:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 386:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 387:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     {
 388:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 389:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // Concept requirements.
 390:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 391:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** # if __cplusplus < 201103L
 392:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 393:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** # endif
 394:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 395:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 396:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 397:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 398:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 399:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 400:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** # ifdef __STRICT_ANSI__
 401:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 402:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 403:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** # endif
 404:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 405:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 406:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 407:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 408:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 409:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 410:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     public:
 411:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef _Tp					value_type;
 412:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 413:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
ARM GAS  /tmp/ccOYETru.s 			page 37


 414:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 415:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 416:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 417:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 418:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_iterator;
 419:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 420:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 421:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef size_t					size_type;
 422:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 423:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 424:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 425:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     private:
 426:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 427:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static constexpr bool
 428:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 429:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 430:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 431:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 432:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 433:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 434:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 435:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 436:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static constexpr bool
 437:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 438:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return false; }
 439:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 440:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static constexpr bool
 441:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _S_use_relocate()
 442:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 443:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 444:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 445:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 446:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 447:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 448:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 449:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static pointer
 450:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 451:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 452:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 453:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 454:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 455:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 456:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static pointer
 457:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 458:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 459:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return __result; }
 460:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 461:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       static pointer
 462:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 463:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 464:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 465:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 466:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 467:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 468:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif // C++11
 469:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 470:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     protected:
ARM GAS  /tmp/ccOYETru.s 			page 38


 471:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       using _Base::_M_allocate;
 472:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       using _Base::_M_deallocate;
 473:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       using _Base::_M_impl;
 474:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 475:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 476:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     public:
 477:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 478:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 479:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 480:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 481:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 482:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 483:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 484:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector() = default;
 268              		.loc 7 484 7 is_stmt 1 view .LVU57
 269              	.LBB1162:
 270              	.LBI1151:
 285:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 271              		.loc 7 285 7 view .LVU58
 272              	.LBB1160:
 273              	.LBI1152:
 128:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 274              		.loc 7 128 2 view .LVU59
 275              	.LBB1156:
 276              	.LBI1156:
 138:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 277              		.loc 3 138 7 view .LVU60
 278              	.LBB1157:
 279              	.LBI1157:
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 280              		.loc 4 80 7 view .LVU61
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 281              		.loc 4 80 7 is_stmt 0 view .LVU62
 282              	.LBE1157:
 283              	.LBE1156:
 284              	.LBB1158:
 285              	.LBI1153:
  94:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 286              		.loc 7 94 2 is_stmt 1 view .LVU63
  94:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 287              		.loc 7 94 2 is_stmt 0 view .LVU64
 288              	.LBE1158:
 289              	.LBE1160:
 290              	.LBE1162:
 291              	.LBE1170:
 292              	.LBB1171:
 293              	.LBI1164:
 256:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 257:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     ~_Function_base()
 258:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 259:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       if (_M_manager)
 260:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 261:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     }
 262:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 263:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     bool _M_empty() const { return !_M_manager; }
 264:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 265:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
ARM GAS  /tmp/ccOYETru.s 			page 39


 266:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 				  _Manager_operation);
 267:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 268:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     _Any_data     _M_functor;
 269:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     _Manager_type _M_manager;
 270:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   };
 271:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 272:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Signature, typename _Functor>
 273:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     class _Function_handler;
 274:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 275:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename _Functor, typename... _ArgTypes>
 276:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     class _Function_handler<_Res(_ArgTypes...), _Functor>
 277:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : public _Function_base::_Base_manager<_Functor>
 278:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 279:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       typedef _Function_base::_Base_manager<_Functor> _Base;
 280:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 281:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     public:
 282:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       static _Res
 283:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 284:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 285:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	return (*_Base::_M_get_pointer(__functor))(
 286:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    std::forward<_ArgTypes>(__args)...);
 287:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 288:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     };
 289:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 290:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Functor, typename... _ArgTypes>
 291:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     class _Function_handler<void(_ArgTypes...), _Functor>
 292:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : public _Function_base::_Base_manager<_Functor>
 293:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 294:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       typedef _Function_base::_Base_manager<_Functor> _Base;
 295:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 296:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****      public:
 297:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       static void
 298:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 299:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 300:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	(*_Base::_M_get_pointer(__functor))(
 301:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    std::forward<_ArgTypes>(__args)...);
 302:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 303:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     };
 304:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 305:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Class, typename _Member, typename _Res,
 306:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	   typename... _ArgTypes>
 307:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
 308:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
 309:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 310:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 311:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_Base;
 312:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 313:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****      public:
 314:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       static _Res
 315:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 316:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 317:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	return std::__invoke(_Base::_M_get_pointer(__functor)->__value,
 318:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 			     std::forward<_ArgTypes>(__args)...);
 319:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 320:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     };
 321:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 322:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Class, typename _Member, typename... _ArgTypes>
ARM GAS  /tmp/ccOYETru.s 			page 40


 323:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     class _Function_handler<void(_ArgTypes...), _Member _Class::*>
 324:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : public _Function_base::_Base_manager<
 325:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 		 _Simple_type_wrapper< _Member _Class::* > >
 326:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 327:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       typedef _Member _Class::* _Functor;
 328:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       typedef _Simple_type_wrapper<_Functor> _Wrapper;
 329:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       typedef _Function_base::_Base_manager<_Wrapper> _Base;
 330:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 331:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     public:
 332:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       static bool
 333:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _M_manager(_Any_data& __dest, const _Any_data& __source,
 334:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 		 _Manager_operation __op)
 335:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 336:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	switch (__op)
 337:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  {
 338:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #if __cpp_rtti
 339:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  case __get_type_info:
 340:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 341:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    break;
 342:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #endif
 343:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  case __get_functor_ptr:
 344:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    __dest._M_access<_Functor*>() =
 345:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	      &_Base::_M_get_pointer(__source)->__value;
 346:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    break;
 347:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 348:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  default:
 349:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    _Base::_M_manager(__dest, __source, __op);
 350:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  }
 351:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	return false;
 352:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 353:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 354:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       static void
 355:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 356:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 357:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	std::__invoke(_Base::_M_get_pointer(__functor)->__value,
 358:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 		      std::forward<_ArgTypes>(__args)...);
 359:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 360:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     };
 361:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 362:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   /**
 363:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  @brief Primary class template for std::function.
 364:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  @ingroup functors
 365:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *
 366:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    *  Polymorphic function wrapper.
 367:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****    */
 368:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename... _ArgTypes>
 369:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     class function<_Res(_ArgTypes...)>
 370:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
 371:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       private _Function_base
 372:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 373:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Func,
 374:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	       typename _Res2 = __invoke_result<_Func&, _ArgTypes...>>
 375:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	struct _Callable
 376:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	: __is_invocable_impl<_Res2, _Res>::type
 377:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{ };
 378:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 379:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // Used so the return type convertibility checks aren't done when
ARM GAS  /tmp/ccOYETru.s 			page 41


 380:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // performing overload resolution for copy construction/assignment.
 381:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Tp>
 382:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	struct _Callable<function, _Tp> : false_type { };
 383:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 384:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Cond, typename _Tp>
 385:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	using _Requires = typename enable_if<_Cond::value, _Tp>::type;
 386:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 387:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     public:
 388:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       typedef _Res result_type;
 389:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 390:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // [3.7.2.1] construct/copy/destroy
 391:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 392:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 393:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Default construct creates an empty function call wrapper.
 394:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @post @c !(bool)*this
 395:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 396:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function() noexcept
 294              		.loc 8 396 7 is_stmt 1 view .LVU65
 295              	.LBB1167:
 296              	.LBI1165:
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 297              		.loc 8 255 5 view .LVU66
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 298              		.loc 8 255 5 is_stmt 0 view .LVU67
 299              	.LBE1167:
 300              	.LBE1171:
 301              	.LBB1172:
 302              	.LBB1163:
 303              	.LBB1161:
 304              	.LBB1159:
 305              	.LBB1155:
  95:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 306              		.loc 7 95 47 view .LVU68
 307 001e C0E90D22 		strd	r2, r2, [r0, #52]
 308              	.LBE1155:
 309              	.LBE1159:
 310              	.LBE1161:
 311              	.LBE1163:
 312              	.LBE1172:
 313              		.loc 1 19 22 view .LVU69
 314 0022 5DF8044B 		ldr	r4, [sp], #4
 315              		.cfi_restore 4
 316              		.cfi_def_cfa_offset 0
 317 0026 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE2248:
 321              		.global	_ZN2mu8MenuItemC1Ev
 322              		.thumb_set _ZN2mu8MenuItemC1Ev,_ZN2mu8MenuItemC2Ev
 323              		.section	.text._ZN2mu8MenuItem9IncrementEv,"ax",%progbits
 324              		.align	1
 325              		.p2align 2,,3
 326              		.global	_ZN2mu8MenuItem9IncrementEv
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv5-d16
 332              	_ZN2mu8MenuItem9IncrementEv:
ARM GAS  /tmp/ccOYETru.s 			page 42


 333              	.LVL4:
 334              	.LFB2255:
  20:Mu/logistics/menuitem.cpp **** 
  21:Mu/logistics/menuitem.cpp **** // aDefault must be a valid index in aValues
  22:Mu/logistics/menuitem.cpp **** MenuItem::MenuItem(std::string aName, std::vector<std::string> aValues, int aDefault, std::function
  23:Mu/logistics/menuitem.cpp ****     name = aName;
  24:Mu/logistics/menuitem.cpp ****     values = aValues;
  25:Mu/logistics/menuitem.cpp ****     index = aDefault;
  26:Mu/logistics/menuitem.cpp ****     myOnChangeCallback = cb;
  27:Mu/logistics/menuitem.cpp **** 
  28:Mu/logistics/menuitem.cpp ****     // TODO: implement a menu class that contains a list of menuItems, it can track this
  29:Mu/logistics/menuitem.cpp ****     // // For everything to line up neatly, each menu item's displayName 
  30:Mu/logistics/menuitem.cpp ****     // // needs to be padded with enough spaces to be in line with the 
  31:Mu/logistics/menuitem.cpp ****     // // end of the longest name, plus 1 additional space. The longest 
  32:Mu/logistics/menuitem.cpp ****     // // menu item name is currently "Inversion" with 10 chars.
  33:Mu/logistics/menuitem.cpp ****     // displayName = aName;
  34:Mu/logistics/menuitem.cpp ****     // for (unsigned int i = 0; i < 10 - name.length(); i++) {
  35:Mu/logistics/menuitem.cpp ****     //     displayName += " ";
  36:Mu/logistics/menuitem.cpp ****     // }
  37:Mu/logistics/menuitem.cpp **** };
  38:Mu/logistics/menuitem.cpp **** 
  39:Mu/logistics/menuitem.cpp **** std::string MenuItem::DisplayValue() {
  40:Mu/logistics/menuitem.cpp ****     return  displayName + values[index];
  41:Mu/logistics/menuitem.cpp **** };
  42:Mu/logistics/menuitem.cpp **** 
  43:Mu/logistics/menuitem.cpp **** std::string MenuItem::Value() {
  44:Mu/logistics/menuitem.cpp ****     return values[index];
  45:Mu/logistics/menuitem.cpp **** }
  46:Mu/logistics/menuitem.cpp **** 
  47:Mu/logistics/menuitem.cpp **** void MenuItem::Increment(){
 335              		.loc 1 47 27 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
  48:Mu/logistics/menuitem.cpp ****     index++;
 339              		.loc 1 48 5 view .LVU71
  49:Mu/logistics/menuitem.cpp ****     index = index % values.size();
 340              		.loc 1 49 5 view .LVU72
  47:Mu/logistics/menuitem.cpp ****     index++;
 341              		.loc 1 47 27 is_stmt 0 view .LVU73
 342 0000 10B5     		push	{r4, lr}
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 4, -8
 345              		.cfi_offset 14, -4
 346              	.LBB1173:
 347              	.LBB1174:
 485:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 486:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector() { }
 487:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 488:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 489:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 490:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 491:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 492:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 493:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       explicit
 494:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 495:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(__a) { }
ARM GAS  /tmp/ccOYETru.s 			page 43


 496:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 497:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 498:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 499:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 500:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 501:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 502:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 503:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 504:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  constructed elements.
 505:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 506:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       explicit
 507:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 508:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 509:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 510:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 511:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 512:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 513:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 514:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 515:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 516:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 517:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 518:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 519:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 520:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 521:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 522:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 523:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 524:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 525:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 526:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 527:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 528:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 529:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 530:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 531:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 532:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       explicit
 533:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 534:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 535:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 536:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 537:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 538:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 539:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 540:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 541:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 542:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 543:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 544:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @a __x  will not be copied
 545:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 546:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 547:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 548:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 549:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 550:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(const vector& __x)
 551:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(__x.size(),
 552:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
ARM GAS  /tmp/ccOYETru.s 			page 44


 553:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 554:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 555:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 556:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 557:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 558:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 559:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 560:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 561:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 562:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 563:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 564:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 565:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  moved instance.
 566:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 567:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector.
 568:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 569:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 570:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 571:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 572:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 573:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 574:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 575:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 576:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 577:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 578:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 579:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 580:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 581:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     private:
 582:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 583:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 584:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { }
 585:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 586:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 587:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(__m)
 588:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 589:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 590:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 591:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	else if (!__rv.empty())
 592:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  {
 593:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 594:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 595:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 596:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 597:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 598:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    __rv.clear();
 599:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  }
 600:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 601:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 602:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     public:
 603:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 604:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 605:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       noexcept( noexcept(
 606:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 607:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 608:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 609:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { }
ARM GAS  /tmp/ccOYETru.s 			page 45


 610:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 611:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 612:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 613:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 614:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 615:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 616:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 617:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  initializer_list @a __l.
 618:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 619:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 620:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 621:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 622:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 623:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 624:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       : _Base(__a)
 625:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 626:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 627:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 628:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 629:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 630:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 631:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 632:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 633:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 634:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 635:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 636:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 637:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 638:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  [first,last).
 639:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 640:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 641:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 642:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 643:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 644:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 645:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 646:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 647:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 648:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename _InputIterator,
 649:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 650:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 651:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 652:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _Base(__a)
 653:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{
 654:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 655:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 656:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	}
 657:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 658:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
 659:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 660:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 661:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _Base(__a)
 662:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{
 663:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 664:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 665:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 666:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	}
ARM GAS  /tmp/ccOYETru.s 			page 46


 667:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 668:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 669:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 670:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 671:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 672:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 673:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  responsibility.
 674:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 675:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 676:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 677:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 678:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 679:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 680:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 681:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 682:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 683:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 684:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 685:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 686:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 687:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @a __x will not be copied.
 688:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 689:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 690:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 691:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector&
 692:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       operator=(const vector& __x);
 693:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 694:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 695:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 696:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 697:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 698:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 699:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 700:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  if the allocators permit it).
 701:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 702:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 703:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 704:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 705:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector&
 706:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 707:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 708:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	constexpr bool __move_storage =
 709:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 710:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 711:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 712:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *this;
 713:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 714:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 715:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 716:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 717:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 718:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 719:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 720:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  initializer list @a __l.
 721:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 722:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 723:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
ARM GAS  /tmp/ccOYETru.s 			page 47


 724:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  of elements assigned.
 725:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 726:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       vector&
 727:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 728:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 729:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 730:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 731:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *this;
 732:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 733:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 734:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 735:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 736:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 737:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 738:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 739:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 740:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 741:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 742:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 743:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the number of elements assigned.
 744:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 745:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 746:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 747:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 748:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 749:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 750:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 751:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 752:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 753:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 754:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 755:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  range [__first,__last).
 756:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 757:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 758:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 759:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  of elements assigned.
 760:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 761:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 762:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename _InputIterator,
 763:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 764:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	void
 765:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 766:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 767:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 768:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
 769:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	void
 770:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 771:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{
 772:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 773:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 774:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 775:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	}
 776:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 777:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 778:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 779:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 780:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
ARM GAS  /tmp/ccOYETru.s 			page 48


 781:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 782:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 783:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 784:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  initializer list @a __l.
 785:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 786:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 787:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 788:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  of elements assigned.
 789:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 790:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 791:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 792:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 793:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 794:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 795:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 796:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 797:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 798:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 799:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       using _Base::get_allocator;
 800:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 801:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // iterators
 802:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 803:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 804:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 805:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element order.
 806:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 807:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
 808:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 809:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 810:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 811:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 812:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 813:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 814:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element order.
 815:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 816:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_iterator
 817:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 818:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 819:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 820:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 821:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 822:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 823:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element order.
 824:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 825:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
 826:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 827:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 828:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 829:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 830:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 831:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 832:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  ordinary element order.
 833:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 834:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_iterator
 835:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 836:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 837:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 49


 838:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 839:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 840:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 841:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element order.
 842:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 843:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       reverse_iterator
 844:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 845:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 846:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 847:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 848:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 849:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 850:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  reverse element order.
 851:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 852:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reverse_iterator
 853:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 854:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 855:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 856:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 857:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 858:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 859:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  in reverse element order.
 860:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 861:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       reverse_iterator
 862:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 863:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 864:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 865:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 866:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 867:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 868:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  is done in reverse element order.
 869:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 870:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reverse_iterator
 871:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 872:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 873:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 874:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 875:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 876:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 877:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 878:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element order.
 879:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 880:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_iterator
 881:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       cbegin() const noexcept
 882:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 883:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 884:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 885:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 886:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 887:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  ordinary element order.
 888:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 889:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_iterator
 890:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       cend() const noexcept
 891:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 892:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 893:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 894:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
ARM GAS  /tmp/ccOYETru.s 			page 50


 895:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 896:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  reverse element order.
 897:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 898:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reverse_iterator
 899:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       crbegin() const noexcept
 900:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 901:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 902:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 903:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 904:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 905:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  is done in reverse element order.
 906:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 907:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reverse_iterator
 908:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       crend() const noexcept
 909:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 910:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 911:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 912:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // [23.2.4.2] capacity
 913:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 914:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       size_type
 915:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 916:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 348              		.loc 7 916 50 view .LVU74
 349 0002 D0E90D43 		ldrd	r4, r3, [r0, #52]
 350 0006 0A4A     		ldr	r2, .L8
 351              	.LBE1174:
 352              	.LBI1173:
 915:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 353              		.loc 7 915 7 is_stmt 1 view .LVU75
 354              	.LVL5:
 355              	.LBB1175:
 356              		.loc 7 916 50 is_stmt 0 view .LVU76
 357 0008 1B1B     		subs	r3, r3, r4
 358              	.LBE1175:
 359              	.LBE1173:
  48:Mu/logistics/menuitem.cpp ****     index = index % values.size();
 360              		.loc 1 48 10 view .LVU77
 361 000a 0168     		ldr	r1, [r0]
 362              	.LBB1178:
 363              	.LBB1179:
 364              	.LBB1180:
 397:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       : _Function_base() { }
 398:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 399:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 400:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Creates an empty function call wrapper.
 401:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @post @c !(bool)*this
 402:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 403:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function(nullptr_t) noexcept
 404:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       : _Function_base() { }
 405:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 406:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 407:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief %Function copy constructor.
 408:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @param __x A %function object with identical call signature.
 409:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @post @c bool(*this) == bool(__x)
 410:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 411:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  The newly-created %function contains a copy of the target of @a
 412:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  __x (if it has one).
ARM GAS  /tmp/ccOYETru.s 			page 51


 413:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 414:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function(const function& __x);
 415:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 416:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 417:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief %Function move constructor.
 418:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @param __x A %function object rvalue with identical call signature.
 419:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 420:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  The newly-created %function contains the target of @a __x
 421:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  (if it has one).
 422:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 423:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function(function&& __x) noexcept : _Function_base()
 424:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 425:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__x.swap(*this);
 426:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 427:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 428:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 429:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Builds a %function that targets a copy of the incoming
 430:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  function object.
 431:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @param __f A %function object that is callable with parameters of
 432:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  type @c T1, @c T2, ..., @c TN and returns a value convertible
 433:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  to @c Res.
 434:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 435:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  The newly-created %function object will target a copy of
 436:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @a __f. If @a __f is @c reference_wrapper<F>, then this function
 437:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  object will contain a reference to the function object @c
 438:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  __f.get(). If @a __f is a NULL function pointer or NULL
 439:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  pointer-to-member, the newly-created object will be empty.
 440:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 441:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  If @a __f is a non-NULL function pointer or an object of type @c
 442:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  reference_wrapper<F>, this function will not throw.
 443:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 444:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Functor,
 445:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	       typename = _Requires<__not_<is_same<_Functor, function>>, void>,
 446:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	       typename = _Requires<_Callable<_Functor>, void>>
 447:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	function(_Functor);
 448:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 449:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 450:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief %Function assignment operator.
 451:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @param __x A %function with identical call signature.
 452:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @post @c (bool)*this == (bool)x
 453:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @returns @c *this
 454:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 455:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  The target of @a __x is copied to @c *this. If @a __x has no
 456:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  target, then @c *this will be empty.
 457:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 458:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  If @a __x targets a function pointer or a reference to a function
 459:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  object, then this operation will not throw an %exception.
 460:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 461:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function&
 462:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       operator=(const function& __x)
 463:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 464:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	function(__x).swap(*this);
 465:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	return *this;
 466:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 467:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 468:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 469:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief %Function move-assignment operator.
ARM GAS  /tmp/ccOYETru.s 			page 52


 470:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @param __x A %function rvalue with identical call signature.
 471:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @returns @c *this
 472:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 473:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  The target of @a __x is moved to @c *this. If @a __x has no
 474:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  target, then @c *this will be empty.
 475:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 476:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  If @a __x targets a function pointer or a reference to a function
 477:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  object, then this operation will not throw an %exception.
 478:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 479:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function&
 480:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       operator=(function&& __x) noexcept
 481:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 482:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	function(std::move(__x)).swap(*this);
 483:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	return *this;
 484:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 485:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 486:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 487:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief %Function assignment to zero.
 488:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @post @c !(bool)*this
 489:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @returns @c *this
 490:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 491:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  The target of @c *this is deallocated, leaving it empty.
 492:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 493:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function&
 494:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       operator=(nullptr_t) noexcept
 495:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 496:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	if (_M_manager)
 497:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  {
 498:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 499:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    _M_manager = nullptr;
 500:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    _M_invoker = nullptr;
 501:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  }
 502:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	return *this;
 503:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 504:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 505:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 506:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief %Function assignment to a new target.
 507:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @param __f A %function object that is callable with parameters of
 508:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  type @c T1, @c T2, ..., @c TN and returns a value convertible
 509:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  to @c Res.
 510:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @return @c *this
 511:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 512:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  This  %function object wrapper will target a copy of @a
 513:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  __f. If @a __f is @c reference_wrapper<F>, then this function
 514:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  object will contain a reference to the function object @c
 515:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  __f.get(). If @a __f is a NULL function pointer or NULL
 516:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  pointer-to-member, @c this object will be empty.
 517:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 518:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  If @a __f is a non-NULL function pointer or an object of type @c
 519:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  reference_wrapper<F>, this function will not throw.
 520:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 521:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Functor>
 522:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_Requires<_Callable<typename decay<_Functor>::type>, function&>
 523:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	operator=(_Functor&& __f)
 524:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 525:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  function(std::forward<_Functor>(__f)).swap(*this);
 526:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  return *this;
ARM GAS  /tmp/ccOYETru.s 			page 53


 527:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 528:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 529:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /// @overload
 530:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Functor>
 531:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	function&
 532:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	operator=(reference_wrapper<_Functor> __f) noexcept
 533:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 534:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  function(__f).swap(*this);
 535:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  return *this;
 536:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 537:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 538:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // [3.7.2.2] function modifiers
 539:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 540:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 541:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Swap the targets of two %function objects.
 542:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @param __x A %function with identical call signature.
 543:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 544:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  Swap the targets of @c this function object and @a __f. This
 545:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  function will not throw an %exception.
 546:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 547:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       void swap(function& __x) noexcept
 548:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 549:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	std::swap(_M_functor, __x._M_functor);
 550:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	std::swap(_M_manager, __x._M_manager);
 551:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	std::swap(_M_invoker, __x._M_invoker);
 552:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 553:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 554:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // [3.7.2.3] function capacity
 555:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 556:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 557:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Determine if the %function wrapper has a target.
 558:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 559:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @return @c true when this %function object contains a target,
 560:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  or @c false when it is empty.
 561:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 562:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  This function will not throw an %exception.
 563:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 564:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       explicit operator bool() const noexcept
 565:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       { return !_M_empty(); }
 566:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 567:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // [3.7.2.4] function invocation
 568:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 569:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 570:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Invokes the function targeted by @c *this.
 571:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @returns the result of the target.
 572:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @throws bad_function_call when @c !(bool)*this
 573:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 574:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  The function call operator invokes the target function object
 575:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  stored by @c this.
 576:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 577:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Res operator()(_ArgTypes... __args) const;
 578:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 579:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #if __cpp_rtti
 580:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // [3.7.2.5] function target access
 581:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 582:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Determine the type of the target of this function object
 583:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  wrapper.
ARM GAS  /tmp/ccOYETru.s 			page 54


 584:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 585:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @returns the type identifier of the target function object, or
 586:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @c typeid(void) if @c !(bool)*this.
 587:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 588:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  This function will not throw an %exception.
 589:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 590:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       const type_info& target_type() const noexcept;
 591:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 592:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       /**
 593:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @brief Access the stored target function object.
 594:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 595:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  @return Returns a pointer to the stored target function object,
 596:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  if @c typeid(_Functor).equals(target_type()); otherwise, a NULL
 597:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *  pointer.
 598:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 599:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        * This function does not throw exceptions.
 600:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        *
 601:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        * @{
 602:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****        */
 603:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Functor>       _Functor* target() noexcept;
 604:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 605:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       template<typename _Functor> const _Functor* target() const noexcept;
 606:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       // @}
 607:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #endif
 608:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 609:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     private:
 610:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);
 611:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Invoker_type _M_invoker;
 612:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   };
 613:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 614:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #if __cpp_deduction_guides >= 201606
 615:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename>
 616:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct __function_guide_helper
 617:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     { };
 618:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 619:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
 620:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct __function_guide_helper<
 621:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Res (_Tp::*) (_Args...) noexcept(_Nx)
 622:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     >
 623:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     { using type = _Res(_Args...); };
 624:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 625:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
 626:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct __function_guide_helper<
 627:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Res (_Tp::*) (_Args...) & noexcept(_Nx)
 628:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     >
 629:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     { using type = _Res(_Args...); };
 630:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 631:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
 632:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct __function_guide_helper<
 633:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Res (_Tp::*) (_Args...) const noexcept(_Nx)
 634:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     >
 635:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     { using type = _Res(_Args...); };
 636:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 637:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
 638:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     struct __function_guide_helper<
 639:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       _Res (_Tp::*) (_Args...) const & noexcept(_Nx)
 640:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     >
ARM GAS  /tmp/ccOYETru.s 			page 55


 641:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     { using type = _Res(_Args...); };
 642:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 643:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename... _ArgTypes>
 644:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     function(_Res(*)(_ArgTypes...)) -> function<_Res(_ArgTypes...)>;
 645:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 646:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Functor, typename _Signature = typename
 647:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	   __function_guide_helper<decltype(&_Functor::operator())>::type>
 648:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     function(_Functor) -> function<_Signature>;
 649:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** #endif
 650:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 651:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   // Out-of-line member definitions.
 652:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename... _ArgTypes>
 653:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     function<_Res(_ArgTypes...)>::
 654:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     function(const function& __x)
 655:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : _Function_base()
 656:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 657:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       if (static_cast<bool>(__x))
 658:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 659:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 660:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_invoker = __x._M_invoker;
 661:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_manager = __x._M_manager;
 662:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 663:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     }
 664:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 665:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename... _ArgTypes>
 666:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     template<typename _Functor, typename, typename>
 667:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function<_Res(_ArgTypes...)>::
 668:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       function(_Functor __f)
 669:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       : _Function_base()
 670:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 671:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
 672:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 673:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	if (_My_handler::_M_not_empty_function(__f))
 674:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  {
 675:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 676:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    _M_invoker = &_My_handler::_M_invoke;
 677:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	    _M_manager = &_My_handler::_M_manager;
 678:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  }
 679:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       }
 680:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 681:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****   template<typename _Res, typename... _ArgTypes>
 682:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     _Res
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     function<_Res(_ArgTypes...)>::
 684:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 685:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 686:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       if (_M_empty())
 365              		.loc 8 686 7 view .LVU78
 366 000c 846C     		ldr	r4, [r0, #72]
 367              	.LBE1180:
 368              	.LBE1179:
 369              	.LBE1178:
 370              	.LBB1186:
 371              	.LBB1176:
 372              		.loc 7 916 50 view .LVU79
 373 000e DB10     		asrs	r3, r3, #3
 374              	.LBE1176:
 375              	.LBE1186:
ARM GAS  /tmp/ccOYETru.s 			page 56


  48:Mu/logistics/menuitem.cpp ****     index = index % values.size();
 376              		.loc 1 48 10 view .LVU80
 377 0010 0131     		adds	r1, r1, #1
 378              	.LBB1187:
 379              	.LBB1177:
 380              		.loc 7 916 50 view .LVU81
 381 0012 02FB03F3 		mul	r3, r2, r3
 382              	.LBE1177:
 383              	.LBE1187:
 384              		.loc 1 49 19 view .LVU82
 385 0016 B1FBF3F2 		udiv	r2, r1, r3
 386 001a 03FB1213 		mls	r3, r3, r2, r1
 387              		.loc 1 49 11 view .LVU83
 388 001e 0360     		str	r3, [r0]
  50:Mu/logistics/menuitem.cpp ****     OnChange();
 389              		.loc 1 50 5 is_stmt 1 view .LVU84
 390              	.LVL6:
 391              	.LBB1188:
 392              	.LBI1178:
  51:Mu/logistics/menuitem.cpp **** };
  52:Mu/logistics/menuitem.cpp **** 
  53:Mu/logistics/menuitem.cpp **** void MenuItem::Decrement(){
  54:Mu/logistics/menuitem.cpp ****     index--;
  55:Mu/logistics/menuitem.cpp ****     if (index < 0){
  56:Mu/logistics/menuitem.cpp ****         index = values.size() - 1;
  57:Mu/logistics/menuitem.cpp ****     }
  58:Mu/logistics/menuitem.cpp ****     OnChange();
  59:Mu/logistics/menuitem.cpp **** };
  60:Mu/logistics/menuitem.cpp **** 
  61:Mu/logistics/menuitem.cpp **** void MenuItem::SetIndex(int i){
  62:Mu/logistics/menuitem.cpp ****     index = i;
  63:Mu/logistics/menuitem.cpp ****     OnChange();
  64:Mu/logistics/menuitem.cpp **** };
  65:Mu/logistics/menuitem.cpp **** 
  66:Mu/logistics/menuitem.cpp **** // Executed every time this item's value is changed
  67:Mu/logistics/menuitem.cpp **** void MenuItem::OnChange(){
 393              		.loc 1 67 6 view .LVU85
 394              	.LBE1188:
  68:Mu/logistics/menuitem.cpp ****     myOnChangeCallback();
 395              		.loc 1 68 5 view .LVU86
 396              	.LBB1189:
 397              	.LBB1183:
 398              	.LBI1179:
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 399              		.loc 8 683 5 view .LVU87
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 400              		.loc 8 683 5 is_stmt 0 view .LVU88
 401              	.LBE1183:
 402              	.LBE1189:
 263:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 403              		.loc 8 263 29 is_stmt 1 view .LVU89
 404              	.LBB1190:
 405              	.LBB1184:
 406              	.LBB1181:
 407              		.loc 8 686 7 is_stmt 0 view .LVU90
 408 0020 24B1     		cbz	r4, .L7
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__throw_bad_function_call();
ARM GAS  /tmp/ccOYETru.s 			page 57


 688:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 409              		.loc 8 688 14 view .LVU91
 410 0022 C36C     		ldr	r3, [r0, #76]
 411 0024 4030     		adds	r0, r0, #64
 412              	.LVL7:
 413              		.loc 8 688 14 view .LVU92
 414              	.LBE1181:
 415              	.LBE1184:
 416              	.LBE1190:
  51:Mu/logistics/menuitem.cpp **** 
 417              		.loc 1 51 1 view .LVU93
 418 0026 BDE81040 		pop	{r4, lr}
 419              		.cfi_remember_state
 420              		.cfi_restore 14
 421              		.cfi_restore 4
 422              		.cfi_def_cfa_offset 0
 423              	.LBB1191:
 424              	.LBB1185:
 425              	.LBB1182:
 426              		.loc 8 688 14 view .LVU94
 427 002a 1847     		bx	r3	@ indirect register sibling call
 428              	.LVL8:
 429              	.L7:
 430              		.cfi_restore_state
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__throw_bad_function_call();
 431              		.loc 8 687 27 view .LVU95
 432 002c FFF7FEFF 		bl	_ZSt25__throw_bad_function_callv
 433              	.LVL9:
 434              	.L9:
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__throw_bad_function_call();
 435              		.loc 8 687 27 view .LVU96
 436              		.align	2
 437              	.L8:
 438 0030 ABAAAAAA 		.word	-1431655765
 439              	.LBE1182:
 440              	.LBE1185:
 441              	.LBE1191:
 442              		.cfi_endproc
 443              	.LFE2255:
 445              		.section	.text._ZN2mu8MenuItem9DecrementEv,"ax",%progbits
 446              		.align	1
 447              		.p2align 2,,3
 448              		.global	_ZN2mu8MenuItem9DecrementEv
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv5-d16
 454              	_ZN2mu8MenuItem9DecrementEv:
 455              	.LVL10:
 456              	.LFB2256:
  53:Mu/logistics/menuitem.cpp ****     index--;
 457              		.loc 1 53 27 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
  54:Mu/logistics/menuitem.cpp ****     if (index < 0){
 461              		.loc 1 54 5 view .LVU98
ARM GAS  /tmp/ccOYETru.s 			page 58


  54:Mu/logistics/menuitem.cpp ****     if (index < 0){
 462              		.loc 1 54 10 is_stmt 0 view .LVU99
 463 0000 0368     		ldr	r3, [r0]
 464 0002 013B     		subs	r3, r3, #1
  55:Mu/logistics/menuitem.cpp ****         index = values.size() - 1;
 465              		.loc 1 55 5 view .LVU100
 466 0004 002B     		cmp	r3, #0
  54:Mu/logistics/menuitem.cpp ****     if (index < 0){
 467              		.loc 1 54 10 view .LVU101
 468 0006 0360     		str	r3, [r0]
  55:Mu/logistics/menuitem.cpp ****         index = values.size() - 1;
 469              		.loc 1 55 5 is_stmt 1 view .LVU102
 470 0008 08DA     		bge	.L11
  56:Mu/logistics/menuitem.cpp ****     }
 471              		.loc 1 56 9 view .LVU103
 472              	.LBB1192:
 473              	.LBI1192:
 915:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 474              		.loc 7 915 7 view .LVU104
 475              	.LVL11:
 476              	.LBB1193:
 477              		.loc 7 916 50 is_stmt 0 view .LVU105
 478 000a 084B     		ldr	r3, .L17
 479 000c D0E90D12 		ldrd	r1, r2, [r0, #52]
 480 0010 521A     		subs	r2, r2, r1
 481 0012 D210     		asrs	r2, r2, #3
 482 0014 03FB02F3 		mul	r3, r3, r2
 483              	.LBE1193:
 484              	.LBE1192:
  56:Mu/logistics/menuitem.cpp ****     }
 485              		.loc 1 56 31 view .LVU106
 486 0018 013B     		subs	r3, r3, #1
  56:Mu/logistics/menuitem.cpp ****     }
 487              		.loc 1 56 15 view .LVU107
 488 001a 0360     		str	r3, [r0]
 489              	.LVL12:
 490              	.L11:
  58:Mu/logistics/menuitem.cpp **** };
 491              		.loc 1 58 5 is_stmt 1 view .LVU108
 492              	.LBB1194:
 493              	.LBI1194:
  67:Mu/logistics/menuitem.cpp ****     myOnChangeCallback();
 494              		.loc 1 67 6 view .LVU109
 495              	.LBE1194:
 496              		.loc 1 68 5 view .LVU110
 497              	.LBB1200:
 498              	.LBB1195:
 499              	.LBI1195:
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 500              		.loc 8 683 5 view .LVU111
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 501              		.loc 8 683 5 is_stmt 0 view .LVU112
 502              	.LBE1195:
 503              	.LBE1200:
 263:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 504              		.loc 8 263 29 is_stmt 1 view .LVU113
 505              	.LBB1201:
ARM GAS  /tmp/ccOYETru.s 			page 59


 506              	.LBB1198:
 507              	.LBB1196:
 686:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__throw_bad_function_call();
 508              		.loc 8 686 7 is_stmt 0 view .LVU114
 509 001c 836C     		ldr	r3, [r0, #72]
 510 001e 13B1     		cbz	r3, .L16
 511              		.loc 8 688 14 view .LVU115
 512 0020 C36C     		ldr	r3, [r0, #76]
 513 0022 4030     		adds	r0, r0, #64
 514              	.LVL13:
 515              		.loc 8 688 14 view .LVU116
 516 0024 1847     		bx	r3	@ indirect register sibling call
 517              	.LVL14:
 518              	.L16:
 519              		.loc 8 688 14 view .LVU117
 520              	.LBE1196:
 521              	.LBE1198:
 522              	.LBE1201:
  53:Mu/logistics/menuitem.cpp ****     index--;
 523              		.loc 1 53 27 view .LVU118
 524 0026 10B5     		push	{r4, lr}
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 4, -8
 527              		.cfi_offset 14, -4
 528              	.LBB1202:
 529              	.LBB1199:
 530              	.LBB1197:
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 531              		.loc 8 687 27 view .LVU119
 532 0028 FFF7FEFF 		bl	_ZSt25__throw_bad_function_callv
 533              	.LVL15:
 534              	.L18:
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 535              		.loc 8 687 27 view .LVU120
 536              		.align	2
 537              	.L17:
 538 002c ABAAAAAA 		.word	-1431655765
 539              	.LBE1197:
 540              	.LBE1199:
 541              	.LBE1202:
 542              		.cfi_endproc
 543              	.LFE2256:
 545              		.section	.text._ZN2mu8MenuItem8SetIndexEi,"ax",%progbits
 546              		.align	1
 547              		.p2align 2,,3
 548              		.global	_ZN2mu8MenuItem8SetIndexEi
 549              		.syntax unified
 550              		.thumb
 551              		.thumb_func
 552              		.fpu fpv5-d16
 554              	_ZN2mu8MenuItem8SetIndexEi:
 555              	.LVL16:
 556              	.LFB2257:
  61:Mu/logistics/menuitem.cpp ****     index = i;
 557              		.loc 1 61 31 is_stmt 1 view -0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccOYETru.s 			page 60


 560              		@ frame_needed = 0, uses_anonymous_args = 0
  62:Mu/logistics/menuitem.cpp ****     OnChange();
 561              		.loc 1 62 5 view .LVU122
 562              	.LBB1203:
 563              	.LBB1204:
 564              	.LBB1205:
 686:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__throw_bad_function_call();
 565              		.loc 8 686 7 is_stmt 0 view .LVU123
 566 0000 836C     		ldr	r3, [r0, #72]
 567              	.LBE1205:
 568              	.LBE1204:
 569              	.LBE1203:
  62:Mu/logistics/menuitem.cpp ****     OnChange();
 570              		.loc 1 62 11 view .LVU124
 571 0002 0160     		str	r1, [r0]
  63:Mu/logistics/menuitem.cpp **** };
 572              		.loc 1 63 5 is_stmt 1 view .LVU125
 573              	.LVL17:
 574              	.LBB1211:
 575              	.LBI1203:
  67:Mu/logistics/menuitem.cpp ****     myOnChangeCallback();
 576              		.loc 1 67 6 view .LVU126
 577              	.LBE1211:
 578              		.loc 1 68 5 view .LVU127
 579              	.LBB1212:
 580              	.LBB1208:
 581              	.LBI1204:
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 582              		.loc 8 683 5 view .LVU128
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 583              		.loc 8 683 5 is_stmt 0 view .LVU129
 584              	.LBE1208:
 585              	.LBE1212:
 263:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 586              		.loc 8 263 29 is_stmt 1 view .LVU130
 587              	.LBB1213:
 588              	.LBB1209:
 589              	.LBB1206:
 686:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__throw_bad_function_call();
 590              		.loc 8 686 7 is_stmt 0 view .LVU131
 591 0004 13B1     		cbz	r3, .L24
 592              		.loc 8 688 14 view .LVU132
 593 0006 C36C     		ldr	r3, [r0, #76]
 594 0008 4030     		adds	r0, r0, #64
 595              	.LVL18:
 596              		.loc 8 688 14 view .LVU133
 597 000a 1847     		bx	r3	@ indirect register sibling call
 598              	.LVL19:
 599              	.L24:
 600              		.loc 8 688 14 view .LVU134
 601              	.LBE1206:
 602              	.LBE1209:
 603              	.LBE1213:
  61:Mu/logistics/menuitem.cpp ****     index = i;
 604              		.loc 1 61 31 view .LVU135
 605 000c 10B5     		push	{r4, lr}
 606              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccOYETru.s 			page 61


 607              		.cfi_offset 4, -8
 608              		.cfi_offset 14, -4
 609              	.LBB1214:
 610              	.LBB1210:
 611              	.LBB1207:
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 612              		.loc 8 687 27 view .LVU136
 613 000e FFF7FEFF 		bl	_ZSt25__throw_bad_function_callv
 614              	.LVL20:
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 615              		.loc 8 687 27 view .LVU137
 616              	.LBE1207:
 617              	.LBE1210:
 618              	.LBE1214:
 619              		.cfi_endproc
 620              	.LFE2257:
 622 0012 00BF     		.section	.text._ZN2mu8MenuItem8OnChangeEv,"ax",%progbits
 623              		.align	1
 624              		.p2align 2,,3
 625              		.global	_ZN2mu8MenuItem8OnChangeEv
 626              		.syntax unified
 627              		.thumb
 628              		.thumb_func
 629              		.fpu fpv5-d16
 631              	_ZN2mu8MenuItem8OnChangeEv:
 632              	.LVL21:
 633              	.LFB2258:
  67:Mu/logistics/menuitem.cpp ****     myOnChangeCallback();
 634              		.loc 1 67 26 is_stmt 1 view -0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              		.loc 1 68 5 view .LVU139
 639              	.LBB1215:
 640              	.LBI1215:
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 641              		.loc 8 683 5 view .LVU140
 683:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     operator()(_ArgTypes... __args) const
 642              		.loc 8 683 5 is_stmt 0 view .LVU141
 643              	.LBE1215:
 263:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 644              		.loc 8 263 29 is_stmt 1 view .LVU142
 645              	.LBB1218:
 646              	.LBB1216:
 686:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	__throw_bad_function_call();
 647              		.loc 8 686 7 is_stmt 0 view .LVU143
 648 0000 836C     		ldr	r3, [r0, #72]
 649 0002 13B1     		cbz	r3, .L30
 650              		.loc 8 688 14 view .LVU144
 651 0004 C36C     		ldr	r3, [r0, #76]
 652 0006 4030     		adds	r0, r0, #64
 653              	.LVL22:
 654              		.loc 8 688 14 view .LVU145
 655 0008 1847     		bx	r3	@ indirect register sibling call
 656              	.LVL23:
 657              	.L30:
 658              		.loc 8 688 14 view .LVU146
ARM GAS  /tmp/ccOYETru.s 			page 62


 659              	.LBE1216:
 660              	.LBE1218:
  67:Mu/logistics/menuitem.cpp ****     myOnChangeCallback();
 661              		.loc 1 67 26 view .LVU147
 662 000a 10B5     		push	{r4, lr}
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 4, -8
 665              		.cfi_offset 14, -4
 666              	.LBB1219:
 667              	.LBB1217:
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 668              		.loc 8 687 27 view .LVU148
 669 000c FFF7FEFF 		bl	_ZSt25__throw_bad_function_callv
 670              	.LVL24:
 687:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 671              		.loc 8 687 27 view .LVU149
 672              	.LBE1217:
 673              	.LBE1219:
 674              		.cfi_endproc
 675              	.LFE2258:
 677              		.section	.rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St2
 678              		.align	2
 679              	.LC0:
 680 0000 62617369 		.ascii	"basic_string::_M_construct null not valid\000"
 680      635F7374 
 680      72696E67 
 680      3A3A5F4D 
 680      5F636F6E 
 681              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20f
 682              		.align	1
 683              		.p2align 2,,3
 684              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_it
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 688              		.fpu fpv5-d16
 690              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_
 691              	.LVL25:
 692              	.LFB2768:
 693              		.file 9 "/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc"
   1:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
   3:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** //
   5:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  11:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  16:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
ARM GAS  /tmp/ccOYETru.s 			page 63


  18:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  20:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  25:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****  */
  29:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  30:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** //
  31:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** //
  33:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  34:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  39:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  42:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  44:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  46:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** {
  48:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  50:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  52:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  56:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     void
  58:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     {
  61:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	return;
  63:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  64:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
  66:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  {
  69:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      {
  71:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
ARM GAS  /tmp/ccOYETru.s 			page 64


  75:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      }
  79:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      {
  81:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		return;
  86:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      }
  87:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      {
  89:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		return;
  94:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      }
  95:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  }
  96:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	else
  97:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  {
  98:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  }
 105:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       else
 106:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	{
 107:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    {
 110:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    }
 115:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  else
 116:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    {
 117:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    }
 122:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	}
 124:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 125:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     }
 129:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 130:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
ARM GAS  /tmp/ccOYETru.s 			page 65


 132:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     {
 135:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 140:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	{
 145:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	}
 150:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 151:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     }
 155:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 156:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       void
 163:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       {
 167:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 170:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  {
 172:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  }
 175:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 176:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	__try
 177:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  {
 178:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      {
 180:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		  {
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
ARM GAS  /tmp/ccOYETru.s 			page 66


 189:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		  }
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	      }
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  }
 194:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  {
 196:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  }
 199:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 200:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       }
 202:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 203:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       void
 206:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 694              		.loc 9 206 7 is_stmt 1 view -0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 8
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698              		.loc 9 206 7 is_stmt 0 view .LVU151
 699 0000 70B5     		push	{r4, r5, r6, lr}
 700              		.cfi_def_cfa_offset 16
 701              		.cfi_offset 4, -16
 702              		.cfi_offset 5, -12
 703              		.cfi_offset 6, -8
 704              		.cfi_offset 14, -4
 705 0002 0546     		mov	r5, r0
 706 0004 82B0     		sub	sp, sp, #8
 707              		.cfi_def_cfa_offset 24
 708              		.loc 9 206 7 view .LVU152
 709 0006 0E46     		mov	r6, r1
 207:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       {
 210:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 710              		.loc 9 211 42 view .LVU153
 711 0008 02B1     		cbz	r2, .L32
 712 000a 41B3     		cbz	r1, .L48
 713              	.L32:
 714              	.LVL26:
 715              	.LBB1244:
 716              	.LBI1244:
 717              		.file 10 "/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h"
   1:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 67


  11:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** /*
  26:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *
  27:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *
  30:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *
  38:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *
  39:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *
  42:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  */
  50:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** /** @file bits/stl_iterator_base_funcs.h
  52:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *
  55:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
  56:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  57:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****  */
  58:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  59:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  60:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  61:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  62:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** #pragma GCC system_header
  63:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  64:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  65:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** #include <debug/assertions.h>
  66:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  67:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** namespace std _GLIBCXX_VISIBILITY(default)
ARM GAS  /tmp/ccOYETru.s 			page 68


  68:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** {
  69:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  71:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  72:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration for the overloads of __distance.
  73:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_iterator;
  74:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_const_iterator;
  75:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
  76:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  77:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
  78:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  79:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
  80:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  81:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****                input_iterator_tag)
  82:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     {
  83:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
  84:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  85:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  86:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  87:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
  88:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	{
  89:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	  ++__first;
  90:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	  ++__n;
  91:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	}
  92:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       return __n;
  93:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     }
  94:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
  95:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  96:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  97:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_RandomAccessIterator>::difference_type
  98:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  99:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 100:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     {
 101:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
 102:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
 103:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
 104:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****       return __last - __first;
 105:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     }
 106:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
 107:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** #if _GLIBCXX_USE_CXX11_ABI
 108:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration because of the qualified call in distance.
 109:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 110:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 111:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
 112:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 113:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 114:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
 115:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 116:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 117:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 118:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 119:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 120:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** #endif
 121:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h **** 
 122:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   /**
 123:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  @brief A generalization of pointer arithmetic.
 124:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  @param  __first  An input iterator.
ARM GAS  /tmp/ccOYETru.s 			page 69


 125:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  @param  __last  An input iterator.
 126:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  @return  The distance between them.
 127:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *
 128:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  Returns @c n such that __first + n == __last.  This requires
 129:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  that @p __last must be reachable from @p __first.  Note that @c
 130:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  n may be negative.
 131:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *
 132:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  For random access iterators, this uses their @c + and @c - operations
 133:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****    *  and are constant time.  For other %iterator classes they are linear time.
 134:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   */
 135:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
 136:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX17_CONSTEXPR
 137:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
 138:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     distance(_InputIterator __first, _InputIterator __last)
 718              		.loc 10 138 5 is_stmt 1 view .LVU154
 719              	.LBB1245:
 720              	.LBI1245:
  98:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 721              		.loc 10 98 5 view .LVU155
 722              	.LBB1246:
 104:/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_funcs.h ****     }
 723              		.loc 10 104 23 is_stmt 0 view .LVU156
 724 000c 941B     		subs	r4, r2, r6
 725              	.LBE1246:
 726              	.LBE1245:
 727              	.LBE1244:
 212:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 213:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 215:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 216:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 217:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 728              		.loc 9 217 2 view .LVU157
 729 000e 0F2C     		cmp	r4, #15
 215:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 730              		.loc 9 215 12 view .LVU158
 731 0010 0194     		str	r4, [sp, #4]
 732              		.loc 9 217 2 view .LVU159
 733 0012 11D8     		bhi	.L49
 734              	.LBB1247:
 735              	.LBB1248:
 736              	.LBB1249:
 348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 737              		.loc 2 348 2 view .LVU160
 738 0014 012C     		cmp	r4, #1
 739              	.LBE1249:
 740              	.LBE1248:
 741              	.LBE1247:
 218:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  {
 219:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 220:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 221:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  }
 222:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 223:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	__try
 225:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 742              		.loc 9 225 6 view .LVU161
ARM GAS  /tmp/ccOYETru.s 			page 70


 743 0016 2868     		ldr	r0, [r5]
 744              	.LVL27:
 745              	.LBB1269:
 746              	.LBI1247:
 392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 747              		.loc 2 392 7 is_stmt 1 view .LVU162
 748              	.LBB1265:
 749              	.LBI1248:
 346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 750              		.loc 2 346 7 view .LVU163
 751              	.LBB1261:
 348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 752              		.loc 2 348 2 is_stmt 0 view .LVU164
 753 0018 08D1     		bne	.L35
 349:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
 754              		.loc 2 349 23 view .LVU165
 755 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 756              	.LVL28:
 757              	.LBB1250:
 758              	.LBI1250:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 759              		.loc 6 299 7 is_stmt 1 view .LVU166
 760              	.LBB1251:
 761              		.loc 6 300 9 view .LVU167
 762              		.loc 6 300 14 is_stmt 0 view .LVU168
 763 001c 0370     		strb	r3, [r0]
 764              	.LBE1251:
 765              	.LBE1250:
 766              	.LBE1261:
 767              	.LBE1265:
 768              	.LBE1269:
 769              	.LBB1270:
 770              	.LBB1271:
 771              	.LBB1272:
 772              	.LBB1273:
 773 001e 0023     		movs	r3, #0
 774 0020 019C     		ldr	r4, [sp, #4]
 775              	.LVL29:
 776              		.loc 6 300 14 view .LVU169
 777 0022 2868     		ldr	r0, [r5]
 778              	.LVL30:
 779              		.loc 6 300 14 view .LVU170
 780              	.LBE1273:
 781              	.LBE1272:
 782              	.LBE1271:
 783              	.LBI1270:
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 784              		.loc 2 214 7 is_stmt 1 view .LVU171
 785              	.LBB1292:
 786              	.LBB1279:
 787              	.LBI1279:
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 788              		.loc 2 182 7 view .LVU172
 789              	.LBB1280:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 790              		.loc 2 183 9 is_stmt 0 view .LVU173
 791 0024 6C60     		str	r4, [r5, #4]
ARM GAS  /tmp/ccOYETru.s 			page 71


 792              	.LVL31:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 793              		.loc 2 183 9 view .LVU174
 794              	.LBE1280:
 795              	.LBE1279:
 796              	.LBB1283:
 797              	.LBI1272:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 798              		.loc 6 299 7 is_stmt 1 view .LVU175
 799              	.LBB1274:
 800              		.loc 6 300 9 view .LVU176
 801              		.loc 6 300 14 is_stmt 0 view .LVU177
 802 0026 0355     		strb	r3, [r0, r4]
 803              	.LVL32:
 804              		.loc 6 300 14 view .LVU178
 805              	.LBE1274:
 806              	.LBE1283:
 807              	.LBE1292:
 808              	.LBE1270:
 226:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	__catch(...)
 227:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  {
 228:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_dispose();
 229:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 230:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	  }
 231:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 
 232:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	_M_set_length(__dnew);
 233:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc ****       }
 809              		.loc 9 233 7 view .LVU179
 810 0028 02B0     		add	sp, sp, #8
 811              		.cfi_remember_state
 812              		.cfi_def_cfa_offset 16
 813              		@ sp needed
 814 002a 70BD     		pop	{r4, r5, r6, pc}
 815              	.LVL33:
 816              	.L35:
 817              		.cfi_restore_state
 818              	.LBB1295:
 819              	.LBB1266:
 820              	.LBB1262:
 821              	.LBB1252:
 822              	.LBI1252:
 346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 823              		.loc 2 346 7 is_stmt 1 view .LVU180
 824              	.LBB1253:
 825              	.LBI1253:
 301:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 302:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 303:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 304:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { return __c1 == __c2; }
 305:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 306:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 307:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 308:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       {
 309:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	// LWG 467.
 310:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 311:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 312:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       }
ARM GAS  /tmp/ccOYETru.s 			page 72


 313:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 314:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 315:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 316:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       {
 317:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (__n == 0)
 318:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return 0;
 319:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 320:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 321:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 322:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 323:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 324:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #endif
 325:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 326:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       }
 327:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 328:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 329:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       length(const char_type* __s)
 330:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       {
 331:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 332:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (__constant_string_p(__s))
 333:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 334:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #endif
 335:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	return __builtin_strlen(__s);
 336:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       }
 337:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 338:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR const char_type*
 339:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       find(const char_type* __s, size_t __n, const char_type& __a)
 340:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       {
 341:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (__n == 0)
 342:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return 0;
 343:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 344:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 345:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	    && __builtin_constant_p(__a)
 346:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s, __n))
 347:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 348:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** #endif
 349:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 350:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       }
 351:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 352:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static char_type*
 353:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, size_t __n)
 354:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       {
 355:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (__n == 0)
 356:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return __s1;
 357:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 358:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       }
 359:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 360:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       static char_type*
 361:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, size_t __n)
 826              		.loc 6 361 7 view .LVU181
 827              	.LBB1254:
 362:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       {
 363:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	if (__n == 0)
 828              		.loc 6 363 2 view .LVU182
 829 002c 64B9     		cbnz	r4, .L34
 830              	.LVL34:
 831              		.loc 6 363 2 is_stmt 0 view .LVU183
ARM GAS  /tmp/ccOYETru.s 			page 73


 832              	.LBE1254:
 833              	.LBE1253:
 834              	.LBE1252:
 835              	.LBE1262:
 836              	.LBE1266:
 837              	.LBE1295:
 838              	.LBB1296:
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 839              		.loc 2 214 7 is_stmt 1 view .LVU184
 840              	.LBB1293:
 841              	.LBB1284:
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 842              		.loc 2 182 7 view .LVU185
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 843              		.loc 2 182 7 is_stmt 0 view .LVU186
 844              	.LBE1284:
 845              	.LBB1285:
 846              	.LBB1275:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 847              		.loc 6 300 14 view .LVU187
 848 002e 0023     		movs	r3, #0
 849              	.LBE1275:
 850              	.LBE1285:
 851              	.LBB1286:
 852              	.LBB1281:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 853              		.loc 2 183 9 view .LVU188
 854 0030 6C60     		str	r4, [r5, #4]
 855              	.LVL35:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 856              		.loc 2 183 9 view .LVU189
 857              	.LBE1281:
 858              	.LBE1286:
 859              	.LBB1287:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 860              		.loc 6 299 7 is_stmt 1 view .LVU190
 861              	.LBB1276:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 862              		.loc 6 300 9 view .LVU191
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 863              		.loc 6 300 14 is_stmt 0 view .LVU192
 864 0032 0355     		strb	r3, [r0, r4]
 865              	.LVL36:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 866              		.loc 6 300 14 view .LVU193
 867              	.LBE1276:
 868              	.LBE1287:
 869              	.LBE1293:
 870              	.LBE1296:
 871              		.loc 9 233 7 view .LVU194
 872 0034 02B0     		add	sp, sp, #8
 873              		.cfi_remember_state
 874              		.cfi_def_cfa_offset 16
 875              		@ sp needed
 876 0036 70BD     		pop	{r4, r5, r6, pc}
 877              	.LVL37:
 878              	.L49:
ARM GAS  /tmp/ccOYETru.s 			page 74


 879              		.cfi_restore_state
 219:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 880              		.loc 9 219 6 view .LVU195
 881 0038 0022     		movs	r2, #0
 882              	.LVL38:
 219:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 883              		.loc 9 219 6 view .LVU196
 884 003a 01A9     		add	r1, sp, #4
 885              	.LVL39:
 219:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 886              		.loc 9 219 6 view .LVU197
 887 003c 2846     		mov	r0, r5
 888              	.LVL40:
 219:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 889              		.loc 9 219 6 view .LVU198
 890 003e FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
 891              	.LVL41:
 892              	.LBB1297:
 893              	.LBB1298:
 211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 894              		.loc 2 211 9 view .LVU199
 895 0042 019B     		ldr	r3, [sp, #4]
 896              	.LVL42:
 211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 897              		.loc 2 211 9 view .LVU200
 898              	.LBE1298:
 899              	.LBE1297:
 900              	.LBB1300:
 901              	.LBI1300:
 178:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 902              		.loc 2 178 7 is_stmt 1 view .LVU201
 903              	.LBB1301:
 179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 904              		.loc 2 179 9 is_stmt 0 view .LVU202
 905 0044 2860     		str	r0, [r5]
 906              	.LVL43:
 179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 907              		.loc 2 179 9 view .LVU203
 908              	.LBE1301:
 909              	.LBE1300:
 910              	.LBB1302:
 911              	.LBI1297:
 210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 912              		.loc 2 210 7 is_stmt 1 view .LVU204
 210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 913              		.loc 2 210 7 is_stmt 0 view .LVU205
 914              	.LBE1302:
 915              	.LBB1303:
 392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 916              		.loc 2 392 7 is_stmt 1 view .LVU206
 917              	.LBB1267:
 346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 918              		.loc 2 346 7 view .LVU207
 919              	.LBB1263:
 920              	.LBB1259:
 346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 921              		.loc 2 346 7 view .LVU208
ARM GAS  /tmp/ccOYETru.s 			page 75


 922              	.LBB1257:
 361:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       {
 923              		.loc 6 361 7 view .LVU209
 924              	.LBB1255:
 925              		.loc 6 363 2 view .LVU210
 926              	.LBE1255:
 927              	.LBE1257:
 928              	.LBE1259:
 929              	.LBE1263:
 930              	.LBE1267:
 931              	.LBE1303:
 932              	.LBB1304:
 933              	.LBB1299:
 211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 934              		.loc 2 211 9 is_stmt 0 view .LVU211
 935 0046 AB60     		str	r3, [r5, #8]
 936              	.LVL44:
 937              	.L34:
 211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 938              		.loc 2 211 9 view .LVU212
 939              	.LBE1299:
 940              	.LBE1304:
 941              	.LBB1305:
 942              	.LBB1268:
 943              	.LBB1264:
 944              	.LBB1260:
 945              	.LBB1258:
 946              	.LBB1256:
 364:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	  return __s1;
 365:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 947              		.loc 6 365 2 is_stmt 1 view .LVU213
 948              		.loc 6 365 49 is_stmt 0 view .LVU214
 949 0048 2246     		mov	r2, r4
 950 004a 3146     		mov	r1, r6
 951 004c FFF7FEFF 		bl	memcpy
 952              	.LVL45:
 953              		.loc 6 365 49 view .LVU215
 954 0050 019C     		ldr	r4, [sp, #4]
 955              	.LVL46:
 956              		.loc 6 365 49 view .LVU216
 957 0052 2868     		ldr	r0, [r5]
 958              	.LVL47:
 959              		.loc 6 365 49 view .LVU217
 960              	.LBE1256:
 961              	.LBE1258:
 962              	.LBE1260:
 963              	.LBE1264:
 964              	.LBE1268:
 965              	.LBE1305:
 966              	.LBB1306:
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 967              		.loc 2 214 7 is_stmt 1 view .LVU218
 968              	.LBB1294:
 969              	.LBB1288:
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 970              		.loc 2 182 7 view .LVU219
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
ARM GAS  /tmp/ccOYETru.s 			page 76


 971              		.loc 2 182 7 is_stmt 0 view .LVU220
 972              	.LBE1288:
 973              	.LBB1289:
 974              	.LBB1277:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 975              		.loc 6 300 14 view .LVU221
 976 0054 0023     		movs	r3, #0
 977              	.LBE1277:
 978              	.LBE1289:
 979              	.LBB1290:
 980              	.LBB1282:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 981              		.loc 2 183 9 view .LVU222
 982 0056 6C60     		str	r4, [r5, #4]
 983              	.LVL48:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 984              		.loc 2 183 9 view .LVU223
 985              	.LBE1282:
 986              	.LBE1290:
 987              	.LBB1291:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 988              		.loc 6 299 7 is_stmt 1 view .LVU224
 989              	.LBB1278:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 990              		.loc 6 300 9 view .LVU225
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 991              		.loc 6 300 14 is_stmt 0 view .LVU226
 992 0058 0355     		strb	r3, [r0, r4]
 993              	.LVL49:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 994              		.loc 6 300 14 view .LVU227
 995              	.LBE1278:
 996              	.LBE1291:
 997              	.LBE1294:
 998              	.LBE1306:
 999              		.loc 9 233 7 view .LVU228
 1000 005a 02B0     		add	sp, sp, #8
 1001              		.cfi_remember_state
 1002              		.cfi_def_cfa_offset 16
 1003              		@ sp needed
 1004 005c 70BD     		pop	{r4, r5, r6, pc}
 1005              	.LVL50:
 1006              	.L48:
 1007              		.cfi_restore_state
 212:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 1008              		.loc 9 212 28 view .LVU229
 1009 005e 0148     		ldr	r0, .L50
 1010              	.LVL51:
 212:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 1011              		.loc 9 212 28 view .LVU230
 1012 0060 FFF7FEFF 		bl	_ZSt19__throw_logic_errorPKc
 1013              	.LVL52:
 1014              	.L51:
 212:/usr/include/newlib/c++/9.2.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 1015              		.loc 9 212 28 view .LVU231
 1016              		.align	2
 1017              	.L50:
ARM GAS  /tmp/ccOYETru.s 			page 77


 1018 0064 00000000 		.word	.LC0
 1019              		.cfi_endproc
 1020              	.LFE2768:
 1022              		.section	.text._ZN2mu8MenuItem12DisplayValueB5cxx11Ev,"ax",%progbits
 1023              		.align	1
 1024              		.p2align 2,,3
 1025              		.global	_ZN2mu8MenuItem12DisplayValueB5cxx11Ev
 1026              		.syntax unified
 1027              		.thumb
 1028              		.thumb_func
 1029              		.fpu fpv5-d16
 1031              	_ZN2mu8MenuItem12DisplayValueB5cxx11Ev:
 1032              	.LVL53:
 1033              	.LFB2253:
  39:Mu/logistics/menuitem.cpp ****     return  displayName + values[index];
 1034              		.loc 1 39 38 is_stmt 1 view -0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
  40:Mu/logistics/menuitem.cpp **** };
 1038              		.loc 1 40 5 view .LVU233
  39:Mu/logistics/menuitem.cpp ****     return  displayName + values[index];
 1039              		.loc 1 39 38 is_stmt 0 view .LVU234
 1040 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1041              		.cfi_def_cfa_offset 24
 1042              		.cfi_offset 3, -24
 1043              		.cfi_offset 4, -20
 1044              		.cfi_offset 5, -16
 1045              		.cfi_offset 6, -12
 1046              		.cfi_offset 7, -8
 1047              		.cfi_offset 14, -4
 1048              	.LBB1336:
 1049              	.LBB1337:
 917:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 918:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 919:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       size_type
 920:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 921:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 922:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 923:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 924:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 925:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 926:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 927:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 928:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 929:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 930:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 931:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  default constructed elements are appended.
 932:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 933:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 934:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       resize(size_type __new_size)
 935:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 936:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (__new_size > size())
 937:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 938:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 939:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 940:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
ARM GAS  /tmp/ccOYETru.s 			page 78


 941:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 942:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 943:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 944:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 945:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 946:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 947:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 948:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 949:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 950:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 951:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  given data.
 952:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 953:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 954:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 955:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 956:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (__new_size > size())
 957:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 958:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 959:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 960:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 961:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 962:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 963:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 964:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 965:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 966:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
 967:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 968:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 969:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 970:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 971:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  given data.
 972:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 973:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 974:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 975:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 976:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (__new_size > size())
 977:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 978:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 979:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 980:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 981:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 982:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 983:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 984:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 985:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
 986:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       shrink_to_fit()
 987:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 988:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
 989:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 990:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
 991:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 992:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 993:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
 994:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       size_type
 995:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 996:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 997:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
ARM GAS  /tmp/ccOYETru.s 			page 79


 998:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 999:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1000:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1001:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  equal end().)
1002:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1003:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1004:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1005:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return begin() == end(); }
1006:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1007:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1008:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1009:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *          elements.
1010:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1011:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1012:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1013:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1014:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1015:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1016:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  thrown.
1017:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1018:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1019:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1020:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1021:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1022:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  and copying of %vector data.
1023:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1024:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1025:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       reserve(size_type __n);
1026:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1027:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // element access
1028:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1029:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1030:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1031:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  accessed.
1032:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1033:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1034:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1035:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1036:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1037:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  see at().)
1038:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1039:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       reference
1040:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1041:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1042:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1043:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
 1050              		.loc 7 1043 34 view .LVU235
 1051 0002 0C68     		ldr	r4, [r1]
 1052              	.LBE1337:
 1053              	.LBE1336:
 1054              	.LBB1341:
 1055              	.LBB1342:
 1056              	.LBB1343:
 1057              	.LBB1344:
 1058              	.LBB1345:
 1059              	.LBB1346:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
ARM GAS  /tmp/ccOYETru.s 			page 80


 1060              		.loc 2 193 51 view .LVU236
 1061 0004 00F10802 		add	r2, r0, #8
 1062              	.LBE1346:
 1063              	.LBE1345:
 1064              	.LBE1344:
 1065              	.LBE1343:
 1066              	.LBE1342:
 1067              	.LBE1341:
 1068              	.LBB1381:
 1069              	.LBB1338:
 1070              		.loc 7 1043 39 view .LVU237
 1071 0008 4E6B     		ldr	r6, [r1, #52]
 1072              	.LBE1338:
 1073              	.LBE1381:
  39:Mu/logistics/menuitem.cpp ****     return  displayName + values[index];
 1074              		.loc 1 39 38 view .LVU238
 1075 000a 0546     		mov	r5, r0
 1076              	.LBB1382:
 1077              	.LBB1339:
 1078              		.loc 7 1043 34 view .LVU239
 1079 000c 04EB4404 		add	r4, r4, r4, lsl #1
 1080              	.LBE1339:
 1081              	.LBE1382:
 1082              	.LBB1383:
 1083              	.LBB1379:
 1084              	.LBB1375:
 1085              	.LBB1373:
 1086              	.LBB1347:
 1087              	.LBB1348:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 1088              		.loc 2 160 46 view .LVU240
 1089 0010 0260     		str	r2, [r0]
 1090              	.LBE1348:
 1091              	.LBE1347:
 1092              	.LBB1353:
 1093              	.LBB1354:
 1094              	.LBB1355:
 1095              	.LBB1356:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1096              		.loc 2 247 11 view .LVU241
 1097 0012 4FF00003 		mov	r3, #0
 1098              	.LBE1356:
 1099              	.LBE1355:
 1100              	.LBE1354:
 1101              	.LBE1353:
 1102              	.LBE1373:
 1103              	.LBE1375:
 1104              	.LBE1379:
 1105              	.LBE1383:
 1106              	.LBB1384:
 1107              	.LBI1336:
1040:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 1108              		.loc 7 1040 7 is_stmt 1 view .LVU242
 1109              	.LVL54:
 1110              	.LBB1340:
 1111              		.loc 7 1043 34 is_stmt 0 view .LVU243
 1112 0016 E700     		lsls	r7, r4, #3
ARM GAS  /tmp/ccOYETru.s 			page 81


 1113              		.loc 7 1043 39 view .LVU244
 1114 0018 06EBC404 		add	r4, r6, r4, lsl #3
 1115              	.LVL55:
 1116              		.loc 7 1043 39 view .LVU245
 1117              	.LBE1340:
 1118              	.LBE1384:
 1119              	.LBB1385:
 1120              	.LBI1341:
 432:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 433:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 434:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_set_length(0); }
 435:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 436:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 437:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 438:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 439:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       explicit
 440:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 441:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 442:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_set_length(0); }
 443:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 444:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 445:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 446:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
 447:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str)
 449:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 450:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 452:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 453:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 454:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 455:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 456:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 457:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
 458:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 459:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 460:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 461:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 462:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 463:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 464:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 465:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 466:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 467:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 468:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 469:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 470:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 471:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 472:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
 473:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 474:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 475:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 476:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 477:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   size_type __n)
 478:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 479:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 480:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
ARM GAS  /tmp/ccOYETru.s 			page 82


 481:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 482:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 483:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 484:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 485:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 486:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 487:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
 488:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 489:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 490:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 491:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 492:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 493:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 494:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 495:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 496:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const _CharT* __start
 497:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 498:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 499:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 500:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 501:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 502:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 503:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __s  Source character %array.
 504:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 505:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 506:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
 507:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 508:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  has no special meaning.
 509:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 510:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 511:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 512:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 513:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 514:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 515:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 516:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 517:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __s  Source C string.
 518:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 519:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 520:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 521:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 523:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 524:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 525:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 526:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 527:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 528:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 529:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 530:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 531:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters.
 532:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __c  Character to use.
 533:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 534:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 535:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 536:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 537:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
ARM GAS  /tmp/ccOYETru.s 			page 83


 538:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 539:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 540:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 541:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 542:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_construct(__n, __c); }
 543:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 544:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 545:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 546:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Move construct string.
 547:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
 548:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
 549:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 550:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 551:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        **/
 552:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 553:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 554:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 555:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__str._M_is_local())
 556:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 557:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 558:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 559:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 560:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
 561:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 562:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 563:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 564:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 565:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 566:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 567:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 568:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 569:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_length(__str.length());
 570:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 571:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__str._M_set_length(0);
 572:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 573:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 574:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 575:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 576:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 577:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 578:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 579:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 580:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 581:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 582:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 583:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 584:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 585:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 586:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 587:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 588:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 589:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 590:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 591:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__str._M_is_local())
 592:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 593:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 594:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
ARM GAS  /tmp/ccOYETru.s 			page 84


 595:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_length(__str.length());
 596:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 597:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 598:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 599:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 600:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 601:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 602:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_length(__str.length());
 603:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 604:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 605:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 606:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 607:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
 608:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 609:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 610:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 611:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
 612:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 613:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 614:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 615:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __beg  Start of range.
 616:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __end  End of range.
 617:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 618:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 619:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 620:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _InputIterator,
 621:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 622:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 623:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _InputIterator>
 624:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 625:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 626:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 627:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 628:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 629:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 630:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 631:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 632:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 633:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 634:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 635:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 636:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 637:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 638:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 639:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 640:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 641:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 642:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 643:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 644:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 645:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 646:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 647:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 648:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 649:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	explicit
 650:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 651:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
ARM GAS  /tmp/ccOYETru.s 			page 85


 652:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
 653:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 654:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 655:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 656:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ~basic_string()
 658:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_dispose(); }
 659:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 660:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 661:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 662:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
 663:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 664:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
 665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(const basic_string& __str)
 666:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 667:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 668:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
 669:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 670:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 671:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
 672:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      {
 673:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
 674:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
 675:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
 676:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  {
 677:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 678:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _M_data(_M_local_data());
 679:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _M_set_length(0);
 680:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  }
 681:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		else
 682:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  {
 683:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    const auto __len = __str.size();
 684:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
 685:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
 686:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
 687:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 688:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _M_data(__ptr);
 689:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _M_capacity(__len);
 690:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    _M_set_length(__len);
 691:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  }
 692:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      }
 693:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
 694:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 695:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 696:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->assign(__str);
 697:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 698:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 699:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 700:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 701:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 702:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 703:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
 704:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(const _CharT* __s)
 705:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->assign(__s); }
 706:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 707:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 708:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
ARM GAS  /tmp/ccOYETru.s 			page 86


 709:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __c  Source character.
 710:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
 711:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 712:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  (*this)[0] == @a c.
 713:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 714:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
 715:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(_CharT __c)
 716:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 717:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->assign(1, __c);
 718:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 719:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 720:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 721:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 722:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 723:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 724:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
 725:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
 726:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 727:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 728:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        **/
 729:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 730:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 731:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
 732:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(basic_string&& __str)
 733:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 734:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 735:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 736:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 737:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 738:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 739:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 740:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 741:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_data(_M_local_data());
 742:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_set_length(0);
 743:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 744:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 745:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 746:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 747:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__str._M_is_local())
 748:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 749:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it.
 750:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    if (__str.size())
 751:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 752:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_set_length(__str.size());
 753:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 754:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 755:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 756:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 757:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 758:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 759:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    pointer __data = nullptr;
 760:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    size_type __capacity;
 761:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    if (!_M_is_local())
 762:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      {
 763:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 764:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  {
 765:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    // __str can reuse our existing storage.
ARM GAS  /tmp/ccOYETru.s 			page 87


 766:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    __data = _M_data();
 767:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 768:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  }
 769:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		else // __str can't use it, so free it.
 770:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 771:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      }
 772:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 773:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 774:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_length(__str.length());
 775:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 776:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    if (__data)
 777:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      {
 778:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		__str._M_data(__data);
 779:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 780:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      }
 781:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    else
 782:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 783:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 784:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else // Need to do a deep copy
 785:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  assign(__str);
 786:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__str.clear();
 787:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 788:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 789:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 790:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 791:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 792:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 793:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 794:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
 795:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 796:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 797:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 798:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 799:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 800:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
 801:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 802:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 803:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 804:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 805:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 806:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 807:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****      template<typename _Tp>
 808:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 809:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        operator=(const _Tp& __svt)
 810:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        { return this->assign(__svt); }
 811:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 812:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 813:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 814:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return A string_view.
 815:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 816:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator __sv_type() const noexcept
 817:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 818:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
 819:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 820:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Iterators:
 821:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 822:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
ARM GAS  /tmp/ccOYETru.s 			page 88


 823:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the %string.
 824:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 825:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
 826:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 827:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return iterator(_M_data()); }
 828:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 829:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 830:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 831:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.
 832:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 833:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
 834:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 835:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 836:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 837:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 838:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 839:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.
 840:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 841:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
 842:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 843:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 844:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 845:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 846:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 847:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  last character in the %string.
 848:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 849:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
 850:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 851:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 852:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 853:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 854:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 855:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 856:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  order.
 857:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 858:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reverse_iterator
 859:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 860:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 861:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 862:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 863:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 864:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 865:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  reverse element order.
 866:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 867:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
 868:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 869:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 870:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 871:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 872:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 873:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 874:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element order.
 875:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 876:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reverse_iterator
 877:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 878:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 879:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 89


 880:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 881:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 882:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 883:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is done in reverse element order.
 884:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 885:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
 886:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 887:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 888:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 889:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 890:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 891:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 892:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.
 893:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 894:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
 895:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       cbegin() const noexcept
 896:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 897:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 898:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 899:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 900:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  last character in the %string.
 901:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 902:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
 903:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       cend() const noexcept
 904:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 905:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 906:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 907:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 908:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 909:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  reverse element order.
 910:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 911:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
 912:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       crbegin() const noexcept
 913:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 914:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 915:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 916:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 917:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 918:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is done in reverse element order.
 919:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 920:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
 921:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       crend() const noexcept
 922:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 923:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 924:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 925:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
 926:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Capacity:
 927:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 928:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  null-termination.
 929:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
 930:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 931:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 932:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 933:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 934:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  null-termination.
 935:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccOYETru.s 			page 90


 937:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 938:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 939:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 940:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
 941:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 942:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 943:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 944:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 945:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 946:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 947:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 948:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
 949:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 950:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 951:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 952:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 953:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 954:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 955:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 956:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 957:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 958:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 959:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 960:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
 961:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 962:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 963:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 964:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 965:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  setting them to 0.
 966:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 967:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 968:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       resize(size_type __n)
 969:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 970:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 971:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 972:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 973:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
 974:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       shrink_to_fit() noexcept
 975:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 976:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cpp_exceptions
 977:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (capacity() > size())
 978:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
 979:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    try
 980:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      { reserve(0); }
 981:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    catch(...)
 982:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      { }
 983:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
 984:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 985:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 986:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 987:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 988:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
 989:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 990:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  before needing to allocate more memory.
 991:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
 992:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
 993:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccOYETru.s 			page 91


 994:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 995:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 996:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 997:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
 998:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 999:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1000:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1001:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *          characters.
1002:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
1003:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
1004:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1005:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
1006:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
1007:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
1008:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
1009:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1010:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
1011:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
1012:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
1013:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
1014:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  data.
1015:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1016:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
1017:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
1018:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1019:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1020:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Erases the string, making it empty.
1021:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1022:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
1023:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1024:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_set_length(0); }
1025:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1026:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1027:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1028:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  <code>*this == ""</code>.
1029:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1030:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
1031:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1032:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->size() == 0; }
1033:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1034:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Element access:
1035:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1036:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1037:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1038:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1039:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1040:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1041:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1042:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1043:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  see at().)
1044:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1045:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
1046:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1047:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1048:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1049:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__pos];
1050:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
ARM GAS  /tmp/ccOYETru.s 			page 92


1051:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1052:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1053:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1054:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1055:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1056:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1057:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1058:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1059:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1060:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  see at().)
1061:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1062:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
1063:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator[](size_type __pos)
1064:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1065:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1066:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// and in C++11 mode.
1067:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1068:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1069:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1070:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__pos];
1071:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1072:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1073:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1074:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1075:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1076:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1077:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1078:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1079:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1080:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1081:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1082:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1083:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
1084:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       at(size_type __n) const
1085:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1086:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n >= this->size())
1087:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1088:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1089:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu)"),
1090:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   __n, this->size());
1091:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__n];
1092:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1093:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1094:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1095:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1096:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1097:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1098:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1099:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1100:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1101:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1102:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1103:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1104:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
1105:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       at(size_type __n)
1106:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1107:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n >= size())
ARM GAS  /tmp/ccOYETru.s 			page 93


1108:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1109:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1110:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu)"),
1111:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   __n, this->size());
1112:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__n];
1113:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1114:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1115:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1116:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1117:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element of the %string.
1119:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1120:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
1121:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       front() noexcept
1122:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1123:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1124:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](0);
1125:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1126:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1127:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1128:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element of the %string.
1130:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1131:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
1132:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       front() const noexcept
1133:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1134:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1135:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](0);
1136:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1137:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1138:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1139:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1140:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element of the %string.
1141:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1142:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
1143:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       back() noexcept
1144:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1145:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1146:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1147:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1148:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1149:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  last element of the %string.
1152:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1153:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
1154:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       back() const noexcept
1155:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1156:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1157:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1158:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
1160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1161:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Modifiers:
1162:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1163:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1164:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to append.
ARM GAS  /tmp/ccOYETru.s 			page 94


1165:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1166:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1167:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1168:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(const basic_string& __str)
1169:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__str); }
1170:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1171:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1172:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a C string.
1173:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1174:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1175:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1176:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1177:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(const _CharT* __s)
1178:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__s); }
1179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1180:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1181:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a character.
1182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to append.
1183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1184:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1185:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(_CharT __c)
1187:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1188:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->push_back(__c);
1189:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
1190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1191:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1192:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1194:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1195:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1196:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1197:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1198:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1199:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1200:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1201:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
1202:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1203:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1204:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1205:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1206:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1207:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1208:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1209:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
1210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1212:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{ return this->append(__svt); }
1213:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
1214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1215:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1216:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1217:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to append.
1218:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1219:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1220:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const basic_string& __str)
ARM GAS  /tmp/ccOYETru.s 			page 95


1222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1223:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1224:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1225:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a substring.
1226:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to append.
1227:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1228:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1230:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1232:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1233:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1234:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1235:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  remainder of @a __str is appended.
1236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1237:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1238:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1239:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_append(__str._M_data()
1240:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1241:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1242:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1244:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a C substring.
1245:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1246:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1248:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1249:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1250:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1251:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1252:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1253:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1254:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1255:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1256:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1257:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1258:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a C string.
1259:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1260:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1261:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1262:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const _CharT* __s)
1264:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1265:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1266:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1267:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1268:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1269:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1270:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1271:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1272:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append multiple characters.
1273:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1274:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to use.
1275:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1276:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1277:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1278:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
ARM GAS  /tmp/ccOYETru.s 			page 96


1279:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1280:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1281:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1282:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1283:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1284:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1285:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1286:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1287:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1288:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1289:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1291:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1292:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
1293:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1294:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1295:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a range of characters.
1296:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1297:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1298:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1299:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1300:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1301:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1302:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1303:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator,
1304:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1305:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
1306:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
1307:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
1308:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string&
1309:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1310:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1311:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1312:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1313:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1314:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1315:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1316:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1317:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1318:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
1319:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1320:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         append(const _Tp& __svt)
1321:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
1322:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           __sv_type __sv = __svt;
1323:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1324:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         }
1325:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1326:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1327:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1328:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1329:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1330:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1331:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1332:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1333:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
1334:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1335:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
ARM GAS  /tmp/ccOYETru.s 			page 97


1336:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
1337:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1338:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return _M_append(__sv.data()
1339:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1340:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1341:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
1342:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
1343:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1344:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1345:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a single character.
1346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to append.
1347:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
1349:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       push_back(_CharT __c)
1350:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1351:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __size = this->size();
1352:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1353:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1354:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1355:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1356:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1357:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1358:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1359:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1360:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1361:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1362:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1363:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const basic_string& __str)
1365:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->_M_assign(__str);
1367:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
1368:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1369:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1370:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1371:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1372:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1373:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1374:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1375:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1376:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1377:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1378:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1379:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1380:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(basic_string&& __str)
1381:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1382:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1383:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1384:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1385:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this = std::move(__str);
1386:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1387:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
1388:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1389:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1390:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1391:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to use.
1392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
ARM GAS  /tmp/ccOYETru.s 			page 98


1393:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1394:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1395:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1396:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1397:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1398:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1399:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1400:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1401:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1402:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1403:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1404:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1405:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1406:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1407:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1408:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1409:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1410:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1411:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1412:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1413:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1414:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1415:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1416:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1417:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1418:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1419:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1420:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1421:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1422:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1423:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1424:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1425:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1426:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1427:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1428:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1429:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1430:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1432:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  function returns.
1433:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1434:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1435:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const _CharT* __s)
1436:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1437:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1438:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1439:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			  traits_type::length(__s));
1440:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1441:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1442:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1443:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1444:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1445:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to use.
1446:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1447:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1449:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character @a __c.
ARM GAS  /tmp/ccOYETru.s 			page 99


1450:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1452:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1453:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1454:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1455:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1456:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1457:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1458:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1459:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1460:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1461:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1462:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1463:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1464:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator,
1465:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1466:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
1467:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
1468:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
1469:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string&
1470:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1471:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1472:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1473:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1474:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1475:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1476:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1477:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1478:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1479:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1480:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1481:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1482:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
1483:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1484:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1485:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1486:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1487:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1488:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1489:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1490:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
1491:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1492:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	assign(const _Tp& __svt)
1493:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
1494:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1495:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1496:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
1497:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1498:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1499:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1500:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1502:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1503:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1504:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1505:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
1506:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
ARM GAS  /tmp/ccOYETru.s 			page 100


1507:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1508:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
1509:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1510:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1511:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      __sv.data()
1512:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1513:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1514:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
1515:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
1516:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1517:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1518:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1519:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1520:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1521:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *              insert at.
1522:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1523:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1524:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1525:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1526:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1527:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1528:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1529:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1530:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1531:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1532:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1533:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
1534:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1535:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1536:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1537:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1538:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1539:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1540:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1541:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
1542:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1543:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1544:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1545:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1546:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1547:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1548:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1549:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1550:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1551:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1552:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1553:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1554:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1555:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
1556:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1557:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1558:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
1559:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1560:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1561:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1562:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1563:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
ARM GAS  /tmp/ccOYETru.s 			page 101


1564:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *              insert at.
1565:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1566:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __end  End of range.
1567:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1568:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1569:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1570:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1571:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1572:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1573:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.
1574:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1575:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator,
1576:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1577:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	iterator
1578:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1579:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
1580:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1581:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1582:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1583:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1584:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
1585:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
1586:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1587:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1588:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1589:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1590:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __end  End of range.
1591:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1592:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1593:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1594:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1595:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1596:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1597:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1598:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
1599:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
1600:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1601:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1602:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
1603:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1604:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1605:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1606:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1607:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1608:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1609:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1610:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1611:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
1612:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
1613:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1614:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1615:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1616:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // See PR libstdc++/83328
1617:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
1618:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1619:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1620:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
ARM GAS  /tmp/ccOYETru.s 			page 102


1621:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1622:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1623:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
1624:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
1625:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1626:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1627:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert value of a string.
1628:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1629:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to insert.
1630:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1631:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1632:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1633:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1634:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1635:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1636:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1637:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1638:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1639:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1640:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1641:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1642:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1643:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1644:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a substring.
1645:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1646:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to insert.
1647:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1648:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1649:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1650:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1651:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1652:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1653:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1654:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1655:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1656:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1658:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1659:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1660:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1661:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1662:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1663:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1664:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1666:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1667:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1668:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1669:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a C substring.
1670:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1671:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1672:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1673:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1674:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1675:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1676:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
1677:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
ARM GAS  /tmp/ccOYETru.s 			page 103


1678:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1679:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1680:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1681:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1682:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1683:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1684:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1685:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1686:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1687:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1688:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1689:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a C string.
1690:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1691:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1692:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1693:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1694:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1695:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
1696:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1697:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1698:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1699:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1700:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1701:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
1702:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1703:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1704:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1705:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1706:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1707:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1708:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     traits_type::length(__s));
1709:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1710:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1711:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1712:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1713:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1714:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1715:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1716:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1717:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1718:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1719:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
1720:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1721:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1722:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1723:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1724:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1725:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1726:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1727:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1728:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1729:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1730:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1731:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1732:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1733:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert one character.
1734:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
ARM GAS  /tmp/ccOYETru.s 			page 104


1735:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1736:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1737:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1738:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1739:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1740:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1741:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1742:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1743:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1744:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1745:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
1746:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1747:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1748:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1749:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1750:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1751:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1752:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1753:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1754:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1755:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1756:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1757:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1758:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1759:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1760:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1761:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
1762:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1763:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1764:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
1765:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1766:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1767:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
1768:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1769:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1770:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1771:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1772:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
1773:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
1774:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  from.
1775:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1776:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1777:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1778:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
1779:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1780:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1781:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1782:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
1783:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1784:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0),
1785:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      __sv.data()
1786:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1787:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1788:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
1789:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
1790:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1791:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccOYETru.s 			page 105


1792:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove characters.
1793:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1794:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1795:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1796:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1797:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
1798:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1799:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1800:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1801:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1802:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1803:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1804:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1805:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1806:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1807:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1808:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1809:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1810:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n == npos)
1811:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1812:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else if (__n != 0)
1813:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1814:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
1815:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1816:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1817:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1818:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove one character.
1819:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1820:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1821:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1822:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1823:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1824:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1825:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
1826:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       erase(__const_iterator __position)
1827:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1828:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1829:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __position < end());
1830:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1831:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1832:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1833:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1834:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1835:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1836:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1837:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1838:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1839:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1840:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1841:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1842:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1843:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1844:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
1845:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1846:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1847:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1848:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __last <= end());
ARM GAS  /tmp/ccOYETru.s 			page 106


1849:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         const size_type __pos = __first - begin();
1850:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__last == end())
1851:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1852:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
1853:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1854:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1855:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1856:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1857:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1858:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1859:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove the last character.
1860:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1861:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The string must be non-empty.
1862:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
1863:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
1864:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       pop_back() noexcept
1865:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1866:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1867:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1868:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1869:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
1870:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1871:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1872:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1873:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1874:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1875:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to insert.
1876:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1877:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1878:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
1879:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1880:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1881:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1882:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1883:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1884:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1885:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1886:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  error is thrown.
1887:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1888:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1889:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1890:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1891:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1892:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1893:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1894:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1895:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1896:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to insert.
1897:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1898:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1899:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1900:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1901:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str.size().
1902:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1903:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1904:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1905:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
ARM GAS  /tmp/ccOYETru.s 			page 107


1906:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1907:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1908:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1909:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1910:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1911:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1912:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1913:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1914:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1915:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1916:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1917:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1918:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1919:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1920:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1921:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1922:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1923:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1924:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1925:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1926:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1927:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1928:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1929:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1930:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1931:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1932:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1933:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.
1934:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1935:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1937:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __n2)
1938:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
1939:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1940:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1941:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1942:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1943:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1944:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1945:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1946:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1947:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1948:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1949:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1950:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1951:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1952:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1953:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1954:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1955:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1956:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1957:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1958:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
1959:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1960:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1961:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1962:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccOYETru.s 			page 108


1963:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1964:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1965:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
1966:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1967:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1968:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1969:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1970:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1971:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1972:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to insert.
1973:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1974:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1975:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1976:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1977:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1978:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1979:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1980:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1981:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1982:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.
1983:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
1984:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
1985:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1986:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1987:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1988:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
1989:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
1990:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1991:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1992:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1993:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String value to insert.
1994:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
1995:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1996:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
1997:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1998:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1999:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
2000:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
2001:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2002:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2003:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2004:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      const basic_string& __str)
2005:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2006:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2007:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2008:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2009:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2010:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2011:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2012:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
2013:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2014:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2015:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2016:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2017:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2018:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2019:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
ARM GAS  /tmp/ccOYETru.s 			page 109


2020:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
2021:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2022:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2023:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2024:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2025:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2026:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2027:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= end());
2028:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2029:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2030:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2031:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2032:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2033:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2034:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2035:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2036:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2037:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2038:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2039:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2040:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2041:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2042:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2043:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2044:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2045:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2046:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2047:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2048:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2049:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2050:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2051:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2052:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2053:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2054:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2055:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2056:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to insert.
2057:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2058:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2059:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2060:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2061:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2062:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2063:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2064:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2065:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2066:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2067:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      _CharT __c)
2068:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2069:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2070:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= end());
2071:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2072:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2073:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2074:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2075:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2076:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
ARM GAS  /tmp/ccOYETru.s 			page 110


2077:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2078:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2079:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2080:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2081:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2082:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2083:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2084:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2085:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2086:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2087:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
2088:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2089:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2090:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator,
2091:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2092:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string&
2093:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2094:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2095:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
2096:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2097:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   && __i2 <= end());
2098:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2099:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2100:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 					   std::__false_type());
2101:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2102:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
2103:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
2104:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2105:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2106:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
2107:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string&
2108:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
2109:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2110:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2111:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
2112:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2113:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   && __i2 <= end());
2114:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2115:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2116:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2117:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2118:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
2119:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2120:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2121:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2122:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2123:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2124:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2125:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2126:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2127:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= end());
2128:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2129:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2130:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2131:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2132:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2133:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
ARM GAS  /tmp/ccOYETru.s 			page 111


2134:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2135:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2136:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2137:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2138:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= end());
2139:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2140:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2141:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2142:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2143:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2144:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2145:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2146:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2147:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2148:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2149:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= end());
2150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2151:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2152:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2153:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2154:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2155:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2156:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2157:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2158:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= end());
2161:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2162:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2163:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2164:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2165:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2166:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2167:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2168:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2169:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2170:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2171:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2172:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2173:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2174:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2175:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2176:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2177:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2178:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
2180:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2181:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2184:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
2185:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2187:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2188:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2189:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
ARM GAS  /tmp/ccOYETru.s 			page 112


2191:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2192:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2194:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2195:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2196:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2197:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2198:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2199:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2200:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2201:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2202:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2203:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2204:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2205:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2206:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2207:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2208:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2209:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2212:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2213:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2215:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2216:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2217:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
2218:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      __sv.data()
2219:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2220:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2223:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2224:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2225:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2226:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           to replace at.
2227:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2228:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           for the replace.
2229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2230:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
2231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2232:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2233:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2234:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2235:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2237:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2238:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2239:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2240:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2241:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     private:
2242:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _Integer>
2243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string&
2244:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2245:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2246:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 113


2248:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
2249:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string&
2250:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2251:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2252:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    __false_type);
2253:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2254:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2255:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2256:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     _CharT __c);
2257:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2258:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2259:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2260:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 const size_type __len2);
2261:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2262:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
2263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2264:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2265:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
2266:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2267:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2268:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2269:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2270:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2271:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2272:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Number of characters actually copied
2273:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2274:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2275:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2276:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2277:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.
2278:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2279:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2280:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2281:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2282:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2283:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2284:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  String to swap with.
2285:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2286:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2287:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  time.
2288:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2289:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
2290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2291:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2292:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // String operations:
2293:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2294:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2295:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2296:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2297:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  happen.
2298:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2299:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const _CharT*
2300:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
2301:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data(); }
2302:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2303:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2304:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
ARM GAS  /tmp/ccOYETru.s 			page 114


2305:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2306:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
2307:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
2308:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
2309:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
2310:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2311:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const _CharT*
2312:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
2313:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data(); }
2314:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2315:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2316:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2317:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
2318:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2319:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
2320:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
2321:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2322:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _CharT*
2323:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       data() noexcept
2324:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data(); }
2325:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
2326:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2327:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2328:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
2329:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2330:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       allocator_type
2331:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
2332:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_get_allocator(); }
2333:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2334:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2335:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a C substring.
2336:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
2337:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2338:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
2339:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2340:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2341:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
2342:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2343:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2344:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
2345:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2347:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
2348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2349:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2350:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2351:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a string.
2352:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to locate.
2353:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2354:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2355:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2356:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
2357:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
2358:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found, returns npos.
2359:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2360:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2361:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
ARM GAS  /tmp/ccOYETru.s 			page 115


2362:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2363:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
2364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2365:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2367:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a string_view.
2368:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2369:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2370:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2371:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2372:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2373:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2374:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
2375:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2376:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2377:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2378:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
2379:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2380:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2381:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2382:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2383:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a C string.
2384:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
2385:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2386:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2387:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2388:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
2389:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
2390:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2391:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2393:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2394:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2395:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2396:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
2397:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2398:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2399:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2400:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character.
2401:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
2402:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2403:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2404:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2405:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
2406:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2407:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2408:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2409:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2410:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
2411:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2412:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2413:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a string.
2414:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to locate.
2415:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2416:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2417:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2418:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
ARM GAS  /tmp/ccOYETru.s 			page 116


2419:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
2420:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2421:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2422:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2423:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
2424:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2425:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
2426:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2427:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2428:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2429:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
2430:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2432:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2433:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2434:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2435:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2436:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
2437:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2438:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2439:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2440:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
2441:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2442:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2443:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2444:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2445:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
2446:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
2447:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2449:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2450:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
2452:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2453:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2454:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
2455:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2456:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2457:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
2458:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2459:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2460:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2461:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a C string.
2462:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
2463:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2464:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2465:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2466:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2467:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2468:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2469:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2470:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2471:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2472:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2473:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2474:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2475:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
ARM GAS  /tmp/ccOYETru.s 			page 117


2476:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2477:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2478:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
2479:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
2480:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2481:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2482:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2483:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2484:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2485:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2486:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2487:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2488:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2489:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2490:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2491:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2492:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2493:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2494:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2495:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2496:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2497:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2498:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2499:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
2500:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2501:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2502:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2503:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2504:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2505:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2506:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2507:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2508:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
2509:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2510:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to locate.
2511:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2512:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2513:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2514:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2515:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2516:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
2517:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2518:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2519:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2520:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
2521:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2522:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2523:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2524:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2525:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2526:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2527:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2528:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2529:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2530:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2531:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2532:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
ARM GAS  /tmp/ccOYETru.s 			page 118


2533:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2534:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns npos.
2535:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2536:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2537:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
2538:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2539:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2540:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2541:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2542:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2543:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2544:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2545:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2546:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2547:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2548:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2549:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2550:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2551:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2552:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2553:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2554:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2555:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2556:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2557:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2558:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2559:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character.
2560:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
2561:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2562:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2563:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2564:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2565:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2566:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2567:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2568:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2569:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2570:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2571:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2572:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find(__c, __pos); }
2573:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2574:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2575:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2576:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2577:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2578:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2579:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2580:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2581:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2582:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2583:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
2584:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2585:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2586:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2587:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2588:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2589:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 119


2590:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2591:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2592:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2593:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2594:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to locate.
2595:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2596:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2597:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2598:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2599:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2600:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
2601:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2602:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2603:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2604:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
2605:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2606:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2607:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2608:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2609:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2610:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2611:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2612:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2613:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2614:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2615:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2616:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2617:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2618:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns npos.
2619:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2620:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2621:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
2622:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2623:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2624:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2625:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2626:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2627:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2628:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2629:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2630:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2631:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2632:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2633:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2634:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2635:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2636:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2637:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2638:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2639:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2640:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2641:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2642:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2643:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
2644:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
2645:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2646:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
ARM GAS  /tmp/ccOYETru.s 			page 120


2647:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2648:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2649:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2650:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2651:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2652:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
2653:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2654:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2655:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2656:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2658:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2659:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2660:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2661:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2662:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2663:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2664:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2666:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2667:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2668:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2669:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2670:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2671:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2672:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2673:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2674:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2675:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
2676:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  A object convertible to string_view containing
2677:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to avoid.
2678:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2679:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2680:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
2681:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2682:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2683:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
2684:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2685:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2686:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2687:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
2688:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2689:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2690:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2691:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2692:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2693:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2694:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2695:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2696:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2697:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2698:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2699:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2700:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2701:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2702:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2703:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
ARM GAS  /tmp/ccOYETru.s 			page 121


2704:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2705:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
2706:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2707:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2708:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2709:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2710:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2711:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2712:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2713:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2714:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2715:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2716:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2717:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2718:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2719:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2720:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2721:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2722:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2723:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2724:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2725:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2726:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a different character.
2727:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
2728:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2729:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2730:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2731:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
2732:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2733:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2734:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2735:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2736:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2737:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2738:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2739:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2740:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2741:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2742:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2743:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2744:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2745:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2746:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2747:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2748:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
2749:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2750:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2751:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2752:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2753:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2754:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2755:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2756:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2757:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
2758:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2759:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to avoid.
2760:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
ARM GAS  /tmp/ccOYETru.s 			page 122


2761:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2762:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
2763:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2764:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2765:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
2766:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2767:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2768:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2769:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
2770:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2771:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2772:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2773:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2774:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2775:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2776:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2777:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2778:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2779:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2780:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2781:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2782:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2783:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns npos.
2784:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2785:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2786:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2787:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
2788:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2789:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2790:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2791:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2792:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2793:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2794:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2795:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2796:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2797:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
2798:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2799:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
2800:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2801:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2802:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2803:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2804:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2805:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2806:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2807:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2808:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2809:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
2810:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2811:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2812:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2813:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2814:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2815:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2816:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2817:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
ARM GAS  /tmp/ccOYETru.s 			page 123


2818:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2819:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2820:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2821:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2822:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Get a substring.
2823:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2824:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2825:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  The new string.
2826:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2827:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2828:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2829:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2830:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2831:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2832:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2833:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string
2834:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2835:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return basic_string(*this,
2836:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2837:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2838:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2839:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string.
2840:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to compare against.
2841:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2842:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2843:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2844:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2845:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
2846:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2847:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2848:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2849:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2850:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2851:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2852:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
2853:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(const basic_string& __str) const
2854:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
2855:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __size = this->size();
2856:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __osize = __str.size();
2857:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2858:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2859:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2860:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (!__r)
2861:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2862:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return __r;
2863:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
2864:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2865:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2866:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2867:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2868:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
2869:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2870:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
2871:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2872:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
2873:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	compare(const _Tp& __svt) const
2874:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
ARM GAS  /tmp/ccOYETru.s 			page 124


2875:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2876:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2877:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  const size_type __size = this->size();
2878:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
2879:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
2880:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2881:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
2882:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  if (!__r)
2883:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
2884:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __r;
2885:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2886:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2887:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2888:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2889:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
2890:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
2891:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2892:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                against.
2893:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2894:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
2895:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2896:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
2897:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
2898:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2899:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2900:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2901:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
2902:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2903:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2904:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2905:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2906:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
2907:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
2908:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2909:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                against.
2910:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
2911:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
2912:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2913:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
2914:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
2915:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
2916:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
2917:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
2918:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2919:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
2920:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2921:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __sv_type(*this)
2922:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
2923:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
2924:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
2925:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2926:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2927:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2928:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2929:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2930:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to compare against.
2931:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
ARM GAS  /tmp/ccOYETru.s 			page 125


2932:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2933:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2934:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2935:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2937:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2938:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2939:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2940:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  strings by calling
2941:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2942:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2943:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the shorter one is ordered first.
2944:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2945:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
2946:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2947:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2948:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2949:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2950:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2951:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2952:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to compare against.
2953:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2954:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
2955:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2956:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2957:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2958:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2959:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
2960:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
2961:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2962:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2963:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2964:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2965:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2966:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  calling
2967:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2968:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2969:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2970:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
2971:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
2972:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2973:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
2974:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2975:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2976:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a C string.
2977:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
2978:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2979:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
2980:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2981:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2982:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2983:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2984:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2985:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2986:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2987:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  ordered first.
2988:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
ARM GAS  /tmp/ccOYETru.s 			page 126


2989:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
2990:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
2991:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
2992:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2993:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 5 String::compare specification questionable
2994:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
2995:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2996:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2997:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2998:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
2999:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
3000:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3001:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
3002:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
3003:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
3004:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
3005:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
3006:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
3007:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
3008:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  function then compares the two string by calling
3009:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
3010:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3011:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  one is ordered first.
3012:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
3013:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
3014:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
3015:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3016:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3017:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
3018:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
3019:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
3020:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  character %array to compare against.
3021:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
3022:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
3023:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3024:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
3025:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
3026:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
3027:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
3028:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
3029:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
3030:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
3031:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
3032:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  function then compares the two strings by calling
3033:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
3034:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3035:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  one is ordered first.
3036:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3037:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
3038:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  no special meaning.
3039:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
3040:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
3041:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
3042:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __n2) const;
3043:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3044:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus > 201703L
3045:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
ARM GAS  /tmp/ccOYETru.s 			page 127


3046:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept
3047:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3048:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3049:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
3050:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       starts_with(_CharT __x) const noexcept
3051:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3052:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3053:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
3054:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       starts_with(const _CharT* __x) const noexcept
3055:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3056:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3057:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
3058:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept
3059:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3060:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3061:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
3062:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ends_with(_CharT __x) const noexcept
3063:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3064:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3065:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
3066:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ends_with(const _CharT* __x) const noexcept
3067:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3068:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++20
3069:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3070:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:
3071:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename, typename, typename> friend class basic_stringbuf;
3072:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     };
3073:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
3074:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
3075:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   // Reference-counted COW string implentation
3076:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3077:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   /**
3078:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
3079:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
3080:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3081:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @ingroup strings
3082:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @ingroup sequences
3083:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3084:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @tparam _CharT  Type of character
3085:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
3086:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *                   char_traits<_CharT>.
3087:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
3088:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3089:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
3090:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
3091:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
3092:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
3093:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
3094:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3095:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @doctodo
3096:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3097:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3098:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  Documentation?  What's that?
3099:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
3100:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3101:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  A string looks like this:
3102:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
ARM GAS  /tmp/ccOYETru.s 			page 128


3103:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @code
3104:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *                                        [_Rep]
3105:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *                                        _M_length
3106:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
3107:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
3108:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
3109:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @endcode
3110:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3111:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
3112:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
3113:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  pointer to the header.
3114:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3115:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
3116:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
3117:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
3118:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
3119:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
3120:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
3121:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  object at the front.
3122:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3123:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
3124:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
3125:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
3126:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
3127:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  string length.)
3128:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3129:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
3130:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
3131:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
3132:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
3133:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
3134:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *
3135:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
3136:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  for a C++ string implementation.
3137:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   */
3138:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   // 21.3  Template class basic_string
3139:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
3140:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     class basic_string
3141:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     {
3142:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
3143:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3144:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Types:
3145:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
3146:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef _Traits					    traits_type;
3147:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
3148:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
3149:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
3150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
3151:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus < 201103L
3152:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
3153:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
3154:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
3155:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef value_type&				    reference;
3156:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef const value_type&				    const_reference;
3157:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3158:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
3159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
ARM GAS  /tmp/ccOYETru.s 			page 129


3160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
3161:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
3162:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****                                                             const_iterator;
3163:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
3164:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
3165:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3166:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     protected:
3167:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // type used for positions in insert, erase etc.
3168:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef iterator __const_iterator;
3169:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3170:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     private:
3171:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _Rep: string representation
3172:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //   Invariants:
3173:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
3174:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //      must be kept null-terminated.
3175:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
3176:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
3177:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //   3. _M_refcount has three states:
3178:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
3179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //       0: one reference, non-const.
3180:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
3181:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
3182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
3183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       //      empty string representation needs no constructor.
3184:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3185:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       struct _Rep_base
3186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3187:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	size_type		_M_length;
3188:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	size_type		_M_capacity;
3189:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
3190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       };
3191:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3192:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       struct _Rep : _Rep_base
3193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3194:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// Types:
3195:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
3196:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3197:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// (Public) Data members:
3198:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3199:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
3200:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
3201:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
3202:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
3203:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
3204:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
3205:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// look like this:
3206:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
3207:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// Solving for m:
3208:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
3209:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
3210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	static const size_type	_S_max_size;
3211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	static const _CharT	_S_terminal;
3212:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3213:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
3214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
3215:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
3216:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 130


3217:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static _Rep&
3218:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
3219:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { 
3220:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
3221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
3222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  // be reasonably safe in this case.
3223:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
3224:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
3225:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
3226:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3227:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         bool
3228:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
3229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
3230:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if defined(__GTHREADS)
3231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3232:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // so we need to use an atomic load. However, _M_is_leaked
3233:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // predicate does not change concurrently (i.e. the string is either
3234:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // leaked or not), so a relaxed load is enough.
3235:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;
3236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
3237:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           return this->_M_refcount < 0;
3238:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3239:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         }
3240:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3241:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         bool
3242:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
3243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
3244:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if defined(__GTHREADS)
3245:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3246:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // so we need to use an atomic load. Another thread can drop last
3247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // but one reference concurrently with this check, so we need this
3248:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // load to be acquire to synchronize with release fetch_and_add in
3249:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           // _M_dispose.
3250:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;
3251:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
3252:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           return this->_M_refcount > 0;
3253:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3254:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         }
3255:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3256:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
3257:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
3258:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { this->_M_refcount = -1; }
3259:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3260:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
3261:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
3262:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { this->_M_refcount = 0; }
3263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3264:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	void
3265:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
3266:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
3267:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3268:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3269:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3270:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    {
3271:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
3272:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      this->_M_length = __n;
3273:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
ARM GAS  /tmp/ccOYETru.s 			page 131


3274:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
3275:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
3276:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    }
3277:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
3278:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3279:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_CharT*
3280:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_refdata() throw()
3281:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
3282:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3283:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_CharT*
3284:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
3285:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
3286:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
3287:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
3288:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
3289:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// Create & Destroy
3291:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	static _Rep*
3292:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
3293:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3294:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	void
3295:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
3296:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
3297:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3298:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3299:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3300:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    {
3301:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
3302:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
3303:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               // Decrement of _M_refcount is acq_rel, because:
3304:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               // - all but last decrements need to release to synchronize with
3305:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               //   the last decrement that will delete the object.
3306:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               // - the last decrement needs to acquire to synchronize with
3307:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               //   all the previous decrements.
3308:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               // - last but one decrement needs to release to synchronize with
3309:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               //   the acquire load in _M_is_shared that will conclude that
3310:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****               //   the object is not shared anymore.
3311:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
3312:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 							 -1) <= 0)
3313:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		{
3314:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
3315:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  _M_destroy(__a);
3316:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		}
3317:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    }
3318:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}  // XXX MT
3319:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3320:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	void
3321:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
3322:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3323:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_CharT*
3324:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_refcopy() throw()
3325:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
3326:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3327:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3328:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3329:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
3330:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return _M_refdata();
ARM GAS  /tmp/ccOYETru.s 			page 132


3331:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}  // XXX MT
3332:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3333:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_CharT*
3334:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
3335:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       };
3336:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3337:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
3338:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
3339:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3340:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
3341:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
3342:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3343:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
3344:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       };
3345:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
3347:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Data Members (public):
3348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
3349:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // size that the allocator can hold.
3350:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
3351:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
3352:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3353:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     private:
3354:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Data Members (private):
3355:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
3356:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3357:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _CharT*
3358:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
3359:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
3360:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3361:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _CharT*
3362:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
3363:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
3364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3365:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _Rep*
3366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
3367:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
3368:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3369:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
3370:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // but they do not call _M_leak.
3371:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
3372:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
3373:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return iterator(_M_data()); }
3374:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3375:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
3376:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
3377:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
3378:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3379:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3380:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
3381:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3382:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
3383:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_leak_hard();
3384:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3385:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3386:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
3387:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
ARM GAS  /tmp/ccOYETru.s 			page 133


3388:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3389:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__pos > this->size())
3390:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
3391:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
3392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   __s, __pos, this->size());
3393:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return __pos;
3394:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3395:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3396:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3397:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
3398:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3399:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
3400:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
3401:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3402:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3403:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
3404:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
3405:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
3406:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3407:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
3408:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
3409:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3410:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3411:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // True if _Rep and source do not overlap.
3412:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
3413:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
3414:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3415:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
3416:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
3417:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3418:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3419:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
3420:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // traits_type::copy/move/assign.
3421:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
3422:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3423:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3424:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n == 1)
3425:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3426:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
3427:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
3428:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3429:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3430:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
3431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3432:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3433:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n == 1)
3434:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3435:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
3436:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
3437:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3438:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3439:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
3440:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
3441:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3442:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n == 1)
3443:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
3444:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
ARM GAS  /tmp/ccOYETru.s 			page 134


3445:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
3446:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3447:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
3449:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
3450:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _Iterator>
3451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static void
3452:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
3453:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
3454:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
3455:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
3456:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
3457:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3458:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
3459:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
3460:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3461:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3462:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
3463:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
3464:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3465:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3466:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3467:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
3468:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
3469:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3470:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3471:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static void
3472:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
3473:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3474:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3475:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3476:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static int
3477:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
3478:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3479:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
3480:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3481:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
3482:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
3483:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
3484:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
3485:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
3486:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return int(__d);
3487:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3488:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3489:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3490:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
3491:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3492:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3493:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_leak_hard();
3494:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3495:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static _Rep&
3496:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
3497:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
3498:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3499:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
3500:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
3501:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
ARM GAS  /tmp/ccOYETru.s 			page 135


3502:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3503:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp, typename _Res>
3504:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	using _If_sv = enable_if_t<
3505:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
3506:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
3507:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
3508:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _Res>;
3509:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3510:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
3511:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static __sv_type
3512:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
3513:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __svt; }
3514:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3515:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
3516:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // allows to add an internal constructor that does not
3517:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // participate in overload resolution when a string_view
3518:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // is provided.
3519:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       struct __sv_wrapper
3520:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3521:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
3522:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__sv_type _M_sv;
3523:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       };
3524:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3525:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3526:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
3527:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *          wrapper.
3528:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
3529:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3530:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3531:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       explicit
3532:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
3533:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
3534:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3535:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3536:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
3537:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Construct/copy/destroy:
3538:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
3539:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
3540:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3541:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3542:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
3543:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3544:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string()
3545:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3546:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3547:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc())
3548:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
3549:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc())
3550:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3551:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { }
3552:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3553:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3554:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
3555:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3556:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       explicit
3557:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const _Alloc& __a);
3558:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 136


3559:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
3560:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3561:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
3562:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
3563:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3564:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str);
3565:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3566:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
3567:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
3568:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3569:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3570:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
3571:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3572:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3573:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3574:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3575:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3576:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3577:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3578:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3579:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
3580:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3581:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3582:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3583:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3584:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   size_type __n);
3585:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3586:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3587:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
3588:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3589:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3590:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3591:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3592:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3593:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
3594:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3595:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3596:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
3597:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __s  Source character %array.
3598:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3599:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3600:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3601:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
3602:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  has no special meaning.
3603:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3604:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
3605:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3606:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3607:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
3608:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __s  Source C string.
3609:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3610:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3611:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
3612:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3613:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
3614:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters.
3615:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __c  Character to use.
ARM GAS  /tmp/ccOYETru.s 			page 137


3616:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3617:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3618:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
3619:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3620:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3621:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3622:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Move construct string.
3623:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
3624:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3625:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
3626:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3627:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        **/
3628:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(basic_string&& __str)
3629:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3630:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
3631:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3632:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(std::move(__str._M_dataplus))
3633:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3634:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3635:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
3636:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
3637:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
3638:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3639:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3640:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3641:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3642:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
3643:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
3644:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3645:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3646:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
3647:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3648:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
3649:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(__str._M_rep()->_M_grab(__a, __str.get_allocator()), __a)
3650:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { }
3651:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3652:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
3653:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(__str._M_data(), __a)
3654:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3655:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__a == __str.get_allocator())
3656:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
3657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3658:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    __str._M_data(_S_empty_rep()._M_refdata());
3659:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
3660:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    __str._M_data(_S_construct(size_type(), _CharT(), __a));
3661:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3662:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
3663:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
3664:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_dataplus._M_p = _S_construct(__str.begin(), __str.end(), __a);
3665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3666:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
3667:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3668:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3669:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
3670:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __beg  Start of range.
3671:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __end  End of range.
3672:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
ARM GAS  /tmp/ccOYETru.s 			page 138


3673:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3674:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
3675:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
3676:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
3677:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3678:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
3679:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3680:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
3681:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
3682:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
3683:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
3684:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a   Allocator to use.
3685:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3686:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3687:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
3688:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
3689:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
3690:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3691:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3692:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
3693:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
3694:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3695:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3696:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3697:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	explicit
3698:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
3699:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
3700:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
3701:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3702:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3703:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Destroy the string instance.
3704:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3705:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
3706:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
3707:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3708:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3709:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
3710:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
3711:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3712:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
3713:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(const basic_string& __str)
3714:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->assign(__str); }
3715:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3716:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3717:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
3718:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
3719:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3720:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
3721:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(const _CharT* __s) 
3722:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->assign(__s); }
3723:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3724:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3725:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
3726:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __c  Source character.
3727:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3728:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
3729:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  (*this)[0] == @a c.
ARM GAS  /tmp/ccOYETru.s 			page 139


3730:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3731:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
3732:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(_CharT __c) 
3733:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { 
3734:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->assign(1, __c); 
3735:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
3736:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3737:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3738:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3739:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3740:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
3741:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string.
3742:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3743:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
3744:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
3745:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        **/
3746:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
3747:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(basic_string&& __str)
3748:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value)
3749:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3750:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// NB: DR 1204.
3751:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->swap(__str);
3752:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
3753:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3754:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3755:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3756:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
3757:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
3758:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3759:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
3760:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
3761:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3762:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3763:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
3764:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3765:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
3766:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3767:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
3768:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3769:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
3770:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __svt An object convertible to  string_view.
3771:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3772:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
3773:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
3774:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	operator=(const _Tp& __svt)
3775:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{ return this->assign(__svt); }
3776:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3777:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3778:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Convert to a string_view.
3779:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return A string_view.
3780:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3781:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator __sv_type() const noexcept
3782:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(data(), size()); }
3783:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
3784:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3785:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Iterators:
3786:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccOYETru.s 			page 140


3787:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3788:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the %string.  Unshares the string.
3789:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3790:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
3791:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3792:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3793:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_leak();
3794:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(_M_data());
3795:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3796:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3797:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3798:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3799:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.
3800:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3801:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
3802:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3803:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3804:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3805:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3806:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3807:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3808:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3809:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
3810:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3811:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3812:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_leak();
3813:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3814:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3815:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3816:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3817:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3818:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  last character in the %string.
3819:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3820:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
3821:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3822:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3823:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3824:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3825:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3826:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3827:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  order.  Unshares the string.
3828:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3829:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reverse_iterator
3830:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3831:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3832:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3833:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3834:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3835:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3836:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  reverse element order.
3837:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3838:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
3839:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3840:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3841:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3842:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3843:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
ARM GAS  /tmp/ccOYETru.s 			page 141


3844:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3845:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element order.  Unshares the string.
3846:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3847:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reverse_iterator
3848:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3849:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3850:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3851:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3852:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3853:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3854:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is done in reverse element order.
3855:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3856:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
3857:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3858:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3859:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3860:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3861:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3862:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3863:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character in the %string.
3864:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3865:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
3866:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       cbegin() const noexcept
3867:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3868:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3869:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3870:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3871:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  last character in the %string.
3872:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3873:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_iterator
3874:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       cend() const noexcept
3875:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3876:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3877:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3878:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3879:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3880:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  reverse element order.
3881:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3882:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
3883:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       crbegin() const noexcept
3884:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3885:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3886:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3887:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3888:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3889:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is done in reverse element order.
3890:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3891:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reverse_iterator
3892:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       crend() const noexcept
3893:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3894:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3895:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3896:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
3897:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Capacity:
3898:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3899:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  null-termination.
3900:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
ARM GAS  /tmp/ccOYETru.s 			page 142


3901:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3902:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3903:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3904:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3905:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  null-termination.
3906:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
3907:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3908:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3909:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3910:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3911:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
3912:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3913:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3914:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3915:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3916:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3917:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3918:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3919:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3920:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3921:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3922:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3923:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3924:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3925:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3926:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3927:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3928:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3929:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3930:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3931:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3932:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3933:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3934:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3935:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  setting them to 0.
3937:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3938:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3939:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       resize(size_type __n)
3940:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3941:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3942:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3943:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3944:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3945:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3946:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3947:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cpp_exceptions
3948:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (capacity() > size())
3949:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
3950:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    try
3951:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      { reserve(0); }
3952:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    catch(...)
3953:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      { }
3954:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
3955:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
3956:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
3957:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
ARM GAS  /tmp/ccOYETru.s 			page 143


3958:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3959:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3960:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3961:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  before needing to allocate more memory.
3962:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3963:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
3964:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3965:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
3966:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3967:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3968:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3969:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *          characters.
3970:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3971:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3972:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3973:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3974:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3975:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3976:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
3977:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
3978:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3979:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3980:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3981:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3982:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  data.
3983:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3984:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3985:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
3986:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
3987:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
3988:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Erases the string, making it empty.
3989:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
3990:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3991:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
3992:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
3993:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
3994:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (_M_rep()->_M_is_shared())
3995:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  {
3996:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_rep()->_M_dispose(this->get_allocator());
3997:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    _M_data(_S_empty_rep()._M_refdata());
3998:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  }
3999:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	else
4000:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_rep()->_M_set_length_and_sharable(0);
4001:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4002:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
4003:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // PR 56166: this should not throw.
4004:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
4005:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       clear()
4006:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
4007:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
4008:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4009:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4010:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
4011:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  <code>*this == ""</code>.
4012:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4013:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
4014:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccOYETru.s 			page 144


4015:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->size() == 0; }
4016:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4017:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Element access:
4018:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4019:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
4020:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
4021:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
4022:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4023:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
4024:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
4025:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
4026:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  see at().)
4027:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4028:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
4029:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
4030:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4031:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
4032:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__pos];
4033:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4034:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4035:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4036:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
4037:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
4038:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
4039:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4040:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
4041:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
4042:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
4043:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  see at().)  Unshares the string.
4044:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4045:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
4046:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator[](size_type __pos)
4047:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4048:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
4049:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	// and in C++11 mode.
4050:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
4051:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
4052:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
4053:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_leak();
4054:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__pos];
4055:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4056:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4057:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4058:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
4059:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
4060:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
4061:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
4062:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4063:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4064:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4065:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
4066:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4067:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
4068:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       at(size_type __n) const
4069:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4070:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n >= this->size())
4071:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
ARM GAS  /tmp/ccOYETru.s 			page 145


4072:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4073:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu)"),
4074:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   __n, this->size());
4075:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__n];
4076:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4077:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4078:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4079:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
4080:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
4081:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
4082:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
4083:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4084:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4085:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4086:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
4087:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  unsharing the string.
4088:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4089:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
4090:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       at(size_type __n)
4091:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4092:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__n >= size())
4093:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4094:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4095:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				       "(which is %zu)"),
4096:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   __n, this->size());
4097:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_leak();
4098:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data()[__n];
4099:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4100:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4101:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4102:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4103:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
4104:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element of the %string.
4105:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4106:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
4107:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       front()
4108:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4109:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4110:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](0);
4111:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4112:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4113:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4114:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
4115:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element of the %string.
4116:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4117:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
4118:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       front() const noexcept
4119:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4120:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4121:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](0);
4122:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4123:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4124:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4125:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
4126:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  element of the %string.
4127:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4128:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       reference
ARM GAS  /tmp/ccOYETru.s 			page 146


4129:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       back()
4130:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4131:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4132:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
4133:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4134:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4135:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4136:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
4137:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  last element of the %string.
4138:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4139:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const_reference
4140:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       back() const noexcept
4141:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4142:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4143:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
4144:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4145:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
4146:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4147:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Modifiers:
4148:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4149:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
4150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to append.
4151:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4152:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4153:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4154:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(const basic_string& __str)
4155:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__str); }
4156:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4157:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4158:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a C string.
4159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to append.
4160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4161:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4162:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4163:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(const _CharT* __s)
4164:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__s); }
4165:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4166:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4167:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a character.
4168:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to append.
4169:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4170:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4171:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4172:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(_CharT __c)
4173:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { 
4174:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->push_back(__c);
4175:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
4176:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4177:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4178:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4180:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4181:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
4182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4184:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4185:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
ARM GAS  /tmp/ccOYETru.s 			page 147


4186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4187:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
4188:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4189:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4191:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string_view.
4192:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4194:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4195:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
4196:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4197:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
4198:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{ return this->append(__svt); }
4199:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
4200:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4201:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4202:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
4203:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to append.
4204:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4205:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4206:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4207:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const basic_string& __str);
4208:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4209:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a substring.
4211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to append.
4212:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
4213:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4215:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
4216:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4217:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
4218:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
4219:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
4220:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  remainder of @a __str is appended.
4221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4223:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos);
4224:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4225:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4226:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a C substring.
4227:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to append.
4228:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4230:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4232:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
4233:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4234:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4235:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a C string.
4236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to append.
4237:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4238:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4239:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4240:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(const _CharT* __s)
4241:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4242:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
ARM GAS  /tmp/ccOYETru.s 			page 148


4243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
4244:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4245:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4246:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append multiple characters.
4248:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4249:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to use.
4250:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4251:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4252:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
4253:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4254:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4255:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(size_type __n, _CharT __c);
4256:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4257:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4258:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4259:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4260:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
4261:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4262:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4264:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
4265:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4266:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
4267:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4268:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4269:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a range of characters.
4270:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4271:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4272:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4273:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4274:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
4275:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4276:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
4277:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string&
4278:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
4279:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
4280:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4281:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4282:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4283:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a string_view.
4284:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4285:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4286:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4287:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
4288:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4289:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	append(const _Tp& __svt)
4290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
4291:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4292:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->append(__sv.data(), __sv.size());
4293:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
4294:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4295:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4296:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
4297:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended
4298:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *               from.
4299:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
ARM GAS  /tmp/ccOYETru.s 			page 149


4300:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
4301:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4302:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4303:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
4304:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4305:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
4306:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
4307:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4308:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return append(__sv.data()
4309:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
4310:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
4311:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
4312:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
4313:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4314:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4315:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Append a single character.
4316:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to append.
4317:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4318:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
4319:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       push_back(_CharT __c)
4320:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { 
4321:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
4322:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
4323:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  this->reserve(__len);
4324:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
4325:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
4326:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4327:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4328:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4329:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4330:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
4331:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4332:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4333:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4334:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const basic_string& __str);
4335:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4336:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4337:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4338:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4339:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
4340:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4341:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4342:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
4343:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
4344:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4345:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(basic_string&& __str)
4347:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       noexcept(allocator_traits<_Alloc>::is_always_equal::value)
4348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4349:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->swap(__str);
4350:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
4351:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4352:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
4353:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4354:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4355:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
4356:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to use.
ARM GAS  /tmp/ccOYETru.s 			page 150


4357:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
4358:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4359:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4360:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
4361:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4362:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
4363:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
4364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is larger than the number of available characters in @a
4365:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
4366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4367:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4368:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
4369:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->assign(__str._M_data()
4370:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
4371:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
4372:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4373:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4374:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to a C substring.
4375:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to use.
4376:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4377:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4378:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4379:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
4380:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
4381:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
4382:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4383:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4384:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
4385:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4386:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4387:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
4388:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to use.
4389:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4390:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4391:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
4392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
4393:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  function returns.
4394:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4395:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4396:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(const _CharT* __s)
4397:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4398:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4399:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
4400:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4401:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4402:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4403:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
4404:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
4405:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to use.
4406:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4407:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4408:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
4409:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  character @a __c.
4410:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4411:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4412:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
4413:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
ARM GAS  /tmp/ccOYETru.s 			page 151


4414:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4415:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4416:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
4417:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4418:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4419:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4420:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4421:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
4422:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4423:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
4424:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string&
4425:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
4426:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
4427:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4428:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4429:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4430:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
4431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
4432:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4433:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4434:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4435:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
4436:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
4437:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
4438:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4439:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4440:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4441:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value from a string_view.
4442:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt The source object convertible to string_view.
4443:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4444:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4445:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
4446:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4447:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	assign(const _Tp& __svt)
4448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
4449:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4450:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
4451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
4452:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4453:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4454:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
4455:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
4456:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
4457:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
4458:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4459:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4460:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
4461:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4462:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
4463:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
4464:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4465:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return assign(__sv.data()
4466:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
4467:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
4468:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
4469:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
4470:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 152


4471:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4472:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4473:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4474:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4475:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to insert.
4476:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4477:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4478:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
4479:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
4480:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4481:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4482:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
4483:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4484:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
4485:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
4486:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
4487:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4488:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4489:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
4490:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4491:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __beg  Start of range.
4492:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __end  End of range.
4493:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4494:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4495:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
4496:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4497:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4498:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
4499:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4500:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
4501:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         void
4502:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
4503:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
4504:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4505:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4506:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4507:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
4508:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4509:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4510:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4511:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4512:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
4513:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
4514:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4515:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4516:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
4517:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4518:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
4519:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4520:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4521:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert value of a string.
4522:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4523:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to insert.
4524:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4525:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4526:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4527:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
ARM GAS  /tmp/ccOYETru.s 			page 153


4528:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4529:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4530:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
4531:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4532:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4533:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
4534:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
4535:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4536:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4537:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a substring.
4538:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4539:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  The string to insert.
4540:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
4541:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4542:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4543:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4544:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
4545:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
4546:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4547:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
4548:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
4549:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
4550:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
4551:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
4552:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4553:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4554:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4555:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
4556:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
4557:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
4558:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
4559:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
4560:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4561:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4562:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a C substring.
4563:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4564:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
4565:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
4566:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4567:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4568:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4569:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
4570:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4571:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
4572:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
4573:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
4574:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
4575:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  doesn't change if an error is thrown.
4576:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4577:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4578:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
4579:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4580:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4581:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a C string.
4582:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4583:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
4584:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
ARM GAS  /tmp/ccOYETru.s 			page 154


4585:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4586:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4587:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
4588:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4589:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
4590:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
4591:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
4592:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
4593:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
4594:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4595:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4596:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
4597:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4598:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4599:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
4600:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4601:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4602:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4603:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4604:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
4605:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4606:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to insert.
4607:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4608:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4609:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4610:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
4611:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4612:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
4613:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
4614:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
4615:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4616:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
4617:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4618:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4619:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
4620:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
4621:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			      size_type(0), __n, __c); }
4622:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4623:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4624:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert one character.
4625:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
4626:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  The character to insert.
4627:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
4628:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4629:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4630:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
4631:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
4632:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
4633:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4634:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
4635:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4636:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
4637:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
4638:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4639:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4640:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
4641:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
ARM GAS  /tmp/ccOYETru.s 			page 155


4642:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4643:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4644:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4645:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4646:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4647:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4648:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
4649:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4650:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
4651:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4652:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4653:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
4654:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4655:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
4656:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
4657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4658:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
4659:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
4660:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4661:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4662:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
4663:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4664:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
4665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
4666:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  from.
4667:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
4668:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4669:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4670:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
4671:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4672:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         insert(size_type __pos1, const _Tp& __svt,
4673:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
4674:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
4675:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4676:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0), __sv.data()
4677:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
4678:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
4679:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
4680:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
4681:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4682:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4683:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove characters.
4684:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
4685:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
4686:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4687:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4688:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
4689:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4690:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
4691:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
4692:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
4693:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
4694:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4695:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
4696:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4697:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4698:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
ARM GAS  /tmp/ccOYETru.s 			page 156


4699:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { 
4700:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
4701:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
4702:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
4703:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4704:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4705:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4706:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove one character.
4707:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
4708:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
4709:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4710:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
4711:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
4712:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4713:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
4714:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       erase(iterator __position)
4715:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4716:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
4717:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __position < _M_iend());
4718:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
4719:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
4720:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4721:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4722:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4723:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4724:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4725:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove a range of characters.
4726:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
4727:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
4728:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
4729:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4730:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
4731:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
4732:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4733:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       iterator
4734:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       erase(iterator __first, iterator __last);
4735:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****  
4736:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4737:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4738:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Remove the last character.
4739:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4740:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The string must be non-empty.
4741:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
4742:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
4743:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
4744:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4745:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4746:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	erase(size() - 1, 1);
4747:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4748:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
4749:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4750:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4751:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4752:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4753:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
4754:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to insert.
4755:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
ARM GAS  /tmp/ccOYETru.s 			page 157


4756:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4757:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.
4758:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4759:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4760:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
4761:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
4762:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4763:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
4764:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
4765:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  error is thrown.
4766:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4767:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4768:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
4769:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
4770:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4771:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4772:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4773:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
4774:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4775:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to insert.
4776:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
4777:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
4778:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4779:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
4780:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str.size().
4781:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4782:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4783:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
4784:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
4785:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
4786:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
4787:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
4788:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4789:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4790:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
4791:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
4792:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
4793:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
4794:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
4795:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4796:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4797:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
4798:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4799:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4800:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to insert.
4801:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
4802:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4803:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
4804:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4805:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4806:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4807:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
4808:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
4809:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
4810:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
4811:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4812:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.
ARM GAS  /tmp/ccOYETru.s 			page 158


4813:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4814:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4815:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
4816:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __n2);
4817:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4818:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4819:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
4820:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4821:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4822:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to insert.
4823:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4824:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
4825:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4826:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4827:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4828:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
4829:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
4830:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
4831:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4832:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  change if an error is thrown.
4833:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4834:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4835:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
4836:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4837:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4838:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
4839:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4840:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4841:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4842:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
4843:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4844:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4845:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
4846:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to insert.
4847:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4848:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
4849:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4850:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4851:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
4852:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
4853:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4854:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
4855:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4856:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is thrown.
4857:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4858:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4859:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
4860:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
4861:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
4862:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4863:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4864:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
4865:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4866:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4867:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String value to insert.
4868:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4869:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
ARM GAS  /tmp/ccOYETru.s 			page 159


4870:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4871:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4872:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
4873:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
4874:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
4875:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4876:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4877:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
4878:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
4879:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4880:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4881:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
4882:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4883:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4884:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
4885:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
4886:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4887:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4888:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4889:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4890:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
4891:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4892:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4893:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
4894:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4895:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4896:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
4897:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4898:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4899:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4900:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
4901:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4902:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4903:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4904:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
4905:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4906:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4907:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
4908:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4909:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4910:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4911:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4912:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
4913:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4914:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4915:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4916:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4917:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
4918:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4919:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4920:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
4921:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4922:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4923:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4924:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4925:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4926:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
ARM GAS  /tmp/ccOYETru.s 			page 160


4927:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4928:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to insert.
4929:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4930:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4931:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4932:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4933:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4934:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4935:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4937:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4938:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4939:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4940:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4941:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4942:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4943:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4944:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4945:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
4946:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4947:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4948:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4949:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4950:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4951:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
4952:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4953:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
4954:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4955:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4956:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4957:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4958:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
4959:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
4960:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
4961:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         basic_string&
4962:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4963:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4964:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         {
4965:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4966:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4967:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4968:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4969:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4970:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
4971:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4972:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4973:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4974:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4975:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4976:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4977:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4978:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4979:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4980:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4981:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4982:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4983:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 161


4984:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4985:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4986:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
4987:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4988:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4989:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4990:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4991:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4992:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4993:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
4994:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
4995:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
4996:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4997:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
4998:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4999:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
5000:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
5001:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
5002:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
5003:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5004:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5005:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
5006:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
5007:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
5008:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5009:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
5010:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
5011:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
5012:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
5013:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
5014:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5015:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5016:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201103L
5017:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5018:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
5019:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
5020:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
5021:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
5022:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
5023:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
5024:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5025:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
5026:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
5027:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
5028:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
5029:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  thrown.
5030:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5031:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
5032:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
5033:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
5034:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++11
5035:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5036:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5037:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5038:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5039:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  The position to replace at.
5040:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
ARM GAS  /tmp/ccOYETru.s 			page 162


5041:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
5042:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
5043:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5044:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5045:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
5046:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
5047:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5048:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5049:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
5050:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5051:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5052:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5053:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5054:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
5055:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
5056:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
5057:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
5058:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
5059:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
5060:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5061:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5062:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
5063:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         replace(size_type __pos1, size_type __n1, const _Tp& __svt,
5064:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
5065:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5066:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5067:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
5068:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      __sv.data()
5069:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
5070:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
5071:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5072:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5073:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5074:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5075:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
5076:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           to replace at.
5077:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
5078:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           for the replace.
5079:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
5080:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Reference to this string.
5081:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5082:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5083:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
5084:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
5085:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5086:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5087:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
5088:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5089:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5090:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5091:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     private:
5092:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _Integer>
5093:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string&
5094:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
5095:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    _Integer __val, __true_type)
5096:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
5097:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 163


5098:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InputIterator>
5099:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	basic_string&
5100:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
5101:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
5102:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5103:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
5104:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
5105:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     _CharT __c);
5106:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5107:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string&
5108:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
5109:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		      size_type __n2);
5110:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5111:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
5112:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
5113:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InIterator>
5114:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static _CharT*
5115:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
5116:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
5117:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5118:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
5119:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
5120:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5121:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5122:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5123:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
5124:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _Integer>
5125:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static _CharT*
5126:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
5127:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
5128:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
5129:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 				    __end, __a); }
5130:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5131:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static _CharT*
5132:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
5133:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
5134:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5135:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InIterator>
5136:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static _CharT*
5137:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
5138:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5139:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
5140:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
5141:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         }
5142:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5143:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
5144:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _InIterator>
5145:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static _CharT*
5146:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
5147:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		      input_iterator_tag);
5148:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5149:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
5150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
5151:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<class _FwdIterator>
5152:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         static _CharT*
5153:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
5154:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		     forward_iterator_tag);
ARM GAS  /tmp/ccOYETru.s 			page 164


5155:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5156:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       static _CharT*
5157:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
5158:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     public:
5160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5161:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5162:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Copy substring into C string.
5163:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to copy value into.
5164:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
5165:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
5166:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Number of characters actually copied
5167:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5168:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5169:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
5170:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
5171:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  out_of_range is thrown.
5172:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5173:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5174:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
5175:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5176:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5177:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Swap contents with another string.
5178:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  String to swap with.
5179:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5180:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
5181:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  time.
5182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       void
5184:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       swap(basic_string& __s)
5185:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value);
5186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5187:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // String operations:
5188:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5189:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
5190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5191:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
5192:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  happen.
5193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5194:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const _CharT*
5195:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
5196:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data(); }
5197:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5198:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5199:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
5200:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5201:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
5202:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
5203:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
5204:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
5205:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5206:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       const _CharT*
5207:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
5208:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data(); }
5209:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5210:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5211:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccOYETru.s 			page 165


5212:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
5213:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
5215:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
5216:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5217:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _CharT*
5218:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       data() noexcept
5219:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5220:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_M_leak();
5221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return _M_data();
5222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5223:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
5224:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5225:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5226:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
5227:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5228:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       allocator_type
5229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
5230:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
5231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5232:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5233:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a C substring.
5234:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5235:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
5237:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5238:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5239:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
5240:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5241:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5242:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
5243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5244:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5245:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
5246:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5248:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5249:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a string.
5250:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to locate.
5251:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5252:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5253:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5254:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
5255:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
5256:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found, returns npos.
5257:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5258:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5259:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
5260:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5261:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
5262:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5264:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a C string.
5265:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5266:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5267:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5268:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
ARM GAS  /tmp/ccOYETru.s 			page 166


5269:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
5270:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
5271:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5272:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5273:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5274:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5275:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5276:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5277:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
5278:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5279:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5280:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5281:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character.
5282:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
5283:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5284:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5285:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5286:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
5287:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5288:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5289:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5291:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
5292:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5293:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5294:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5295:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a string_view.
5296:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5297:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5298:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5299:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5300:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5301:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5302:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
5303:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5304:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5305:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5306:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
5307:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5308:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5309:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5310:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5311:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a string.
5312:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to locate.
5313:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5314:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5315:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5316:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
5317:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
5318:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5319:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5320:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5321:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
5322:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5323:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
5324:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5325:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccOYETru.s 			page 167


5326:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
5327:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5328:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5329:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5330:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5331:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5332:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
5333:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5334:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5335:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
5336:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5337:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5338:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
5339:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5340:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5341:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5342:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a C string.
5343:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5344:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
5345:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
5346:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5347:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
5348:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
5349:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
5350:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5351:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5352:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5353:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5354:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5355:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
5356:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5357:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5358:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5359:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
5360:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
5361:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5362:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5363:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5365:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5367:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5368:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5369:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
5370:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5371:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5372:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5373:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
5374:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5375:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5376:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5377:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5378:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5379:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5380:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
5381:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5382:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
ARM GAS  /tmp/ccOYETru.s 			page 168


5383:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5384:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
5385:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5386:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5387:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5388:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5389:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of string.
5390:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5391:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5392:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5393:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5394:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5395:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5396:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5397:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
5398:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5399:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5400:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
5401:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5402:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
5403:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5404:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5405:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
5406:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5407:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5408:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5409:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5410:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5411:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5412:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5413:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5414:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns npos.
5415:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5416:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5417:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
5418:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5419:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5420:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5421:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
5422:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5423:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5424:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5425:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5426:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5427:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5428:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5429:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5430:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
5432:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5433:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5434:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5435:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
5436:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5437:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5438:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5439:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character.
ARM GAS  /tmp/ccOYETru.s 			page 169


5440:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
5441:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5442:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5443:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5444:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
5445:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
5446:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
5447:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
5449:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5450:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5452:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find(__c, __pos); }
5453:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5454:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5455:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5456:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
5457:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5458:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to locate.
5459:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5460:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5461:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5462:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5463:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5464:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
5465:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5466:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5467:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5468:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
5469:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5470:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5471:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5472:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5473:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5474:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5475:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5476:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5477:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5478:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5479:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5480:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5481:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
5482:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5483:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5484:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
5485:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5486:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
5487:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5488:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5489:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
5490:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5491:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5492:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5493:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5494:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5495:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5496:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
ARM GAS  /tmp/ccOYETru.s 			page 170


5497:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5498:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns npos.
5499:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5500:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5501:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
5502:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5503:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5504:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5505:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
5506:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5507:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5508:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5509:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5510:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5511:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5512:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5513:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5514:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5515:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
5516:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5517:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5518:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5519:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
5520:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5521:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5522:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5523:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
5524:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to locate.
5525:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5526:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5527:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5528:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5529:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5530:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5531:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5532:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
5533:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5534:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5535:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5536:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
5537:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5538:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5539:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5540:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5541:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5542:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to locate.
5543:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5544:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5545:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5546:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5547:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5548:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
5549:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5550:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5551:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5552:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
5553:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
ARM GAS  /tmp/ccOYETru.s 			page 171


5554:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5555:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5556:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5557:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
5558:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5559:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5560:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5561:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5562:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
5563:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
5564:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  was found.  If not found, returns npos.
5565:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5566:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5567:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
5568:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5569:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
5570:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5571:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5572:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
5573:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5574:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5575:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
5576:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5577:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5578:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5579:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
5580:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5581:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5582:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5583:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5584:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
5585:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
5586:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5587:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5588:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
5589:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5590:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5591:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5592:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5593:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5594:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
5595:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5596:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5597:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5598:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
5599:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5600:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5601:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5602:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
5603:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5604:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5605:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5606:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a different character.
5607:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
5608:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5609:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5610:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
ARM GAS  /tmp/ccOYETru.s 			page 172


5611:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
5612:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
5613:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
5614:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5615:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5616:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
5617:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5618:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5619:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5620:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5621:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
5622:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5623:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to avoid.
5624:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5625:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5626:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
5627:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5628:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5629:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
5630:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5631:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5632:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5633:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
5634:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5635:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5636:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5637:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5638:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
5639:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5640:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5641:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5642:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5643:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5644:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
5645:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5646:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
5647:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5648:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5649:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
5650:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5651:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
5652:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5653:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5654:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
5655:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5656:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
5658:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5659:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5660:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
5661:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
5662:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
5663:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns npos.
5664:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5666:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
5667:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
ARM GAS  /tmp/ccOYETru.s 			page 173


5668:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5669:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
5670:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5671:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5672:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5673:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5674:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5675:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
5676:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5677:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  npos.
5678:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5679:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5680:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
5681:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5682:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5683:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5684:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
5685:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5686:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5687:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5688:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a different character.
5689:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
5690:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5691:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5692:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5693:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
5694:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
5695:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5696:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5697:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       size_type
5698:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
5699:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5700:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5701:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5702:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5703:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
5704:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5705:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                characters to avoid.
5706:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5707:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5708:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
5709:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5710:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5711:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
5712:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5713:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5714:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5715:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
5716:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5717:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5718:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5719:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5720:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Get a substring.
5721:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
5722:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
5723:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  The new string.
5724:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
ARM GAS  /tmp/ccOYETru.s 			page 174


5725:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5726:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
5727:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
5728:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
5729:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
5730:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5731:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       basic_string
5732:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
5733:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return basic_string(*this,
5734:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
5735:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5736:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5737:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string.
5738:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to compare against.
5739:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5740:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5741:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
5742:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
5743:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
5744:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
5745:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
5746:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
5747:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5748:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5749:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5750:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
5751:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(const basic_string& __str) const
5752:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
5753:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __size = this->size();
5754:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __osize = __str.size();
5755:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
5756:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5757:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
5758:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	if (!__r)
5759:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
5760:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return __r;
5761:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       }
5762:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5763:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5764:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5765:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5766:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
5767:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5768:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
5769:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5770:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
5771:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	compare(const _Tp& __svt) const
5772:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5773:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5774:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   __sv_type __sv = __svt;
5775:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  const size_type __size = this->size();
5776:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
5777:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
5778:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5779:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
5780:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  if (!__r)
5781:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
ARM GAS  /tmp/ccOYETru.s 			page 175


5782:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __r;
5783:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5784:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5785:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5786:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5787:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
5788:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
5789:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
5790:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                against.
5791:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5792:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
5793:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5794:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
5795:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
5796:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5797:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5798:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5799:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
5800:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5801:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5802:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5803:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5804:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
5805:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
5806:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __svt   An object convertible to string_view to compare
5807:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *                 against.
5808:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
5809:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
5810:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5811:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        */
5812:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       template<typename _Tp>
5813:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
5814:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
5815:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
5816:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5817:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
5818:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5819:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  return __sv_type(*this)
5820:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
5821:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
5822:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++17
5823:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5824:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5825:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring to a string.
5826:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5827:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
5828:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to compare against.
5829:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5830:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5831:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
5832:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
5833:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
5834:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
5835:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
5836:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
5837:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
5838:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  strings by calling
ARM GAS  /tmp/ccOYETru.s 			page 176


5839:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
5840:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
5841:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the shorter one is ordered first.
5842:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5843:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
5844:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
5845:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5846:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5847:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
5848:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
5849:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5850:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __str  String to compare against.
5851:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
5852:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
5853:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5854:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5855:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5856:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
5857:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
5858:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
5859:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
5860:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
5861:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
5862:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
5863:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
5864:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  calling
5865:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
5866:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5867:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5868:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5869:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
5870:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
5871:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
5872:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5873:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5874:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare to a C string.
5875:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
5876:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5877:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5878:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
5879:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
5880:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
5881:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
5882:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
5883:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
5884:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
5885:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  ordered first.
5886:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5887:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
5888:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
5889:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5890:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5891:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       // 5 String::compare specification questionable
5892:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5893:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
5894:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5895:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
ARM GAS  /tmp/ccOYETru.s 			page 177


5896:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
5897:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5898:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5899:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5900:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
5901:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
5902:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
5903:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
5904:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
5905:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
5906:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  function then compares the two string by calling
5907:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
5908:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5909:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  one is ordered first.
5910:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5911:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
5912:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
5913:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5914:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       /**
5915:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
5916:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5917:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5918:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __s  character %array to compare against.
5919:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
5920:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5921:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5922:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5923:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
5924:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
5925:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
5926:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
5927:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
5928:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
5929:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
5930:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  function then compares the two strings by calling
5931:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
5932:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5933:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  one is ordered first.
5934:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *
5935:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
5936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****        *  no special meaning.
5937:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       */
5938:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       int
5939:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
5940:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	      size_type __n2) const;
5941:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5942:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cplusplus > 201703L
5943:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
5944:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept
5945:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5946:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5947:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
5948:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       starts_with(_CharT __x) const noexcept
5949:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5950:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5951:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
5952:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       starts_with(const _CharT* __x) const noexcept
ARM GAS  /tmp/ccOYETru.s 			page 178


5953:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5954:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5955:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
5956:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept
5957:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5958:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5959:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
5960:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ends_with(_CharT __x) const noexcept
5961:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5962:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5963:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       bool
5964:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ends_with(const _CharT* __x) const noexcept
5965:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5966:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif // C++20
5967:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5968:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** # ifdef _GLIBCXX_TM_TS_INTERNAL
5969:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       friend void
5970:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,
5971:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 					    void* exc);
5972:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       friend const char*
5973:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ::_txnal_cow_string_c_str(const void *that);
5974:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       friend void
5975:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ::_txnal_cow_string_D1(void *that);
5976:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       friend void
5977:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       ::_txnal_cow_string_D1_commit(void *that);
5978:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** # endif
5979:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   };
5980:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
5981:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5982:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #if __cpp_deduction_guides >= 201606
5983:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
5984:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   template<typename _InputIterator, typename _CharT
5985:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	     = typename iterator_traits<_InputIterator>::value_type,
5986:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5987:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   typename = _RequireInputIter<_InputIterator>,
5988:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5989:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
5990:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
5991:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
5992:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
5993:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   // 3075. basic_string needs deduction guides from basic_string_view
5994:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
5995:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5996:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5997:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
5998:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
5999:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
6000:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
6001:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
6002:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
6003:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>,
6004:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
6005:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
6006:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 		 const _Allocator& = _Allocator())
6007:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
6008:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
6009:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
ARM GAS  /tmp/ccOYETru.s 			page 179


6010:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
6011:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   // operator+
6012:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   /**
6013:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @brief  Concatenate two strings.
6014:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @param __lhs  First string.
6015:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @param __rhs  Last string.
6016:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
6017:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****    */
6018:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6019:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
6020:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 1121              		.loc 2 6020 5 is_stmt 1 view .LVU246
 1122              	.LBB1380:
 1123              	.LBB1376:
 1124              	.LBI1343:
 448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 1125              		.loc 2 448 7 view .LVU247
 1126              	.LBB1374:
 1127              	.LBB1360:
 1128              	.LBI1345:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1129              		.loc 2 190 7 view .LVU248
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1130              		.loc 2 190 7 is_stmt 0 view .LVU249
 1131              	.LBE1360:
 1132              	.LBB1361:
 1133              	.LBI1361:
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 1134              		.loc 2 290 7 is_stmt 1 view .LVU250
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 1135              		.loc 2 290 7 is_stmt 0 view .LVU251
 1136              	.LBE1361:
 1137              	.LBB1362:
 1138              	.LBI1362:
 1139              		.file 11 "/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h"
   1:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
   3:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** //
   5:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  11:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  16:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  20:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
ARM GAS  /tmp/ccOYETru.s 			page 180


  23:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  25:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****  */
  28:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  29:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  32:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  34:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #else
  38:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #endif
  40:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  41:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** {
  43:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  45:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** /**
  46:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  47:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****  * @ingroup allocators
  48:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** */
  49:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** template<typename _Alloc, typename = typename _Alloc::value_type>
  50:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****   struct __alloc_traits
  51:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  52:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  53:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #endif
  54:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****   {
  55:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  56:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  57:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  58:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  59:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  60:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  61:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  62:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  63:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  64:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef value_type&                             reference;
  65:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  66:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     using _Base_type::allocate;
  67:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     using _Base_type::deallocate;
  68:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     using _Base_type::construct;
  69:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     using _Base_type::destroy;
  70:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     using _Base_type::max_size;
  71:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  72:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****   private:
  73:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     template<typename _Ptr>
  74:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       using __is_custom_pointer
  75:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  76:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  77:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  78:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****   public:
  79:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
ARM GAS  /tmp/ccOYETru.s 			page 181


  80:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  81:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  82:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  83:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
  84:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 					      std::forward<_Args>(__args)...)))
  85:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       {
  86:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::__to_address(__p),
  87:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  88:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       }
  89:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  90:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  91:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     template<typename _Ptr>
  92:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  93:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  94:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
  95:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::__to_address(__p)); }
  96:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h **** 
  97:/usr/include/newlib/c++/9.2.1/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 1140              		.loc 11 97 19 is_stmt 1 view .LVU252
 1141              	.LBB1363:
 1142              	.LBI1363:
 1143              		.file 12 "/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h"
   1:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****  */
  29:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  30:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  33:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  34:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  35:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
ARM GAS  /tmp/ccOYETru.s 			page 182


  36:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  39:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  40:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  41:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** {
  43:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  45:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   struct __allocator_traits_base
  46:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   {
  47:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  48:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  49:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  50:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  51:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  52:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  53:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  54:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  55:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   protected:
  56:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  57:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  58:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  59:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  60:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  61:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  62:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  63:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  64:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  65:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  66:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  67:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  68:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  69:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  70:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  71:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  72:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   };
  73:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  74:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  75:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     using __alloc_rebind
  76:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  77:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  78:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   /**
  79:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****    * @ingroup allocators
  81:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   */
  82:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  84:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     {
  85:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator type
  86:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocated type
  88:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  90:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
  91:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  92:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
ARM GAS  /tmp/ccOYETru.s 			page 183


  93:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  94:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
  95:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  96:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
  97:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     private:
  98:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
  99:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 100:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	struct _Ptr
 101:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{
 102:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 103:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	};
 104:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 105:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 106:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 107:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{
 108:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 109:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	};
 110:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 111:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 112:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 113:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	struct _Diff
 114:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 115:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 116:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 117:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 118:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 119:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 120:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 121:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 122:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 123:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 124:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 125:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 126:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 127:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 128:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     public:
 129:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 130:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 131:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 132:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 133:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 134:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 135:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 136:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 137:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 138:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 139:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 140:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 141:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 142:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 143:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 144:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 145:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 146:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 147:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 148:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 149:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
ARM GAS  /tmp/ccOYETru.s 			page 184


 150:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 151:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 152:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 153:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 154:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 155:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 156:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 157:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 158:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 159:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 160:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 161:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 162:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   The allocator's size type
 163:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 164:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 165:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 166:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 167:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 168:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 169:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 170:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 171:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 172:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 173:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * otherwise @c false_type
 174:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 175:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 176:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 177:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 178:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 179:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 180:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 181:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 182:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * otherwise @c false_type
 183:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 184:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 185:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 186:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 187:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 188:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 189:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 190:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 191:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * otherwise @c false_type
 192:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 193:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using propagate_on_container_swap
 194:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 195:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 196:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 197:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 198:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 199:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 200:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 201:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 202:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using is_always_equal
 203:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 204:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 205:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp>
 206:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
ARM GAS  /tmp/ccOYETru.s 			page 185


 207:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp>
 208:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 209:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 210:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     private:
 211:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 212:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static auto
 213:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 214:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 215:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 216:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 217:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 218:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static pointer
 219:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 220:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 221:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 222:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 223:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	struct __construct_helper
 224:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{
 225:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 226:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 227:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 228:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	    static true_type __test(int);
 229:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 230:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  template<typename>
 231:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	    static false_type __test(...);
 232:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 233:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 234:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	};
 235:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 236:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 237:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	using __has_construct
 238:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 239:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 240:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 241:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 242:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 243:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 244:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 245:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 246:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 247:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static
 248:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 249:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 250:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 251:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(::new((void*)__p)
 252:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 			  _Tp(std::forward<_Args>(__args)...)))
 253:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 254:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 255:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 256:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static auto
 257:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 258:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 259:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 260:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 261:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 262:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 263:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static void
ARM GAS  /tmp/ccOYETru.s 			page 186


 264:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 265:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(__p->~_Tp()))
 266:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 267:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 268:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 269:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static auto
 270:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 271:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 272:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 273:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 274:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 275:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static size_type
 276:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 277:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{
 278:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 279:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 280:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 281:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	    / sizeof(value_type);
 282:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	}
 283:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 284:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 285:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static auto
 286:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 287:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 288:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 289:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 290:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 291:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static _Alloc2
 292:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 293:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ return __a; }
 294:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 295:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     public:
 296:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 297:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 298:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 299:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 300:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 301:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 302:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 303:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 304:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 305:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 306:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 307:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 308:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 309:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 310:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 311:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 312:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 313:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 314:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *          of type @c value_type
 315:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 316:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 317:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 318:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 319:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 320:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
ARM GAS  /tmp/ccOYETru.s 			page 187


 321:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 322:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 323:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 324:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 325:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 326:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 327:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 328:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 329:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 330:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 331:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       static void
 332:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 333:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 334:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 335:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 336:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 337:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 338:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 339:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 340:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 341:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 342:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 343:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 344:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  arguments @a __args...
 345:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 346:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 347:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 348:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 349:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 350:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 351:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 352:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 353:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 354:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 355:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 356:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 357:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 358:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 359:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 360:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 361:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Tp>
 362:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static void destroy(_Alloc& __a, _Tp* __p)
 363:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 364:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 365:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 366:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 367:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 368:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 369:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 370:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 371:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 372:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 373:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 374:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       static size_type max_size(const _Alloc& __a) noexcept
 375:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 376:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 377:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
ARM GAS  /tmp/ccOYETru.s 			page 188


 378:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 379:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 380:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 381:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 382:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 383:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 384:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 385:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       static _Alloc
 386:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 387:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 388:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     };
 389:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 390:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 391:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****   template<typename _Tp>
 392:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 393:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****     {
 394:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator type
 395:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 396:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocated type
 397:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using value_type = _Tp;
 398:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 399:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator's pointer type.
 400:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using pointer = _Tp*;
 401:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 402:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 403:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 404:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 405:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 406:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using void_pointer = void*;
 407:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 408:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 409:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 410:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 411:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator's difference type
 412:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 413:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 414:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// The allocator's size type
 415:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using size_type = std::size_t;
 416:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 417:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 418:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 419:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 420:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 421:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 422:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 423:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 424:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 425:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 426:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 427:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       using is_always_equal = true_type;
 428:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 429:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Up>
 430:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 431:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 432:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Up>
 433:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 434:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 189


 435:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 436:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 437:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 438:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 439:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 440:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 441:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 442:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 443:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 444:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 445:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 446:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 447:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 448:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 449:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 450:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 451:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 452:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *          of type @c value_type
 453:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 454:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 455:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 456:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 457:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 458:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 459:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 460:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 461:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 462:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 463:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 464:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 465:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 466:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 467:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 468:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       static void
 469:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 470:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 471:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 472:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 473:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Up
 474:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 475:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 476:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 477:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 478:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 479:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 480:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 481:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static void
 482:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 483:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 484:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 485:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 486:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 487:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 488:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 489:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 490:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *
 491:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
ARM GAS  /tmp/ccOYETru.s 			page 190


 492:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 493:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       template<typename _Up>
 494:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	static void
 495:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	destroy(allocator_type& __a, _Up* __p)
 496:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 497:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 498:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 499:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 500:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 501:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 502:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 503:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 504:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       static size_type
 505:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       max_size(const allocator_type& __a) noexcept
 506:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return __a.max_size(); }
 507:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h **** 
 508:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       /**
 509:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 510:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 511:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****        *  @return @c __rhs
 512:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       */
 513:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       static allocator_type
 514:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 1144              		.loc 12 514 7 view .LVU253
 1145              	.LBB1364:
 1146              	.LBI1364:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1147              		.loc 3 141 7 view .LVU254
 1148              	.LBB1365:
 1149              	.LBI1365:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1150              		.loc 4 83 7 view .LVU255
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1151              		.loc 4 83 7 is_stmt 0 view .LVU256
 1152              	.LBE1365:
 1153              	.LBE1364:
 1154              	.LBE1363:
 1155              	.LBE1362:
 1156              	.LBB1366:
 1157              	.LBI1347:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 1158              		.loc 2 159 2 is_stmt 1 view .LVU257
 1159              	.LBB1352:
 1160              	.LBB1349:
 1161              	.LBI1349:
 1162              		.loc 5 99 5 view .LVU258
 1163              		.loc 5 99 5 is_stmt 0 view .LVU259
 1164              	.LBE1349:
 1165              	.LBB1350:
 1166              	.LBI1350:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1167              		.loc 3 141 7 is_stmt 1 view .LVU260
 1168              	.LBB1351:
 1169              	.LBI1351:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1170              		.loc 4 83 7 view .LVU261
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 191


 1171              		.loc 4 83 7 is_stmt 0 view .LVU262
 1172              	.LBE1351:
 1173              	.LBE1350:
 1174              	.LBE1352:
 1175              	.LBE1366:
 1176              	.LBB1367:
 1177              	.LBI1367:
 1178              		.loc 3 153 7 is_stmt 1 view .LVU263
 1179              	.LBB1368:
 1180              	.LBI1368:
 1181              		.loc 4 89 7 view .LVU264
 1182              	.LBE1368:
 1183              	.LBE1367:
 1184              	.LBB1369:
 1185              	.LBI1369:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1186              		.loc 2 186 7 view .LVU265
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1187              		.loc 2 186 7 is_stmt 0 view .LVU266
 1188              	.LBE1369:
 1189              	.LBB1370:
 1190              	.LBI1370:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1191              		.loc 2 186 7 is_stmt 1 view .LVU267
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1192              		.loc 2 186 7 is_stmt 0 view .LVU268
 1193              	.LBE1370:
 1194              	.LBB1371:
 1195              	.LBI1371:
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 1196              		.loc 2 936 7 is_stmt 1 view .LVU269
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 1197              		.loc 2 936 7 is_stmt 0 view .LVU270
 1198              	.LBE1371:
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1199              		.loc 2 451 9 view .LVU271
 1200 001c D1E90712 		ldrd	r1, r2, [r1, #28]
 1201              	.LVL56:
 1202              	.LBB1372:
 1203              	.LBI1353:
 263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
 1204              		.loc 2 263 9 is_stmt 1 view .LVU272
 1205              	.LBB1359:
 1206              	.LBB1358:
 1207              	.LBI1355:
 243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 std::__false_type)
 1208              		.loc 2 243 9 view .LVU273
 1209              	.LBB1357:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1210              		.loc 2 247 11 is_stmt 0 view .LVU274
 1211 0020 0A44     		add	r2, r2, r1
 1212 0022 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 1213              	.LVL57:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1214              		.loc 2 247 11 view .LVU275
 1215              	.LBE1357:
 1216              	.LBE1358:
ARM GAS  /tmp/ccOYETru.s 			page 192


 1217              	.LBE1359:
 1218              	.LBE1372:
 1219              	.LBE1374:
 1220              	.LBE1376:
 1221              	.LBB1377:
 1222              	.LBI1377:
1221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
 1223              		.loc 2 1221 7 is_stmt 1 view .LVU276
 1224              	.LBB1378:
1222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1225              		.loc 2 1222 55 is_stmt 0 view .LVU277
 1226 0026 6268     		ldr	r2, [r4, #4]
 1227 0028 F159     		ldr	r1, [r6, r7]
 1228 002a 2846     		mov	r0, r5
 1229 002c FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
 1230              	.LVL58:
1222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1231              		.loc 2 1222 55 view .LVU278
 1232              	.LBE1378:
 1233              	.LBE1377:
 1234              	.LBE1380:
 1235              	.LBE1385:
  41:Mu/logistics/menuitem.cpp **** 
 1236              		.loc 1 41 1 view .LVU279
 1237 0030 2846     		mov	r0, r5
 1238 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  41:Mu/logistics/menuitem.cpp **** 
 1239              		.loc 1 41 1 view .LVU280
 1240              		.cfi_endproc
 1241              	.LFE2253:
 1243              		.section	.text._ZN2mu8MenuItem5ValueB5cxx11Ev,"ax",%progbits
 1244              		.align	1
 1245              		.p2align 2,,3
 1246              		.global	_ZN2mu8MenuItem5ValueB5cxx11Ev
 1247              		.syntax unified
 1248              		.thumb
 1249              		.thumb_func
 1250              		.fpu fpv5-d16
 1252              	_ZN2mu8MenuItem5ValueB5cxx11Ev:
 1253              	.LVL59:
 1254              	.LFB2254:
  43:Mu/logistics/menuitem.cpp ****     return values[index];
 1255              		.loc 1 43 31 is_stmt 1 view -0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 0
 1258              		@ frame_needed = 0, uses_anonymous_args = 0
  44:Mu/logistics/menuitem.cpp **** }
 1259              		.loc 1 44 5 view .LVU282
 1260              	.LBB1386:
 1261              	.LBB1387:
 1262              		.loc 7 1043 34 is_stmt 0 view .LVU283
 1263 0000 0A68     		ldr	r2, [r1]
 1264              		.loc 7 1043 39 view .LVU284
 1265 0002 496B     		ldr	r1, [r1, #52]
 1266              	.LVL60:
 1267              		.loc 7 1043 34 view .LVU285
 1268 0004 02EB4202 		add	r2, r2, r2, lsl #1
ARM GAS  /tmp/ccOYETru.s 			page 193


 1269              	.LBE1387:
 1270              	.LBE1386:
  43:Mu/logistics/menuitem.cpp ****     return values[index];
 1271              		.loc 1 43 31 view .LVU286
 1272 0008 38B5     		push	{r3, r4, r5, lr}
 1273              		.cfi_def_cfa_offset 16
 1274              		.cfi_offset 3, -16
 1275              		.cfi_offset 4, -12
 1276              		.cfi_offset 5, -8
 1277              		.cfi_offset 14, -4
 1278              	.LBB1389:
 1279              	.LBB1390:
 1280              	.LBB1391:
 1281              	.LBB1392:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 1282              		.loc 2 193 51 view .LVU287
 1283 000a 00F10805 		add	r5, r0, #8
 1284              	.LBE1392:
 1285              	.LBE1391:
 1286              	.LBE1390:
 1287              	.LBE1389:
  43:Mu/logistics/menuitem.cpp ****     return values[index];
 1288              		.loc 1 43 31 view .LVU288
 1289 000e 0446     		mov	r4, r0
 1290              	.LBB1425:
 1291              	.LBB1422:
 1292              	.LBB1393:
 1293              	.LBB1394:
 1294              	.LBB1395:
 1295              	.LBB1396:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1296              		.loc 2 247 11 view .LVU289
 1297 0010 4FF00003 		mov	r3, #0
 1298              	.LBE1396:
 1299              	.LBE1395:
 1300              	.LBE1394:
 1301              	.LBE1393:
 1302              	.LBE1422:
 1303              	.LBE1425:
 1304              	.LBB1426:
 1305              	.LBI1386:
1040:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 1306              		.loc 7 1040 7 is_stmt 1 view .LVU290
 1307              	.LVL61:
1040:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 1308              		.loc 7 1040 7 is_stmt 0 view .LVU291
 1309              	.LBE1426:
 1310              	.LBB1427:
 1311              	.LBB1423:
 1312              	.LBB1402:
 1313              	.LBB1403:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 1314              		.loc 2 160 46 view .LVU292
 1315 0014 0560     		str	r5, [r0]
 1316              	.LBE1403:
 1317              	.LBE1402:
 1318              	.LBE1423:
ARM GAS  /tmp/ccOYETru.s 			page 194


 1319              	.LBE1427:
 1320              	.LBB1428:
 1321              	.LBB1388:
 1322              		.loc 7 1043 39 view .LVU293
 1323 0016 01EBC205 		add	r5, r1, r2, lsl #3
 1324              	.LVL62:
 1325              		.loc 7 1043 39 view .LVU294
 1326              	.LBE1388:
 1327              	.LBE1428:
 1328              	.LBB1429:
 1329              	.LBI1389:
 448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 1330              		.loc 2 448 7 is_stmt 1 view .LVU295
 1331              	.LBB1424:
 1332              	.LBB1408:
 1333              	.LBI1391:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1334              		.loc 2 190 7 view .LVU296
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1335              		.loc 2 190 7 is_stmt 0 view .LVU297
 1336              	.LBE1408:
 1337              	.LBB1409:
 1338              	.LBI1409:
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 1339              		.loc 2 290 7 is_stmt 1 view .LVU298
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 1340              		.loc 2 290 7 is_stmt 0 view .LVU299
 1341              	.LBE1409:
 1342              	.LBB1410:
 1343              	.LBI1410:
 1344              		.loc 11 97 19 is_stmt 1 view .LVU300
 1345              	.LBB1411:
 1346              	.LBI1411:
 1347              		.loc 12 514 7 view .LVU301
 1348              	.LBB1412:
 1349              	.LBI1412:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1350              		.loc 3 141 7 view .LVU302
 1351              	.LBB1413:
 1352              	.LBI1413:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1353              		.loc 4 83 7 view .LVU303
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1354              		.loc 4 83 7 is_stmt 0 view .LVU304
 1355              	.LBE1413:
 1356              	.LBE1412:
 1357              	.LBE1411:
 1358              	.LBE1410:
 1359              	.LBB1414:
 1360              	.LBI1402:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 1361              		.loc 2 159 2 is_stmt 1 view .LVU305
 1362              	.LBB1407:
 1363              	.LBB1404:
 1364              	.LBI1404:
 1365              		.loc 5 99 5 view .LVU306
 1366              		.loc 5 99 5 is_stmt 0 view .LVU307
ARM GAS  /tmp/ccOYETru.s 			page 195


 1367              	.LBE1404:
 1368              	.LBB1405:
 1369              	.LBI1405:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1370              		.loc 3 141 7 is_stmt 1 view .LVU308
 1371              	.LBB1406:
 1372              	.LBI1406:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1373              		.loc 4 83 7 view .LVU309
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1374              		.loc 4 83 7 is_stmt 0 view .LVU310
 1375              	.LBE1406:
 1376              	.LBE1405:
 1377              	.LBE1407:
 1378              	.LBE1414:
 1379              	.LBB1415:
 1380              	.LBI1415:
 1381              		.loc 3 153 7 is_stmt 1 view .LVU311
 1382              	.LBB1416:
 1383              	.LBI1416:
 1384              		.loc 4 89 7 view .LVU312
 1385              	.LBE1416:
 1386              	.LBE1415:
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1387              		.loc 2 451 9 is_stmt 0 view .LVU313
 1388 001a 51F83210 		ldr	r1, [r1, r2, lsl #3]
 1389              	.LBB1417:
 1390              	.LBI1417:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1391              		.loc 2 186 7 is_stmt 1 view .LVU314
 1392              	.LVL63:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1393              		.loc 2 186 7 is_stmt 0 view .LVU315
 1394              	.LBE1417:
 1395              	.LBB1418:
 1396              	.LBI1418:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1397              		.loc 2 186 7 is_stmt 1 view .LVU316
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1398              		.loc 2 186 7 is_stmt 0 view .LVU317
 1399              	.LBE1418:
 1400              	.LBB1419:
 1401              	.LBI1419:
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 1402              		.loc 2 936 7 is_stmt 1 view .LVU318
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 1403              		.loc 2 936 7 is_stmt 0 view .LVU319
 1404              	.LBE1419:
 1405              	.LBB1420:
 1406              	.LBI1393:
 263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
 1407              		.loc 2 263 9 is_stmt 1 view .LVU320
 1408              	.LBB1400:
 1409              	.LBB1398:
 1410              	.LBI1395:
 243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 std::__false_type)
 1411              		.loc 2 243 9 view .LVU321
ARM GAS  /tmp/ccOYETru.s 			page 196


 1412              	.LBE1398:
 1413              	.LBE1400:
 1414              	.LBE1420:
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1415              		.loc 2 451 9 is_stmt 0 view .LVU322
 1416 001e 6A68     		ldr	r2, [r5, #4]
 1417              	.LBB1421:
 1418              	.LBB1401:
 1419              	.LBB1399:
 1420              	.LBB1397:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1421              		.loc 2 247 11 view .LVU323
 1422 0020 0A44     		add	r2, r2, r1
 1423              	.LVL64:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1424              		.loc 2 247 11 view .LVU324
 1425 0022 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 1426              	.LVL65:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1427              		.loc 2 247 11 view .LVU325
 1428              	.LBE1397:
 1429              	.LBE1399:
 1430              	.LBE1401:
 1431              	.LBE1421:
 1432              	.LBE1424:
 1433              	.LBE1429:
  45:Mu/logistics/menuitem.cpp **** 
 1434              		.loc 1 45 1 view .LVU326
 1435 0026 2046     		mov	r0, r4
 1436 0028 38BD     		pop	{r3, r4, r5, pc}
  45:Mu/logistics/menuitem.cpp **** 
 1437              		.loc 1 45 1 view .LVU327
 1438              		.cfi_endproc
 1439              	.LFE2254:
 1441 002a 00BF     		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_,"
 1442              		.align	1
 1443              		.p2align 2,,3
 1444              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_
 1445              		.syntax unified
 1446              		.thumb
 1447              		.thumb_func
 1448              		.fpu fpv5-d16
 1450              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_:
 1451              	.LVL66:
 1452              	.LFB2510:
 1453              		.file 13 "/usr/include/newlib/c++/9.2.1/bits/vector.tcc"
   1:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
   3:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** //
   5:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  11:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
ARM GAS  /tmp/ccOYETru.s 			page 197


  12:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  16:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  20:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  25:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** /*
  26:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  *
  27:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  *
  30:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  *
  38:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  *
  39:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  *
  42:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  */
  50:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  51:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****  */
  55:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  56:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  59:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** {
  61:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
  64:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     void
  66:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  67:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     reserve(size_type __n)
  68:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     {
ARM GAS  /tmp/ccOYETru.s 			page 198


  69:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       if (__n > this->max_size())
  70:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  71:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       if (this->capacity() < __n)
  72:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	{
  73:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  const size_type __old_size = size();
  74:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  pointer __tmp;
  75:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
  76:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  77:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    {
  78:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  79:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  80:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  81:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
  82:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  else
  83:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
  84:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    {
  85:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  86:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  87:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  88:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  89:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			    _M_get_Tp_allocator());
  90:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
  91:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  92:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  93:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  94:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			- this->_M_impl._M_start);
  95:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  96:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  97:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  98:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	}
  99:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     }
 100:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
 101:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 102:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 103:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     template<typename... _Args>
 104:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus > 201402L
 105:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 106:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #else
 107:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       void
 108:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
 109:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 110:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       emplace_back(_Args&&... __args)
 111:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       {
 112:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 113:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  {
 114:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 115:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 116:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 117:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 118:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 119:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  }
 120:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	else
 121:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 122:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus > 201402L
 123:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	return back();
 124:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
 125:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       }
ARM GAS  /tmp/ccOYETru.s 			page 199


 126:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
 127:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
 128:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 129:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 130:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 131:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 132:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 133:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #else
 134:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 135:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
 136:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     {
 137:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       const size_type __n = __position - begin();
 138:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 139:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	if (__position == end())
 140:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  {
 141:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 142:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 143:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 				     __x);
 144:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 145:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 146:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  }
 147:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	else
 148:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  {
 149:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 150:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
 151:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 152:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 153:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 154:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 155:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #else
 156:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 157:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
 158:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  }
 159:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       else
 160:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 161:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 162:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #else
 163:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	_M_realloc_insert(__position, __x);
 164:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
 165:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
 166:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 167:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     }
 168:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
 169:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 170:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 171:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 172:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     _M_erase(iterator __position)
 173:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     {
 174:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       if (__position + 1 != end())
 175:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 176:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       --this->_M_impl._M_finish;
 177:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 178:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 179:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       return __position;
 180:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     }
 181:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
 182:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
ARM GAS  /tmp/ccOYETru.s 			page 200


 183:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 184:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 185:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 186:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     {
 187:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       if (__first != __last)
 188:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	{
 189:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  if (__last != end())
 190:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 191:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 192:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	}
 193:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       return __first;
 194:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     }
 195:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 
 196:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 197:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 198:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 1454              		.loc 13 198 5 is_stmt 1 view -0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 8
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 1458              	.LBB1605:
 199:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 200:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     {
 201:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       if (&__x != this)
 1459              		.loc 13 201 7 is_stmt 0 view .LVU329
 1460 0000 8142     		cmp	r1, r0
 1461              	.LBE1605:
 198:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 1462              		.loc 13 198 5 view .LVU330
 1463 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1464              		.cfi_def_cfa_offset 36
 1465              		.cfi_offset 4, -36
 1466              		.cfi_offset 5, -32
 1467              		.cfi_offset 6, -28
 1468              		.cfi_offset 7, -24
 1469              		.cfi_offset 8, -20
 1470              		.cfi_offset 9, -16
 1471              		.cfi_offset 10, -12
 1472              		.cfi_offset 11, -8
 1473              		.cfi_offset 14, -4
 1474 0006 0746     		mov	r7, r0
 1475 0008 83B0     		sub	sp, sp, #12
 1476              		.cfi_def_cfa_offset 48
 1477              	.LBB1820:
 1478              		.loc 13 201 7 view .LVU331
 1479 000a 41D0     		beq	.L57
 1480 000c 8946     		mov	r9, r1
 1481              	.LBB1606:
 1482              	.LBB1607:
 202:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	{
 203:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 204:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 205:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 206:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    {
 207:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 208:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 209:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	        {
ARM GAS  /tmp/ccOYETru.s 			page 201


 210:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 211:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		  this->clear();
 212:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 213:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 214:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 				- this->_M_impl._M_start);
 215:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 216:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 217:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 218:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 		}
 219:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 220:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 221:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
 222:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** #endif
 223:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 224:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  if (__xlen > capacity())
 1483              		.loc 13 224 15 view .LVU332
 1484 000e 0568     		ldr	r5, [r0]
 1485              	.LBE1607:
 1486              	.LBB1801:
 1487              	.LBB1802:
 916:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1488              		.loc 7 916 50 view .LVU333
 1489 0010 564B     		ldr	r3, .L96
 1490              	.LBE1802:
 1491              	.LBE1801:
 223:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  if (__xlen > capacity())
 1492              		.loc 13 223 20 view .LVU334
 1493 0012 D1E90048 		ldrd	r4, r8, [r1]
 1494              	.LBB1806:
 1495              	.LBI1801:
 915:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1496              		.loc 7 915 7 is_stmt 1 view .LVU335
 1497              	.LVL67:
 915:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1498              		.loc 7 915 7 is_stmt 0 view .LVU336
 1499              	.LBE1806:
 1500              	.LBB1807:
 1501              	.LBB1608:
 1502              	.LBB1609:
 997:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1503              		.loc 7 997 5 view .LVU337
 1504 0016 8168     		ldr	r1, [r0, #8]
 1505              	.LVL68:
 997:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1506              		.loc 7 997 5 view .LVU338
 1507              	.LBE1609:
 1508              	.LBE1608:
 1509              	.LBE1807:
 1510              	.LBB1808:
 1511              	.LBB1803:
 916:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1512              		.loc 7 916 50 view .LVU339
 1513 0018 A8EB0402 		sub	r2, r8, r4
 1514              	.LBE1803:
 1515              	.LBE1808:
 1516              	.LBB1809:
 1517              	.LBB1613:
ARM GAS  /tmp/ccOYETru.s 			page 202


 1518              	.LBB1610:
 997:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1519              		.loc 7 997 5 view .LVU340
 1520 001c 491B     		subs	r1, r1, r5
 1521              	.LBE1610:
 1522              	.LBE1613:
 1523              	.LBE1809:
 1524              	.LBB1810:
 1525              	.LBB1804:
 916:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1526              		.loc 7 916 50 view .LVU341
 1527 001e 4FEAE20A 		asr	r10, r2, #3
 1528 0022 0192     		str	r2, [sp, #4]
 1529              	.LBE1804:
 1530              	.LBE1810:
 1531              	.LBB1811:
 1532              	.LBB1614:
 1533              	.LBB1611:
 997:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1534              		.loc 7 997 5 view .LVU342
 1535 0024 C910     		asrs	r1, r1, #3
 1536              	.LBE1611:
 1537              	.LBE1614:
 1538              	.LBE1811:
 1539              	.LBB1812:
 1540              	.LBB1805:
 916:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1541              		.loc 7 916 50 view .LVU343
 1542 0026 03FB0AFA 		mul	r10, r3, r10
 1543              	.LVL69:
 916:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1544              		.loc 7 916 50 view .LVU344
 1545              	.LBE1805:
 1546              	.LBE1812:
 1547              	.LBB1813:
 1548              	.LBB1615:
 1549              	.LBI1608:
 995:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 1550              		.loc 7 995 7 is_stmt 1 view .LVU345
 1551              	.LBB1612:
 997:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1552              		.loc 7 997 5 is_stmt 0 view .LVU346
 1553 002a 03FB01F1 		mul	r1, r3, r1
 1554              	.LBE1612:
 1555              	.LBE1615:
 1556              		.loc 13 224 4 view .LVU347
 1557 002e 5145     		cmp	r1, r10
 1558 0030 32D3     		bcc	.L93
 1559              	.LVL70:
 225:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    {
 226:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 227:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 						   __x.end());
 228:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 229:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 230:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 231:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 232:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			    - this->_M_impl._M_start);
ARM GAS  /tmp/ccOYETru.s 			page 203


 233:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 234:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 235:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
 236:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  else if (size() >= __xlen)
 1560              		.loc 13 236 20 view .LVU348
 1561 0032 4668     		ldr	r6, [r0, #4]
 1562              	.LBB1616:
 1563              	.LBI1616:
 915:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1564              		.loc 7 915 7 is_stmt 1 view .LVU349
 1565              	.LVL71:
 1566              	.LBB1617:
 916:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
 1567              		.loc 7 916 50 is_stmt 0 view .LVU350
 1568 0034 711B     		subs	r1, r6, r5
 1569 0036 4FEAE10B 		asr	fp, r1, #3
 1570 003a 03FB0BFB 		mul	fp, r3, fp
 1571              	.LBE1617:
 1572              	.LBE1616:
 1573              		.loc 13 236 9 view .LVU351
 1574 003e DA45     		cmp	r10, fp
 1575 0040 66D8     		bhi	.L71
 1576              	.LVL72:
 1577              	.LBB1618:
 1578              	.LBB1619:
 1579              	.LBB1620:
 1580              	.LBB1621:
 1581              	.LBB1622:
 1582              	.LBB1623:
 1583              	.LBB1624:
 1584              		.file 14 "/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h"
   1:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** /*
  26:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  *
ARM GAS  /tmp/ccOYETru.s 			page 204


  27:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  *
  30:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  *
  38:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  *
  39:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  *
  42:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  */
  50:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****  */
  55:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  56:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  59:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #endif
  75:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  76:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  77:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** {
  78:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  79:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  80:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
  81:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  82:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  83:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
ARM GAS  /tmp/ccOYETru.s 			page 205


  84:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<bool _BoolType>
  85:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     struct __iter_swap
  86:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
  87:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  88:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	static void
  89:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  90:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	{
  91:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
  92:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    _ValueType1;
  93:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
  94:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  *__a = *__b;
  95:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  *__b = __tmp;
  96:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	}
  97:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     };
  98:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
  99:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<>
 100:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 101:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 102:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 103:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	static void
 104:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 105:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	{
 106:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 107:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	}
 108:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     };
 109:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #endif
 110:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 111:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   /**
 112:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 113:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 114:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 115:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 116:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @return   Nothing.
 117:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *
 118:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 119:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  iterators themselves.
 120:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   */
 121:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 122:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline void
 123:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 124:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 125:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       // concept requirements
 126:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 127:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 128:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 129:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 130:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 131:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 132:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 133:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	_ValueType1;
 134:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 135:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	_ValueType2;
 136:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 137:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 138:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 				  _ValueType2>)
 139:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 140:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 				  _ValueType1>)
ARM GAS  /tmp/ccOYETru.s 			page 206


 141:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 142:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 143:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	_ReferenceType1;
 144:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 145:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	_ReferenceType2;
 146:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 147:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 148:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 149:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 150:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #else
 151:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 152:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #endif
 153:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     }
 154:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 155:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   /**
 156:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 157:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 158:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 159:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 160:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 161:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 162:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *
 163:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 164:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 165:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 166:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   */
 167:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 168:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     _ForwardIterator2
 169:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 170:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 171:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 172:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       // concept requirements
 173:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 174:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 175:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 176:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 177:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 178:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 179:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 180:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 181:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       return __first2;
 182:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     }
 183:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 184:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   /**
 185:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 186:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 187:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 188:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 189:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 190:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *
 191:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 192:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 193:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 194:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   */
 195:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 196:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 197:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline const _Tp&
ARM GAS  /tmp/ccOYETru.s 			page 207


 198:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 199:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 200:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       // concept requirements
 201:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 202:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 203:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       if (__b < __a)
 204:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	return __b;
 205:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       return __a;
 206:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     }
 207:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 208:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   /**
 209:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 210:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 211:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 212:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 213:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 214:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *
 215:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 216:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 217:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 218:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   */
 219:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 220:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 221:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline const _Tp&
 222:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 223:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 224:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       // concept requirements
 225:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 226:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 227:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       if (__a < __b)
 228:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	return __b;
 229:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       return __a;
 230:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     }
 231:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 232:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   /**
 233:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 234:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 235:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 236:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 237:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 238:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 239:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *
 240:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 241:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 242:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   */
 243:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 244:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 245:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline const _Tp&
 246:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 247:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 248:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 249:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 250:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	return __b;
 251:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       return __a;
 252:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     }
 253:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 254:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   /**
ARM GAS  /tmp/ccOYETru.s 			page 208


 255:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 256:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 257:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 258:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 259:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 260:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 261:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *
 262:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 263:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 264:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   */
 265:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 266:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 267:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline const _Tp&
 268:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 269:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 270:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 271:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 272:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	return __b;
 273:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       return __a;
 274:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     }
 275:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 276:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 277:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 278:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _Iterator>
 279:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline _Iterator
 280:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 281:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 282:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     { return __it; }
 283:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 284:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 285:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 286:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 287:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _From, typename _To>
 288:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline _From
 289:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 290:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 291:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 292:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 293:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _Iterator>
 294:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     inline _Iterator
 295:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 296:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     { return __res; }
 297:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 298:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 299:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 300:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 301:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 302:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 303:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 304:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 305:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     struct __copy_move
 306:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 307:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 308:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	static _OI
 309:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 310:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	{
 311:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
ARM GAS  /tmp/ccOYETru.s 			page 209


 312:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    *__result = *__first;
 313:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  return __result;
 314:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	}
 315:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     };
 316:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 317:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 318:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<typename _Category>
 319:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 320:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 321:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 322:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	static _OI
 323:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 324:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	{
 325:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 326:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 327:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  return __result;
 328:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	}
 329:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     };
 330:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** #endif
 331:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 
 332:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****   template<>
 333:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 334:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     {
 335:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 336:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	static _OI
 337:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 338:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	{
 339:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 1585              		.loc 14 340 46 is_stmt 1 view .LVU352
 1586 0042 019B     		ldr	r3, [sp, #4]
 1587 0044 002B     		cmp	r3, #0
 1588 0046 11DD     		ble	.L72
 1589 0048 2E46     		mov	r6, r5
 1590              	.LVL73:
 1591              	.L73:
 1592              	.LBB1625:
 1593              	.LBI1625:
 665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1594              		.loc 2 665 7 view .LVU353
 1595              	.LBB1626:
 1596              	.LBI1626:
1364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1597              		.loc 2 1364 7 view .LVU354
 1598              	.LBB1627:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 1599              		.loc 2 1366 2 is_stmt 0 view .LVU355
 1600 004a 2146     		mov	r1, r4
 1601 004c 3046     		mov	r0, r6
 1602 004e FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_
 1603              	.LVL74:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 1604              		.loc 2 1366 2 view .LVU356
 1605              	.LBE1627:
 1606              	.LBE1626:
 1607              	.LBE1625:
 1608              		.loc 14 340 46 view .LVU357
ARM GAS  /tmp/ccOYETru.s 			page 210


 1609 0052 BAF1010A 		subs	r10, r10, #1
 1610              	.LVL75:
 341:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 342:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	      *__result = *__first;
 343:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	      ++__first;
 1611              		.loc 14 343 8 view .LVU358
 1612 0056 04F11804 		add	r4, r4, #24
 1613              	.LVL76:
 344:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	      ++__result;
 1614              		.loc 14 344 8 view .LVU359
 1615 005a 06F11806 		add	r6, r6, #24
 1616              	.LVL77:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 1617              		.loc 14 340 4 is_stmt 1 view .LVU360
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 1618              		.loc 14 340 46 view .LVU361
 1619 005e F4D1     		bne	.L73
 1620 0060 019B     		ldr	r3, [sp, #4]
 1621 0062 7E68     		ldr	r6, [r7, #4]
 1622              	.LVL78:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 1623              		.loc 14 340 46 is_stmt 0 view .LVU362
 1624 0064 002B     		cmp	r3, #0
 1625 0066 D8BF     		it	le
 1626 0068 1823     		movle	r3, #24
 1627 006a 1D44     		add	r5, r5, r3
 1628              	.L72:
 1629              	.LVL79:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 1630              		.loc 14 340 46 view .LVU363
 1631              	.LBE1624:
 1632              	.LBE1623:
 1633              	.LBE1622:
 1634              	.LBE1621:
 1635              	.LBE1620:
 1636              	.LBB1628:
 1637              	.LBI1628:
 289:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 1638              		.loc 14 289 5 is_stmt 1 view .LVU364
 1639              	.LBB1629:
 1640              	.LBI1629:
 1641              		.file 15 "/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h"
   1:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 211


  16:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** /*
  26:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *
  27:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *
  30:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *
  38:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *
  39:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *
  42:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  */
  50:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *
  55:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****  */
  59:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  60:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  63:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  68:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
  69:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** # include <type_traits>
  70:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
  71:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  72:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus > 201402L
ARM GAS  /tmp/ccOYETru.s 			page 212


  73:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201603
  74:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
  75:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  76:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  77:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** {
  78:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  79:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  80:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
  81:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    * @addtogroup iterators
  82:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    * @{
  83:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    */
  84:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
  85:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  86:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
  87:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  88:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  89:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  90:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  91:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  92:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @code
  93:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  94:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @endcode
  95:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
  96:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  97:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  98:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  99:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 100:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 101:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 102:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
 103:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 104:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 105:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     class reverse_iterator
 106:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 107:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 108:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 109:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 110:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 111:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     {
 112:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     protected:
 113:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _Iterator current;
 114:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 115:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 116:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 117:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     public:
 118:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 119:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 120:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 121:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 122:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 123:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 124:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 125:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 126:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 127:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 128:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 129:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
ARM GAS  /tmp/ccOYETru.s 			page 213


 130:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 131:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 132:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 133:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 134:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 135:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 136:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 137:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 138:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 139:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 140:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The copy constructor is normal.
 141:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 142:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 143:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 144:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : current(__x.current) { }
 145:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 146:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 147:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 148:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
 149:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 150:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 151:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 152:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 153:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 154:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       template<typename _Iter>
 155:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 156:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 157:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	: current(__x.base()) { }
 158:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 159:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 160:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 161:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 162:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 163:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       base() const
 164:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return current; }
 165:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 166:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 167:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 168:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 169:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 170:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 171:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 172:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 173:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 174:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 175:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 176:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 177:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator*() const
 178:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 179:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 180:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *--__tmp;
 181:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 182:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 183:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 184:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 185:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 186:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
ARM GAS  /tmp/ccOYETru.s 			page 214


 187:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 188:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 189:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator->() const
 190:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 191:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 192:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 193:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 194:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	--__tmp;
 195:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return _S_to_pointer(__tmp);
 196:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 197:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 198:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 199:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  @c *this
 200:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 201:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 202:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 203:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 204:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++()
 205:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 206:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	--current;
 207:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 208:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 209:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 210:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 211:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 212:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 213:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 214:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 215:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 216:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++(int)
 217:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 218:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 219:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	--current;
 220:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return __tmp;
 221:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 222:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 223:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 224:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  @c *this
 225:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 226:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 227:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 228:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 229:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator--()
 230:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 231:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	++current;
 232:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 233:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 234:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 235:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 236:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 237:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 238:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 239:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 240:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 241:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator--(int)
 242:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 243:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
ARM GAS  /tmp/ccOYETru.s 			page 215


 244:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	++current;
 245:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return __tmp;
 246:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 247:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 248:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 249:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 251:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 253:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 254:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator+(difference_type __n) const
 255:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 256:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 257:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 258:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  *this
 259:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 260:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 261:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 263:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 264:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator+=(difference_type __n)
 265:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 266:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	current -= __n;
 267:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 269:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 270:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 271:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 272:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 273:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 275:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 276:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator-(difference_type __n) const
 277:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 278:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 279:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 280:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  *this
 281:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 282:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 283:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 284:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 285:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 286:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator-=(difference_type __n)
 287:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 288:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	current += __n;
 289:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 290:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 291:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 292:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 293:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 294:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 295:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 296:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 297:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 298:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator[](difference_type __n) const
 299:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *(*this + __n); }
 300:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 216


 301:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     private:
 302:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       template<typename _Tp>
 303:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 304:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 305:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****         { return __p; }
 306:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 307:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       template<typename _Tp>
 308:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 309:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 310:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****         { return __t.operator->(); }
 311:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     };
 312:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 313:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   //@{
 314:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
 315:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 316:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 317:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @return  A simple bool.
 318:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 319:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 320:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 321:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 322:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 323:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 324:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 325:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 326:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 327:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 328:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 329:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 330:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 331:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 332:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 333:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 334:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 335:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 336:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 337:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 338:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 339:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return !(__x == __y); }
 340:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 341:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 342:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 343:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 344:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 345:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __y < __x; }
 346:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 347:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 348:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 349:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 350:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 351:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return !(__y < __x); }
 352:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 353:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 354:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 355:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 356:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 357:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return !(__x < __y); }
ARM GAS  /tmp/ccOYETru.s 			page 217


 358:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 359:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 360:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 361:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 362:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 363:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 364:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 365:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 366:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 367:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 368:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 369:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 370:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 371:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 372:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 373:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 374:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 375:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 376:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 377:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return !(__x == __y); }
 378:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 379:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 380:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 381:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 382:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 383:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __y < __x; }
 384:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 385:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 386:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 387:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 388:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 389:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return !(__y < __x); }
 390:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 391:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 392:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 393:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 394:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 395:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return !(__x < __y); }
 396:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   //@}
 397:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 398:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 399:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 400:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 401:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 402:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 403:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 404:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 405:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 406:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 407:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 408:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 409:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 410:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #else
 411:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 412:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 413:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 414:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
ARM GAS  /tmp/ccOYETru.s 			page 218


 415:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 416:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 417:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 418:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 419:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
 420:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 421:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 422:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 423:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 424:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 425:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 426:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 427:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 428:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 429:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 430:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 431:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 432:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 433:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 434:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** # if __cplusplus > 201103L
 435:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 436:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 437:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 438:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 439:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 440:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 441:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 442:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 443:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 444:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** # endif
 445:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
 446:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 447:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 448:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 449:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     auto
 450:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 451:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 452:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 453:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 454:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 455:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 456:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 457:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { };
 458:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 459:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 460:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     auto
 461:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 462:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 463:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 464:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
 465:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 466:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 467:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
 468:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 469:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 470:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 471:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
ARM GAS  /tmp/ccOYETru.s 			page 219


 472:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  push_back.
 473:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 474:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 475:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  save typing.
 476:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 477:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Container>
 478:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     class back_insert_iterator
 479:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 480:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     {
 481:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     protected:
 482:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _Container* container;
 483:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 484:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     public:
 485:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 486:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 487:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 488:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 489:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       explicit
 490:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 491:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 492:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 493:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 494:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 495:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 496:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 497:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 498:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 499:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 500:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 501:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 502:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 503:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 504:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 505:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 506:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 507:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 508:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	container->push_back(__value);
 509:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 510:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 511:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #else
 512:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 513:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 514:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 515:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	container->push_back(__value);
 516:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 517:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 518:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 519:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 520:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 521:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 522:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 523:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 524:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 525:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
 526:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 527:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.
 528:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       back_insert_iterator&
ARM GAS  /tmp/ccOYETru.s 			page 220


 529:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator*()
 530:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 531:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 532:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 533:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 534:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++()
 535:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 536:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 537:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 538:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       back_insert_iterator
 539:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++(int)
 540:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 541:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     };
 542:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 543:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
 544:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 545:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 546:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 547:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 548:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 549:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 550:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 551:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 552:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  types for you.
 553:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 554:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Container>
 555:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 556:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 557:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 558:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 559:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
 560:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 561:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 562:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 563:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 564:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  push_front.
 565:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 566:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 567:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  save typing.
 568:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 569:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Container>
 570:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     class front_insert_iterator
 571:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 572:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     {
 573:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     protected:
 574:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _Container* container;
 575:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 576:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     public:
 577:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 578:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 579:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 580:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 581:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 582:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 583:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 584:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 585:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
ARM GAS  /tmp/ccOYETru.s 			page 221


 586:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 587:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 588:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 589:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 590:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 591:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 592:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 593:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 594:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 595:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 596:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 597:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 598:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 599:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	container->push_front(__value);
 600:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 601:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 602:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #else
 603:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 604:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 605:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 606:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	container->push_front(__value);
 607:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 608:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 609:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 610:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 611:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 612:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 613:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 614:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 615:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 616:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
 617:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 618:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.
 619:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 620:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator*()
 621:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 622:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 623:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 624:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 625:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++()
 626:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 627:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 628:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 629:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       front_insert_iterator
 630:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++(int)
 631:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 632:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     };
 633:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 634:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
 635:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 636:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 637:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 638:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 639:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 640:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 641:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 642:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
ARM GAS  /tmp/ccOYETru.s 			page 222


 643:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  types for you.
 644:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 645:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Container>
 646:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 647:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 648:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 649:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 650:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
 651:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 652:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 653:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 654:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 655:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 656:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  position.
 657:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 658:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 659:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  %iterator's position.)
 660:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 661:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 662:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  save typing.
 663:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 664:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Container>
 665:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     class insert_iterator
 666:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 667:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     {
 668:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     protected:
 669:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _Container* container;
 670:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typename _Container::iterator iter;
 671:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 672:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     public:
 673:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 674:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 675:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 676:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 677:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 678:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 679:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 680:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 681:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 682:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 683:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /**
 684:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 685:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 686:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 687:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 688:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 689:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 690:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 691:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 692:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 693:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 694:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 695:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @code
 696:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *     // vector v contains A and Z
 697:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 698:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 699:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *     i = 1;
ARM GAS  /tmp/ccOYETru.s 			page 223


 700:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *     i = 2;
 701:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *     i = 3;
 702:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *
 703:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 704:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****        *  @endcode
 705:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       */
 706:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 707:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       insert_iterator&
 708:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 709:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 710:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 711:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	++iter;
 712:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 713:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 714:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #else
 715:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       insert_iterator&
 716:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 717:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 718:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 719:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	++iter;
 720:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 721:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 722:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 723:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       insert_iterator&
 724:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 725:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 726:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 727:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	++iter;
 728:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 729:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 730:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** #endif
 731:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 732:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.
 733:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       insert_iterator&
 734:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator*()
 735:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 736:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 737:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 738:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       insert_iterator&
 739:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++()
 740:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 741:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 742:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 743:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       insert_iterator&
 744:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++(int)
 745:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *this; }
 746:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     };
 747:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 748:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   /**
 749:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 750:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 751:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 752:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *
 753:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 754:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 755:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 756:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
ARM GAS  /tmp/ccOYETru.s 			page 224


 757:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 758:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****    *  types for you.
 759:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   */
 760:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 761:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 762:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 763:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     {
 764:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 765:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 766:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     }
 767:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 768:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // @} group iterators
 769:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 770:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 771:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** } // namespace
 772:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 773:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 774:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** {
 775:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 776:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 777:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 778:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 779:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 780:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 781:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 782:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 783:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 784:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   using std::iterator_traits;
 785:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   using std::iterator;
 786:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 787:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     class __normal_iterator
 788:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     {
 789:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     protected:
 790:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _Iterator _M_current;
 791:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 792:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 793:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 794:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****     public:
 795:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 796:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 797:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 798:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 799:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 800:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 801:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 802:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 803:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 804:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 805:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       explicit
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 807:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 808:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 809:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 810:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       template<typename _Iter>
 811:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 812:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 			  typename __enable_if<
 813:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
ARM GAS  /tmp/ccOYETru.s 			page 225


 814:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 815:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 816:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 817:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       // Forward iterator requirements
 818:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       reference
 819:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 820:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return *_M_current; }
 821:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 822:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       pointer
 823:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 824:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return _M_current; }
 825:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 826:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       __normal_iterator&
 827:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 828:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 829:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	++_M_current;
 830:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 831:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 832:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 833:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       __normal_iterator
 834:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 835:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 836:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 837:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 838:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       __normal_iterator&
 839:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 840:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 841:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	--_M_current;
 842:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 843:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       }
 844:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 845:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       __normal_iterator
 846:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 847:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 848:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 849:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       // Random access iterator requirements
 850:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       reference
 851:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 852:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { return _M_current[__n]; }
 853:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 854:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       __normal_iterator&
 855:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 856:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 857:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 
 858:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       __normal_iterator
 859:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 1642              		.loc 15 859 7 view .LVU365
 1643              	.LBB1630:
 1644              	.LBI1630:
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 1645              		.loc 15 806 7 view .LVU366
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 1646              		.loc 15 806 7 is_stmt 0 view .LVU367
 1647              	.LBE1630:
 1648              	.LBE1629:
 1649              	.LBE1628:
 1650              	.LBE1619:
ARM GAS  /tmp/ccOYETru.s 			page 226


 1651              	.LBE1618:
 1652              	.LBB1631:
 1653              	.LBI1631:
 826:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1654              		.loc 7 826 7 is_stmt 1 view .LVU368
 1655              	.LBB1632:
 1656              	.LBI1632:
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 1657              		.loc 15 806 7 view .LVU369
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 1658              		.loc 15 806 7 is_stmt 0 view .LVU370
 1659              	.LBE1632:
 1660              	.LBE1631:
 1661              	.LBB1633:
 1662              	.LBI1633:
 1663              		.file 16 "/usr/include/newlib/c++/9.2.1/bits/stl_construct.h"
   1:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** /*
  26:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  *
  27:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  *
  30:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  *
  38:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  *
  39:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  *
ARM GAS  /tmp/ccOYETru.s 			page 227


  42:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  */
  50:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****  */
  55:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  56:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  59:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #include <new>
  60:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  63:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** {
  65:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  67:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   /**
  68:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    */
  71:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     inline void
  74:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #else
  77:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     inline void
  79:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
  81:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     }
  85:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #endif
  86:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  87:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _T1>
  88:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     inline void
  89:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
  90:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
  91:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
  92:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   /**
  93:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  94:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    */
  95:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _Tp>
  96:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     inline void
  97:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  98:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { __pointer->~_Tp(); }
ARM GAS  /tmp/ccOYETru.s 			page 228


  99:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 100:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<bool>
 101:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     struct _Destroy_aux
 102:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
 103:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       template<typename _ForwardIterator>
 104:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         static void
 105:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 106:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	{
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 108:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 109:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	}
 110:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     };
 111:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 112:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<>
 113:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     struct _Destroy_aux<true>
 114:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
 115:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       template<typename _ForwardIterator>
 116:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         static void
 117:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 118:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     };
 119:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 120:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   /**
 121:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 122:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 123:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 124:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    */
 125:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _ForwardIterator>
 126:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     inline void
 127:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 128:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
 129:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 130:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****                        _Value_type;
 131:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #if __cplusplus >= 201103L
 132:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 133:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 134:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 		    "value type is destructible");
 135:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #endif
 136:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 137:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	__destroy(__first, __last);
 138:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     }
 139:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 140:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<bool>
 141:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     struct _Destroy_n_aux
 142:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
 143:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 144:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         static _ForwardIterator
 145:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 146:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	{
 147:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	  for (; __count > 0; (void)++__first, --__count)
 148:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 149:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	  return __first;
 150:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	}
 151:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     };
 152:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 153:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<>
 154:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     struct _Destroy_n_aux<true>
 155:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
ARM GAS  /tmp/ccOYETru.s 			page 229


 156:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 157:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         static _ForwardIterator
 158:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 159:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	{
 160:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	  std::advance(__first, __count);
 161:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	  return __first;
 162:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	}
 163:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     };
 164:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 165:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   /**
 166:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 167:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 168:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 169:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    */
 170:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Size>
 171:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     inline _ForwardIterator
 172:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Destroy_n(_ForwardIterator __first, _Size __count)
 173:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
 174:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 175:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****                        _Value_type;
 176:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #if __cplusplus >= 201103L
 177:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 178:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 179:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 		    "value type is destructible");
 180:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** #endif
 181:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 182:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	__destroy_n(__first, __count);
 183:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     }
 184:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 185:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   /**
 186:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 187:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 188:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 189:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****    */
 190:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 191:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 192:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     void
 193:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 194:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	     _Allocator& __alloc)
 195:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
 196:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 197:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 198:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 199:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     }
 200:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 
 201:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 202:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     inline void
 203:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 1664              		.loc 16 203 5 is_stmt 1 view .LVU371
 1665              	.LBB1634:
 1666              	.LBI1634:
 127:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     {
 1667              		.loc 16 127 5 view .LVU372
 1668              	.LBB1635:
 1669              	.LBB1636:
 1670              	.LBI1636:
 105:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	{
ARM GAS  /tmp/ccOYETru.s 			page 230


 1671              		.loc 16 105 9 view .LVU373
 1672              	.LBB1637:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1673              		.loc 16 107 19 view .LVU374
 1674 006c AE42     		cmp	r6, r5
 1675 006e 0BD0     		beq	.L74
 1676 0070 05F10804 		add	r4, r5, #8
 1677              	.LVL80:
 1678              	.L76:
 1679              	.LBB1638:
 1680              	.LBI1638:
  97:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 1681              		.loc 16 97 5 view .LVU375
 1682              	.LBB1639:
 1683              	.LBI1639:
 657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_dispose(); }
 1684              		.loc 2 657 7 view .LVU376
 1685              	.LBB1640:
 1686              	.LBI1640:
 229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1687              		.loc 2 229 7 view .LVU377
 1688              	.LBB1641:
 1689              	.LBB1642:
 1690              	.LBI1642:
 221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1691              		.loc 2 221 7 view .LVU378
 1692              	.LBB1643:
 222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1693              		.loc 2 222 26 is_stmt 0 view .LVU379
 1694 0074 54F8080C 		ldr	r0, [r4, #-8]
 1695              	.LVL81:
 222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1696              		.loc 2 222 26 view .LVU380
 1697              	.LBE1643:
 1698              	.LBE1642:
 231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1699              		.loc 2 231 2 view .LVU381
 1700 0078 8442     		cmp	r4, r0
 1701 007a 01D0     		beq	.L75
 1702              	.LVL82:
 1703              	.LBB1644:
 1704              	.LBI1644:
 236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1705              		.loc 2 236 7 is_stmt 1 view .LVU382
 1706              	.LBB1645:
 1707              	.LBB1646:
 1708              	.LBI1646:
 469:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1709              		.loc 12 469 7 view .LVU383
 1710              	.LBB1647:
 1711              	.LBI1647:
  90:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  91:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       pointer
  92:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  95:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       const_pointer
ARM GAS  /tmp/ccOYETru.s 			page 231


  96:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
  99:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 100:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 101:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       _GLIBCXX_NODISCARD pointer
 102:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 103:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       {
 104:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	if (__n > this->max_size())
 105:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 106:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 107:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #if __cpp_aligned_new
 108:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 109:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	  {
 110:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 111:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 112:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	  }
 113:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #endif
 114:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 115:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       }
 116:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 117:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 118:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       void
 119:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 1712              		.loc 4 119 7 view .LVU384
 1713              	.LBB1648:
 120:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       {
 121:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #if __cpp_aligned_new
 122:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 123:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	  {
 124:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 125:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	    return;
 126:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	  }
 127:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** #endif
 128:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	::operator delete(__p);
 1714              		.loc 4 128 19 is_stmt 0 view .LVU385
 1715 007c FFF7FEFF 		bl	_ZdlPv
 1716              	.LVL83:
 1717              	.L75:
 1718              		.loc 4 128 19 view .LVU386
 1719              	.LBE1648:
 1720              	.LBE1647:
 1721              	.LBE1646:
 1722              	.LBE1645:
 1723              	.LBE1644:
 1724              	.LBE1641:
 1725              	.LBE1640:
 1726              	.LBB1649:
 1727              	.LBI1649:
 150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1728              		.loc 2 150 14 is_stmt 1 view .LVU387
 1729              	.LBB1650:
 1730              	.LBI1650:
 1731              		.loc 3 153 7 view .LVU388
 1732              	.LBB1651:
 1733              	.LBI1651:
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 232


 1734              		.loc 4 89 7 view .LVU389
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1735              		.loc 4 89 7 is_stmt 0 view .LVU390
 1736              	.LBE1651:
 1737              	.LBE1650:
 1738              	.LBE1649:
 1739              	.LBE1639:
 1740              	.LBE1638:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1741              		.loc 16 107 4 is_stmt 1 view .LVU391
 1742              	.LBB1652:
 1743              	.LBI1652:
 827:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 1744              		.loc 15 827 7 view .LVU392
 1745              	.LBB1653:
 829:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 1746              		.loc 15 829 2 is_stmt 0 view .LVU393
 1747 0080 1835     		adds	r5, r5, #24
 1748              	.LVL84:
 829:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 1749              		.loc 15 829 2 view .LVU394
 1750              	.LBE1653:
 1751              	.LBE1652:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1752              		.loc 16 107 19 is_stmt 1 view .LVU395
 1753 0082 1834     		adds	r4, r4, #24
 1754 0084 B542     		cmp	r5, r6
 1755 0086 F5D1     		bne	.L76
 1756              	.LVL85:
 1757              	.L74:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1758              		.loc 16 107 19 is_stmt 0 view .LVU396
 1759 0088 3D68     		ldr	r5, [r7]
 1760              	.L92:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1761              		.loc 16 107 19 view .LVU397
 1762 008a 019B     		ldr	r3, [sp, #4]
 1763 008c 1D44     		add	r5, r5, r3
 1764              	.LVL86:
 1765              	.L70:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1766              		.loc 16 107 19 view .LVU398
 1767              	.LBE1637:
 1768              	.LBE1636:
 1769              	.LBE1635:
 1770              	.LBE1634:
 1771              	.LBE1633:
 1772              	.LBE1813:
 237:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    {
 238:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 239:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 240:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
 241:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  else
 242:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    {
 243:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 244:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			this->_M_impl._M_start);
 245:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
ARM GAS  /tmp/ccOYETru.s 			page 233


 246:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 247:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 248:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 249:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
 250:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 1773              		.loc 13 250 4 view .LVU399
 1774 008e 7D60     		str	r5, [r7, #4]
 1775              	.LVL87:
 1776              	.L57:
 1777              		.loc 13 250 4 view .LVU400
 1778              	.LBE1606:
 1779              	.LBE1820:
 251:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	}
 252:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****       return *this;
 253:/usr/include/newlib/c++/9.2.1/bits/vector.tcc ****     }
 1780              		.loc 13 253 5 view .LVU401
 1781 0090 3846     		mov	r0, r7
 1782 0092 03B0     		add	sp, sp, #12
 1783              		.cfi_remember_state
 1784              		.cfi_def_cfa_offset 36
 1785              		@ sp needed
 1786 0094 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1787              	.LVL88:
 1788              	.L93:
 1789              		.cfi_restore_state
 1790              	.LBB1821:
 1791              	.LBB1817:
 1792              	.LBB1814:
 1793              	.LBB1654:
 1794              	.LBB1655:
 1795              	.LBI1655:
 817:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1796              		.loc 7 817 7 is_stmt 1 view .LVU402
 1797              	.LBB1656:
 1798              	.LBI1656:
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 1799              		.loc 15 806 7 view .LVU403
 1800              	.LBE1656:
 1801              	.LBE1655:
 1802              	.LBB1657:
 1803              	.LBI1657:
 835:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1804              		.loc 7 835 7 view .LVU404
 1805              	.LBB1658:
 1806              	.LBI1658:
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 1807              		.loc 15 806 7 view .LVU405
 806:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 1808              		.loc 15 806 7 is_stmt 0 view .LVU406
 1809              	.LBE1658:
 1810              	.LBE1657:
 1811              	.LBB1659:
 1812              	.LBI1659:
1044:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1045:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1046:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1047:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
ARM GAS  /tmp/ccOYETru.s 			page 234


1048:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1049:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  accessed.
1050:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1051:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1052:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1053:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1054:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1055:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  see at().)
1056:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1057:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reference
1058:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1059:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1060:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1061:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1062:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1063:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1064:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     protected:
1065:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /// Safety check used only from at().
1066:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1067:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1068:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1069:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (__n >= this->size())
1070:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1071:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1072:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				       "(which is %zu)"),
1073:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				   __n, this->size());
1074:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1075:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1076:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     public:
1077:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1078:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1079:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1080:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  accessed.
1081:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1082:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1083:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1084:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1085:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1086:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1087:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1088:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       reference
1089:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       at(size_type __n)
1090:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1091:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_range_check(__n);
1092:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return (*this)[__n];
1093:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1094:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1095:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1096:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1097:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1098:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  accessed.
1099:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1100:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1101:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1102:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1103:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1104:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
ARM GAS  /tmp/ccOYETru.s 			page 235


1105:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1106:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reference
1107:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       at(size_type __n) const
1108:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1109:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_range_check(__n);
1110:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return (*this)[__n];
1111:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1112:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1113:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1114:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1115:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element of the %vector.
1116:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1117:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       reference
1118:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1119:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1120:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1121:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *begin();
1122:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1123:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1124:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1125:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1126:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element of the %vector.
1127:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1128:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reference
1129:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1130:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1131:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1132:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *begin();
1133:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1134:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1135:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1136:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
1137:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element of the %vector.
1138:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1139:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       reference
1140:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1141:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1142:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1143:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *(end() - 1);
1144:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1145:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1146:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1147:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1148:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  last element of the %vector.
1149:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1150:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const_reference
1151:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1152:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1153:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1154:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return *(end() - 1);
1155:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1156:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1157:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1158:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1159:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // data access
1160:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1161:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
ARM GAS  /tmp/ccOYETru.s 			page 236


1162:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1163:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1164:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       _Tp*
1165:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1166:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1167:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1168:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       const _Tp*
1169:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1170:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1171:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1172:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1173:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1174:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1175:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1176:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1177:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1178:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1179:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1180:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1181:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  available.
1182:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1183:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1184:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       push_back(const value_type& __x)
1185:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1186:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1187:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  {
1188:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1189:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1190:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				     __x);
1191:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
1192:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1193:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  }
1194:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	else
1195:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1196:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1197:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1198:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1199:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1200:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       push_back(value_type&& __x)
1201:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1202:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1203:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename... _Args>
1204:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus > 201402L
1205:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	reference
1206:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
1207:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	void
1208:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1209:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1210:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1211:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1212:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1213:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Removes last element.
1214:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1215:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1216:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1217:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1218:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
ARM GAS  /tmp/ccOYETru.s 			page 237


1219:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  called.
1220:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1221:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1222:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1223:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1224:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1225:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1226:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1227:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1228:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1229:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1230:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1231:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1232:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1233:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1234:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __args  Arguments.
1235:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1236:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1237:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1238:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1239:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1240:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1241:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  std::list.
1242:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1243:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename... _Args>
1244:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	iterator
1245:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1246:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1247:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1248:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1249:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1250:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1251:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1252:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1253:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1254:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1255:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1256:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1257:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1258:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1259:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
1260:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1261:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
1262:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1263:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1264:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1265:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1266:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1267:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1268:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1269:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1270:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1271:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1272:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1273:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
1274:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1275:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
ARM GAS  /tmp/ccOYETru.s 			page 238


1276:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1277:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1278:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1279:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1280:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1281:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1282:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1283:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1284:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1285:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1286:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1287:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1288:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1289:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
1290:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1291:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1292:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1293:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1294:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1295:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1296:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1297:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1298:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1299:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1300:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  specified by @a position.
1301:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1302:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1303:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1304:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  consider using std::list.
1305:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1306:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
1307:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1308:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1309:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1310:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1311:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1312:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return begin() + __offset;
1313:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1314:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1315:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1316:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1317:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1318:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1319:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1320:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1321:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1322:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1323:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1324:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1325:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1326:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1327:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1328:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1329:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  consider using std::list.
1330:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1331:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
1332:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
ARM GAS  /tmp/ccOYETru.s 			page 239


1333:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1334:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1335:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1336:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return begin() + __offset;
1337:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1338:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
1339:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1340:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1341:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1342:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1343:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1344:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1345:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1346:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1347:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1348:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1349:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1350:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  consider using std::list.
1351:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1352:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1353:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1354:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1355:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1356:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1357:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1358:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1359:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1360:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1361:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1362:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1363:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1364:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1365:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1366:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1367:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  by @a pos.
1368:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1369:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1370:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1371:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  consider using std::list.
1372:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1373:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename _InputIterator,
1374:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1375:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	iterator
1376:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1377:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       _InputIterator __last)
1378:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{
1379:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1380:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1381:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			     __first, __last, __false_type());
1382:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  return begin() + __offset;
1383:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	}
1384:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
1385:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1386:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1387:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1388:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1389:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
ARM GAS  /tmp/ccOYETru.s 			page 240


1390:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1391:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1392:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1393:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  by @a pos.
1394:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1395:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1396:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1397:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  consider using std::list.
1398:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1399:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1400:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	void
1401:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1402:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	       _InputIterator __last)
1403:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{
1404:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1405:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1406:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1407:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	}
1408:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1409:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1410:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1411:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1412:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1413:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1414:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1415:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1416:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  shorten the %vector by one.
1417:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1418:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1419:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1420:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1421:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1422:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1423:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1424:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1425:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
1426:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1427:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       erase(const_iterator __position)
1428:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1429:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
1430:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       erase(iterator __position)
1431:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return _M_erase(__position); }
1432:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1433:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1434:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1435:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1436:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1437:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1438:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *                  erased.
1439:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1440:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *           prior to erasing (or end()).
1441:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1442:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This function will erase the elements in the range
1443:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1444:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1445:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1446:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
ARM GAS  /tmp/ccOYETru.s 			page 241


1447:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1448:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1449:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1450:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1451:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1452:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       iterator
1453:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1454:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1455:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1456:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	const auto __beg = begin();
1457:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1458:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1459:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1460:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
1461:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1462:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1463:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1464:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1465:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1466:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1467:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1468:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1469:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1470:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1471:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1472:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1473:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *
1474:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1475:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1476:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1477:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1478:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
1479:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1480:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1481:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1482:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #endif
1483:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1484:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1485:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1486:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
1487:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1488:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1489:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1490:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1491:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1492:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  the user's responsibility.
1493:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1494:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       void
1495:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1496:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1497:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 
1498:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****     protected:
1499:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       /**
1500:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1501:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1502:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****        */
1503:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
ARM GAS  /tmp/ccOYETru.s 			page 242


1504:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	pointer
1505:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
 1813              		.loc 7 1505 2 is_stmt 1 view .LVU407
 1814              	.LBB1660:
 1815              	.LBB1661:
 1816              	.LBI1661:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 1817              		.loc 7 340 7 view .LVU408
 1818              	.LBB1662:
 343:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 1819              		.loc 7 343 18 is_stmt 0 view .LVU409
 1820 0098 BAF1000F 		cmp	r10, #0
 1821 009c 61D0     		beq	.L94
 1822              	.LVL89:
 1823              	.LBB1663:
 1824              	.LBI1663:
 443:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1825              		.loc 12 443 7 is_stmt 1 view .LVU410
 1826              	.LBB1664:
 1827              	.LBI1664:
 102:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       {
 1828              		.loc 4 102 7 view .LVU411
 1829              	.LBB1665:
 104:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 1830              		.loc 4 104 2 is_stmt 0 view .LVU412
 1831 009e 344B     		ldr	r3, .L96+4
 1832 00a0 9A45     		cmp	r10, r3
 1833 00a2 60D8     		bhi	.L95
 114:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       }
 1834              		.loc 4 114 41 view .LVU413
 1835 00a4 0198     		ldr	r0, [sp, #4]
 1836              	.LVL90:
 114:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       }
 1837              		.loc 4 114 41 view .LVU414
 1838 00a6 FFF7FEFF 		bl	_Znwj
 1839              	.LVL91:
 1840 00aa 0646     		mov	r6, r0
 1841              	.LVL92:
 1842              	.L60:
 114:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       }
 1843              		.loc 4 114 41 view .LVU415
 1844              	.LBE1665:
 1845              	.LBE1664:
 1846              	.LBE1663:
 1847              	.LBE1662:
 1848              	.LBE1661:
 1849              	.LBB1670:
 1850              	.LBI1670:
 1851              		.file 17 "/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h"
   1:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
   3:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** //
   5:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
ARM GAS  /tmp/ccOYETru.s 			page 243


   9:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  11:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  16:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  20:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  25:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** /*
  26:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  *
  27:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  *
  30:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  *
  38:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  *
  39:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  *
  42:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  */
  50:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  51:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****  */
  55:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  56:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  59:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #include <utility>
  61:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #endif
  62:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  63:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #include <type_traits>
  65:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #endif
ARM GAS  /tmp/ccOYETru.s 			page 244


  66:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  67:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** {
  69:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  71:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  72:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  73:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
  74:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  75:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
  76:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  77:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  78:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         {
  79:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  80:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  __try
  81:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    {
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  83:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  84:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      return __cur;
  85:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    }
  86:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
  87:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    {
  88:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  89:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  90:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    }
  91:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	}
  92:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     };
  93:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
  94:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<>
  95:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  96:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
  97:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  98:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
  99:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 100:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 101:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 102:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     };
 103:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 104:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   /**
 105:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 106:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 107:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 108:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 109:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 110:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *
 111:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 112:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   */
 113:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 114:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 115:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 116:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 117:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 118:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 119:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	_ValueType1;
 120:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 121:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	_ValueType2;
 122:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
ARM GAS  /tmp/ccOYETru.s 			page 245


 123:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 124:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #else
 125:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 126:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 127:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 128:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 129:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 130:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 131:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 132:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 133:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 134:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 135:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #endif
 136:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 137:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 138:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 139:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 140:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 141:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     }
 142:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 143:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 144:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 145:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 146:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 147:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 148:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         static void
 149:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 150:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 151:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         {
 152:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 153:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  __try
 154:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    {
 155:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 156:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 157:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    }
 158:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 159:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    {
 160:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 161:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 162:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    }
 163:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	}
 164:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     };
 165:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 166:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<>
 167:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 168:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 169:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 170:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         static void
 171:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 172:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 173:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 174:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     };
 175:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 176:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   /**
 177:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 178:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 179:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
ARM GAS  /tmp/ccOYETru.s 			page 246


 180:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 181:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 182:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *
 183:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 184:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   */
 185:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 186:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     inline void
 187:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 188:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 189:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 190:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 191:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 192:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 193:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 194:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #else
 195:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 196:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 197:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 198:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 199:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 200:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 201:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 202:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 203:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #endif
 204:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 205:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 206:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 207:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     }
 208:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 209:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 210:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 211:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 212:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 213:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 214:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 215:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 216:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 217:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         {
 218:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 219:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  __try
 220:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    {
 221:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 222:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 223:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      return __cur;
 224:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    }
 225:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 226:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    {
 227:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 228:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 229:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    }
 230:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	}
 231:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     };
 232:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 233:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<>
 234:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 235:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 236:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
ARM GAS  /tmp/ccOYETru.s 			page 247


 237:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 238:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 239:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 240:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 241:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     };
 242:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 243:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 244:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 245:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   /**
 246:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 247:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 248:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 249:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 250:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 251:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *
 252:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 253:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   */
 254:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 255:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 256:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 257:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 258:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 259:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 260:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 261:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 262:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #else
 263:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 264:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 265:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 266:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 267:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 268:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 269:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 270:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 271:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** #endif
 272:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 273:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 274:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     }
 275:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 276:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 277:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 278:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 279:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 280:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 281:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 282:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 283:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 284:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     _ForwardIterator
 285:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 286:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 287:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     {
 288:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 289:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       __try
 290:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	{
 291:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 292:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 293:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
ARM GAS  /tmp/ccOYETru.s 			page 248


 294:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  return __cur;
 295:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	}
 296:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****       __catch(...)
 297:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	{
 298:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 299:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 300:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 	}
 301:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     }
 302:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 
 303:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 304:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 305:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 1852              		.loc 17 305 5 is_stmt 1 view .LVU416
 1853              	.LBB1671:
 1854              	.LBI1671:
 115:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 1855              		.loc 17 115 5 view .LVU417
 1856              	.LBB1672:
 1857              	.LBB1673:
 1858              	.LBI1673:
  76:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 1859              		.loc 17 76 9 view .LVU418
 1860              	.LBB1674:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 1861              		.loc 17 82 23 view .LVU419
 1862 00ac 4445     		cmp	r4, r8
 1863 00ae 11D0     		beq	.L66
 1864 00b0 06F10805 		add	r5, r6, #8
 1865              	.LVL93:
 1866              	.L65:
 1867              	.LBB1675:
 1868              	.LBI1675:
  74:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 1869              		.loc 16 74 5 view .LVU420
  74:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 1870              		.loc 16 74 5 is_stmt 0 view .LVU421
 1871              	.LBE1675:
 1872              	.LBE1674:
 1873              	.LBE1673:
 1874              	.LBE1672:
 1875              	.LBE1671:
 1876              	.LBE1670:
 1877              	.LBE1660:
 1878              	.LBE1659:
 1879              	.LBE1654:
 1880              	.LBE1814:
 1881              	.LBE1817:
 1882              	.LBE1821:
 1883              		.file 18 "/usr/include/newlib/c++/9.2.1/new"
   1:/usr/include/newlib/c++/9.2.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/newlib/c++/9.2.1/new **** 
   3:/usr/include/newlib/c++/9.2.1/new **** // Copyright (C) 1994-2019 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/9.2.1/new **** 
   5:/usr/include/newlib/c++/9.2.1/new **** // This file is part of GCC.
   6:/usr/include/newlib/c++/9.2.1/new **** //
   7:/usr/include/newlib/c++/9.2.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/newlib/c++/9.2.1/new **** // it under the terms of the GNU General Public License as published by
ARM GAS  /tmp/ccOYETru.s 			page 249


   9:/usr/include/newlib/c++/9.2.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/newlib/c++/9.2.1/new **** // any later version.
  11:/usr/include/newlib/c++/9.2.1/new **** // 
  12:/usr/include/newlib/c++/9.2.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/newlib/c++/9.2.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/newlib/c++/9.2.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/newlib/c++/9.2.1/new **** // GNU General Public License for more details.
  16:/usr/include/newlib/c++/9.2.1/new **** // 
  17:/usr/include/newlib/c++/9.2.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/newlib/c++/9.2.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/newlib/c++/9.2.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/newlib/c++/9.2.1/new **** 
  21:/usr/include/newlib/c++/9.2.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/newlib/c++/9.2.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/newlib/c++/9.2.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/newlib/c++/9.2.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/newlib/c++/9.2.1/new **** 
  26:/usr/include/newlib/c++/9.2.1/new **** /** @file new
  27:/usr/include/newlib/c++/9.2.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/newlib/c++/9.2.1/new ****  *
  29:/usr/include/newlib/c++/9.2.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/newlib/c++/9.2.1/new ****  *  handling memory allocation errors; see
  31:/usr/include/newlib/c++/9.2.1/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/include/newlib/c++/9.2.1/new ****  */
  33:/usr/include/newlib/c++/9.2.1/new **** 
  34:/usr/include/newlib/c++/9.2.1/new **** #ifndef _NEW
  35:/usr/include/newlib/c++/9.2.1/new **** #define _NEW
  36:/usr/include/newlib/c++/9.2.1/new **** 
  37:/usr/include/newlib/c++/9.2.1/new **** #pragma GCC system_header
  38:/usr/include/newlib/c++/9.2.1/new **** 
  39:/usr/include/newlib/c++/9.2.1/new **** #include <bits/c++config.h>
  40:/usr/include/newlib/c++/9.2.1/new **** #include <exception>
  41:/usr/include/newlib/c++/9.2.1/new **** 
  42:/usr/include/newlib/c++/9.2.1/new **** #pragma GCC visibility push(default)
  43:/usr/include/newlib/c++/9.2.1/new **** 
  44:/usr/include/newlib/c++/9.2.1/new **** extern "C++" {
  45:/usr/include/newlib/c++/9.2.1/new **** 
  46:/usr/include/newlib/c++/9.2.1/new **** namespace std 
  47:/usr/include/newlib/c++/9.2.1/new **** {
  48:/usr/include/newlib/c++/9.2.1/new ****   /**
  49:/usr/include/newlib/c++/9.2.1/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/include/newlib/c++/9.2.1/new ****    *  @ingroup exceptions
  51:/usr/include/newlib/c++/9.2.1/new ****    *
  52:/usr/include/newlib/c++/9.2.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/include/newlib/c++/9.2.1/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/include/newlib/c++/9.2.1/new ****   class bad_alloc : public exception 
  55:/usr/include/newlib/c++/9.2.1/new ****   {
  56:/usr/include/newlib/c++/9.2.1/new ****   public:
  57:/usr/include/newlib/c++/9.2.1/new ****     bad_alloc() throw() { }
  58:/usr/include/newlib/c++/9.2.1/new **** 
  59:/usr/include/newlib/c++/9.2.1/new **** #if __cplusplus >= 201103L
  60:/usr/include/newlib/c++/9.2.1/new ****     bad_alloc(const bad_alloc&) = default;
  61:/usr/include/newlib/c++/9.2.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  62:/usr/include/newlib/c++/9.2.1/new **** #endif
  63:/usr/include/newlib/c++/9.2.1/new **** 
  64:/usr/include/newlib/c++/9.2.1/new ****     // This declaration is not useless:
  65:/usr/include/newlib/c++/9.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
ARM GAS  /tmp/ccOYETru.s 			page 250


  66:/usr/include/newlib/c++/9.2.1/new ****     virtual ~bad_alloc() throw();
  67:/usr/include/newlib/c++/9.2.1/new **** 
  68:/usr/include/newlib/c++/9.2.1/new ****     // See comment in eh_exception.cc.
  69:/usr/include/newlib/c++/9.2.1/new ****     virtual const char* what() const throw();
  70:/usr/include/newlib/c++/9.2.1/new ****   };
  71:/usr/include/newlib/c++/9.2.1/new **** 
  72:/usr/include/newlib/c++/9.2.1/new **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/9.2.1/new ****   class bad_array_new_length : public bad_alloc
  74:/usr/include/newlib/c++/9.2.1/new ****   {
  75:/usr/include/newlib/c++/9.2.1/new ****   public:
  76:/usr/include/newlib/c++/9.2.1/new ****     bad_array_new_length() throw() { }
  77:/usr/include/newlib/c++/9.2.1/new **** 
  78:/usr/include/newlib/c++/9.2.1/new ****     // This declaration is not useless:
  79:/usr/include/newlib/c++/9.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  80:/usr/include/newlib/c++/9.2.1/new ****     virtual ~bad_array_new_length() throw();
  81:/usr/include/newlib/c++/9.2.1/new **** 
  82:/usr/include/newlib/c++/9.2.1/new ****     // See comment in eh_exception.cc.
  83:/usr/include/newlib/c++/9.2.1/new ****     virtual const char* what() const throw();
  84:/usr/include/newlib/c++/9.2.1/new ****   };
  85:/usr/include/newlib/c++/9.2.1/new **** #endif
  86:/usr/include/newlib/c++/9.2.1/new **** 
  87:/usr/include/newlib/c++/9.2.1/new **** #if __cpp_aligned_new
  88:/usr/include/newlib/c++/9.2.1/new ****   enum class align_val_t: size_t {};
  89:/usr/include/newlib/c++/9.2.1/new **** #endif
  90:/usr/include/newlib/c++/9.2.1/new **** 
  91:/usr/include/newlib/c++/9.2.1/new ****   struct nothrow_t
  92:/usr/include/newlib/c++/9.2.1/new ****   {
  93:/usr/include/newlib/c++/9.2.1/new **** #if __cplusplus >= 201103L
  94:/usr/include/newlib/c++/9.2.1/new ****     explicit nothrow_t() = default;
  95:/usr/include/newlib/c++/9.2.1/new **** #endif
  96:/usr/include/newlib/c++/9.2.1/new ****   };
  97:/usr/include/newlib/c++/9.2.1/new **** 
  98:/usr/include/newlib/c++/9.2.1/new ****   extern const nothrow_t nothrow;
  99:/usr/include/newlib/c++/9.2.1/new **** 
 100:/usr/include/newlib/c++/9.2.1/new ****   /** If you write your own error handler to be called by @c new, it must
 101:/usr/include/newlib/c++/9.2.1/new ****    *  be of this type.  */
 102:/usr/include/newlib/c++/9.2.1/new ****   typedef void (*new_handler)();
 103:/usr/include/newlib/c++/9.2.1/new **** 
 104:/usr/include/newlib/c++/9.2.1/new ****   /// Takes a replacement handler as the argument, returns the
 105:/usr/include/newlib/c++/9.2.1/new ****   /// previous handler.
 106:/usr/include/newlib/c++/9.2.1/new ****   new_handler set_new_handler(new_handler) throw();
 107:/usr/include/newlib/c++/9.2.1/new **** 
 108:/usr/include/newlib/c++/9.2.1/new **** #if __cplusplus >= 201103L
 109:/usr/include/newlib/c++/9.2.1/new ****   /// Return the current new handler.
 110:/usr/include/newlib/c++/9.2.1/new ****   new_handler get_new_handler() noexcept;
 111:/usr/include/newlib/c++/9.2.1/new **** #endif
 112:/usr/include/newlib/c++/9.2.1/new **** } // namespace std
 113:/usr/include/newlib/c++/9.2.1/new **** 
 114:/usr/include/newlib/c++/9.2.1/new **** //@{
 115:/usr/include/newlib/c++/9.2.1/new **** /** These are replaceable signatures:
 116:/usr/include/newlib/c++/9.2.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 117:/usr/include/newlib/c++/9.2.1/new ****  *  - normal array new and delete (same)
 118:/usr/include/newlib/c++/9.2.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 119:/usr/include/newlib/c++/9.2.1/new ****  *    @c NULL on error)
 120:/usr/include/newlib/c++/9.2.1/new ****  *  - @c nothrow array new and delete (same)
 121:/usr/include/newlib/c++/9.2.1/new ****  *
 122:/usr/include/newlib/c++/9.2.1/new ****  *  Placement new and delete signatures (take a memory address argument,
ARM GAS  /tmp/ccOYETru.s 			page 251


 123:/usr/include/newlib/c++/9.2.1/new ****  *  does nothing) may not be replaced by a user's program.
 124:/usr/include/newlib/c++/9.2.1/new **** */
 125:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 126:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 127:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 128:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 129:/usr/include/newlib/c++/9.2.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 130:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 131:/usr/include/newlib/c++/9.2.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 132:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 133:/usr/include/newlib/c++/9.2.1/new **** #if __cpp_sized_deallocation
 134:/usr/include/newlib/c++/9.2.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 135:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 136:/usr/include/newlib/c++/9.2.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 137:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 138:/usr/include/newlib/c++/9.2.1/new **** #endif
 139:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 140:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 141:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 142:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 143:/usr/include/newlib/c++/9.2.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 144:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 145:/usr/include/newlib/c++/9.2.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 146:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 147:/usr/include/newlib/c++/9.2.1/new **** #if __cpp_aligned_new
 148:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 149:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 150:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 151:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 152:/usr/include/newlib/c++/9.2.1/new **** void operator delete(void*, std::align_val_t)
 153:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 154:/usr/include/newlib/c++/9.2.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 155:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 156:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 157:/usr/include/newlib/c++/9.2.1/new ****   __attribute__((__externally_visible__));
 158:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 159:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 160:/usr/include/newlib/c++/9.2.1/new **** void operator delete[](void*, std::align_val_t)
 161:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 162:/usr/include/newlib/c++/9.2.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 163:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 164:/usr/include/newlib/c++/9.2.1/new **** #if __cpp_sized_deallocation
 165:/usr/include/newlib/c++/9.2.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 166:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 167:/usr/include/newlib/c++/9.2.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 168:/usr/include/newlib/c++/9.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 169:/usr/include/newlib/c++/9.2.1/new **** #endif // __cpp_sized_deallocation
 170:/usr/include/newlib/c++/9.2.1/new **** #endif // __cpp_aligned_new
 171:/usr/include/newlib/c++/9.2.1/new **** 
 172:/usr/include/newlib/c++/9.2.1/new **** // Default placement versions of operator new.
 173:/usr/include/newlib/c++/9.2.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 174:/usr/include/newlib/c++/9.2.1/new **** { return __p; }
 1884              		.loc 18 174 3 is_stmt 1 view .LVU422
 1885              	.LBB1822:
 1886              	.LBB1818:
 1887              	.LBB1815:
 1888              	.LBB1746:
ARM GAS  /tmp/ccOYETru.s 			page 252


 1889              	.LBB1719:
 1890              	.LBB1717:
 1891              	.LBB1715:
 1892              	.LBB1714:
 1893              	.LBB1713:
 1894              	.LBB1712:
 1895              	.LBB1711:
 1896              	.LBB1706:
 1897              	.LBB1676:
 1898              	.LBI1676:
 448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 1899              		.loc 2 448 7 view .LVU423
 1900              	.LBB1677:
 1901              	.LBB1678:
 1902              	.LBI1678:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1903              		.loc 2 190 7 view .LVU424
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 1904              		.loc 2 190 7 is_stmt 0 view .LVU425
 1905              	.LBE1678:
 1906              	.LBB1679:
 1907              	.LBI1679:
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 1908              		.loc 2 290 7 is_stmt 1 view .LVU426
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 1909              		.loc 2 290 7 is_stmt 0 view .LVU427
 1910              	.LBE1679:
 1911              	.LBB1680:
 1912              	.LBI1680:
 1913              		.loc 11 97 19 is_stmt 1 view .LVU428
 1914              	.LBB1681:
 1915              	.LBI1681:
 1916              		.loc 12 514 7 view .LVU429
 1917              	.LBB1682:
 1918              	.LBI1682:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1919              		.loc 3 141 7 view .LVU430
 1920              	.LBB1683:
 1921              	.LBI1683:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1922              		.loc 4 83 7 view .LVU431
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1923              		.loc 4 83 7 is_stmt 0 view .LVU432
 1924              	.LBE1683:
 1925              	.LBE1682:
 1926              	.LBE1681:
 1927              	.LBE1680:
 1928              	.LBB1684:
 1929              	.LBI1684:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 1930              		.loc 2 159 2 is_stmt 1 view .LVU433
 1931              	.LBB1685:
 1932              	.LBB1686:
 1933              	.LBI1686:
 1934              		.loc 5 99 5 view .LVU434
 1935              		.loc 5 99 5 is_stmt 0 view .LVU435
 1936              	.LBE1686:
ARM GAS  /tmp/ccOYETru.s 			page 253


 1937              	.LBB1687:
 1938              	.LBI1687:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1939              		.loc 3 141 7 is_stmt 1 view .LVU436
 1940              	.LBB1688:
 1941              	.LBI1688:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1942              		.loc 4 83 7 view .LVU437
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1943              		.loc 4 83 7 is_stmt 0 view .LVU438
 1944              	.LBE1688:
 1945              	.LBE1687:
 1946              	.LBE1685:
 1947              	.LBE1684:
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1948              		.loc 2 451 9 view .LVU439
 1949 00b4 6268     		ldr	r2, [r4, #4]
 1950              	.LBE1677:
 1951              	.LBE1676:
 1952              	.LBE1706:
 1953              	.LBB1707:
 1954              	.LBB1708:
 829:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 1955              		.loc 15 829 2 view .LVU440
 1956 00b6 1834     		adds	r4, r4, #24
 1957              	.LVL94:
 829:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h **** 	return *this;
 1958              		.loc 15 829 2 view .LVU441
 1959              	.LBE1708:
 1960              	.LBE1707:
 1961              	.LBB1709:
 1962              	.LBB1705:
 1963              	.LBB1704:
 1964              	.LBB1690:
 1965              	.LBB1689:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 1966              		.loc 2 160 46 view .LVU442
 1967 00b8 45F8085C 		str	r5, [r5, #-8]
 1968              	.LVL95:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 1969              		.loc 2 160 46 view .LVU443
 1970              	.LBE1689:
 1971              	.LBE1690:
 1972              	.LBB1691:
 1973              	.LBI1691:
 1974              		.loc 3 153 7 is_stmt 1 view .LVU444
 1975              	.LBB1692:
 1976              	.LBI1692:
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 1977              		.loc 4 89 7 view .LVU445
 1978              	.LBE1692:
 1979              	.LBE1691:
 1980              	.LBB1693:
 1981              	.LBB1694:
 1982              	.LBB1695:
 1983              	.LBB1696:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
ARM GAS  /tmp/ccOYETru.s 			page 254


 1984              		.loc 2 247 11 is_stmt 0 view .LVU446
 1985 00bc A5F10800 		sub	r0, r5, #8
 1986              	.LVL96:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 1987              		.loc 2 247 11 view .LVU447
 1988              	.LBE1696:
 1989              	.LBE1695:
 1990              	.LBE1694:
 1991              	.LBE1693:
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 1992              		.loc 2 451 9 view .LVU448
 1993 00c0 54F8181C 		ldr	r1, [r4, #-24]
 1994              	.LBB1700:
 1995              	.LBI1700:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1996              		.loc 2 186 7 is_stmt 1 view .LVU449
 1997              	.LVL97:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1998              		.loc 2 186 7 is_stmt 0 view .LVU450
 1999              	.LBE1700:
 2000              	.LBB1701:
 2001              	.LBI1701:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2002              		.loc 2 186 7 is_stmt 1 view .LVU451
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2003              		.loc 2 186 7 is_stmt 0 view .LVU452
 2004              	.LBE1701:
 2005              	.LBB1702:
 2006              	.LBI1702:
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 2007              		.loc 2 936 7 is_stmt 1 view .LVU453
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 2008              		.loc 2 936 7 is_stmt 0 view .LVU454
 2009              	.LBE1702:
 2010              	.LBB1703:
 2011              	.LBI1693:
 263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
 2012              		.loc 2 263 9 is_stmt 1 view .LVU455
 2013              	.LBB1699:
 2014              	.LBB1698:
 2015              	.LBI1695:
 243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 std::__false_type)
 2016              		.loc 2 243 9 view .LVU456
 2017              	.LBB1697:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 2018              		.loc 2 247 11 is_stmt 0 view .LVU457
 2019 00c4 4FF00003 		mov	r3, #0
 2020 00c8 1835     		adds	r5, r5, #24
 2021 00ca 0A44     		add	r2, r2, r1
 2022 00cc FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 2023              	.LVL98:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 2024              		.loc 2 247 11 view .LVU458
 2025              	.LBE1697:
 2026              	.LBE1698:
 2027              	.LBE1699:
 2028              	.LBE1703:
ARM GAS  /tmp/ccOYETru.s 			page 255


 2029              	.LBE1704:
 2030              	.LBE1705:
 2031              	.LBE1709:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2032              		.loc 17 82 8 is_stmt 1 view .LVU459
 2033              	.LBB1710:
 2034              	.LBI1707:
 827:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 2035              		.loc 15 827 7 view .LVU460
 827:/usr/include/newlib/c++/9.2.1/bits/stl_iterator.h ****       {
 2036              		.loc 15 827 7 is_stmt 0 view .LVU461
 2037              	.LBE1710:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2038              		.loc 17 82 23 is_stmt 1 view .LVU462
 2039 00d0 A045     		cmp	r8, r4
 2040 00d2 EFD1     		bne	.L65
 2041              	.LVL99:
 2042              	.L66:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2043              		.loc 17 82 23 is_stmt 0 view .LVU463
 2044              	.LBE1711:
 2045              	.LBE1712:
 2046              	.LBE1713:
 2047              	.LBE1714:
 2048              	.LBE1715:
 2049              	.LBE1717:
 2050              	.LBE1719:
 228:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 2051              		.loc 13 228 21 view .LVU464
 2052 00d4 D7E90058 		ldrd	r5, r8, [r7]
 2053              	.LVL100:
 2054              	.LBB1720:
 2055              	.LBI1720:
 2056              		.loc 16 203 5 is_stmt 1 view .LVU465
 2057              	.LBB1721:
 2058              	.LBB1722:
 2059              	.LBB1723:
 2060              	.LBB1724:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2061              		.loc 16 107 19 view .LVU466
 2062 00d8 4545     		cmp	r5, r8
 2063 00da 0DD0     		beq	.L63
 2064 00dc 05F10804 		add	r4, r5, #8
 2065              	.LVL101:
 2066              	.L68:
 2067              	.LBB1725:
 2068              	.LBI1725:
  97:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 2069              		.loc 16 97 5 view .LVU467
 2070              	.LBB1726:
 2071              	.LBI1726:
 657:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_dispose(); }
 2072              		.loc 2 657 7 view .LVU468
 2073              	.LBB1727:
 2074              	.LBI1727:
 229:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2075              		.loc 2 229 7 view .LVU469
ARM GAS  /tmp/ccOYETru.s 			page 256


 2076              	.LBB1728:
 2077              	.LBB1729:
 2078              	.LBI1729:
 221:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2079              		.loc 2 221 7 view .LVU470
 2080              	.LBB1730:
 222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 2081              		.loc 2 222 26 is_stmt 0 view .LVU471
 2082 00e0 54F8080C 		ldr	r0, [r4, #-8]
 2083              	.LVL102:
 222:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 2084              		.loc 2 222 26 view .LVU472
 2085              	.LBE1730:
 2086              	.LBE1729:
 231:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2087              		.loc 2 231 2 view .LVU473
 2088 00e4 A042     		cmp	r0, r4
 2089 00e6 01D0     		beq	.L67
 2090              	.LVL103:
 2091              	.LBB1731:
 2092              	.LBI1731:
 236:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2093              		.loc 2 236 7 is_stmt 1 view .LVU474
 2094              	.LBB1732:
 2095              	.LBB1733:
 2096              	.LBI1733:
 469:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2097              		.loc 12 469 7 view .LVU475
 2098              	.LBB1734:
 2099              	.LBI1734:
 119:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       {
 2100              		.loc 4 119 7 view .LVU476
 2101              	.LBB1735:
 2102              		.loc 4 128 19 is_stmt 0 view .LVU477
 2103 00e8 FFF7FEFF 		bl	_ZdlPv
 2104              	.LVL104:
 2105              	.L67:
 2106              		.loc 4 128 19 view .LVU478
 2107              	.LBE1735:
 2108              	.LBE1734:
 2109              	.LBE1733:
 2110              	.LBE1732:
 2111              	.LBE1731:
 2112              	.LBE1728:
 2113              	.LBE1727:
 2114              	.LBB1736:
 2115              	.LBI1736:
 150:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2116              		.loc 2 150 14 is_stmt 1 view .LVU479
 2117              	.LBB1737:
 2118              	.LBI1737:
 2119              		.loc 3 153 7 view .LVU480
 2120              	.LBB1738:
 2121              	.LBI1738:
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2122              		.loc 4 89 7 view .LVU481
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 257


 2123              		.loc 4 89 7 is_stmt 0 view .LVU482
 2124              	.LBE1738:
 2125              	.LBE1737:
 2126              	.LBE1736:
 2127              	.LBE1726:
 2128              	.LBE1725:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2129              		.loc 16 107 4 is_stmt 1 view .LVU483
 2130 00ec 1835     		adds	r5, r5, #24
 2131              	.LVL105:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2132              		.loc 16 107 19 view .LVU484
 2133 00ee 1834     		adds	r4, r4, #24
 2134 00f0 A845     		cmp	r8, r5
 2135 00f2 F5D1     		bne	.L68
 2136 00f4 D7F80080 		ldr	r8, [r7]
 2137              	.LVL106:
 2138              	.L63:
 107:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2139              		.loc 16 107 19 is_stmt 0 view .LVU485
 2140              	.LBE1724:
 2141              	.LBE1723:
 2142              	.LBE1722:
 2143              	.LBE1721:
 2144              	.LBE1720:
 2145              	.LBB1739:
 2146              	.LBI1739:
 347:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       {
 2147              		.loc 7 347 7 is_stmt 1 view .LVU486
 2148              	.LBB1740:
 350:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2149              		.loc 7 350 2 is_stmt 0 view .LVU487
 2150 00f8 B8F1000F 		cmp	r8, #0
 2151 00fc 02D0     		beq	.L69
 2152              	.LVL107:
 2153              	.LBB1741:
 2154              	.LBI1741:
 469:/usr/include/newlib/c++/9.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2155              		.loc 12 469 7 is_stmt 1 view .LVU488
 2156              	.LBB1742:
 2157              	.LBB1743:
 2158              	.LBI1743:
 119:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h ****       {
 2159              		.loc 4 119 7 view .LVU489
 2160              	.LBB1744:
 2161              		.loc 4 128 19 is_stmt 0 view .LVU490
 2162 00fe 4046     		mov	r0, r8
 2163 0100 FFF7FEFF 		bl	_ZdlPv
 2164              	.LVL108:
 2165              	.L69:
 2166              		.loc 4 128 19 view .LVU491
 2167              	.LBE1744:
 2168              	.LBE1743:
 2169              	.LBE1742:
 2170              	.LBE1741:
 2171              	.LBE1740:
 2172              	.LBE1739:
ARM GAS  /tmp/ccOYETru.s 			page 258


 234:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
 2173              		.loc 13 234 65 view .LVU492
 2174 0104 019B     		ldr	r3, [sp, #4]
 233:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 2175              		.loc 13 233 8 view .LVU493
 2176 0106 3E60     		str	r6, [r7]
 234:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
 2177              		.loc 13 234 65 view .LVU494
 2178 0108 3344     		add	r3, r3, r6
 2179 010a 1D46     		mov	r5, r3
 234:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 	    }
 2180              		.loc 13 234 8 view .LVU495
 2181 010c BB60     		str	r3, [r7, #8]
 2182              	.LBE1746:
 2183 010e BEE7     		b	.L70
 2184              	.LVL109:
 2185              	.L71:
 2186              	.LBB1747:
 2187              	.LBB1748:
 2188              	.LBB1749:
 2189              	.LBB1750:
 2190              	.LBB1751:
 2191              	.LBB1752:
 2192              	.LBB1753:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 2193              		.loc 14 340 46 is_stmt 1 view .LVU496
 2194 0110 0029     		cmp	r1, #0
 2195 0112 11DD     		ble	.L77
 2196              	.LVL110:
 2197              	.L78:
 2198              	.LBB1754:
 2199              	.LBI1754:
 665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2200              		.loc 2 665 7 view .LVU497
 2201              	.LBB1755:
 2202              	.LBI1755:
1364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2203              		.loc 2 1364 7 view .LVU498
 2204              	.LBB1756:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 2205              		.loc 2 1366 2 is_stmt 0 view .LVU499
 2206 0114 2146     		mov	r1, r4
 2207 0116 2846     		mov	r0, r5
 2208 0118 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_
 2209              	.LVL111:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 2210              		.loc 2 1366 2 view .LVU500
 2211              	.LBE1756:
 2212              	.LBE1755:
 2213              	.LBE1754:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 2214              		.loc 14 340 46 view .LVU501
 2215 011c BBF1010B 		subs	fp, fp, #1
 2216              	.LVL112:
 343:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	      ++__result;
 2217              		.loc 14 343 8 view .LVU502
 2218 0120 04F11804 		add	r4, r4, #24
ARM GAS  /tmp/ccOYETru.s 			page 259


 2219              	.LVL113:
 2220              		.loc 14 344 8 view .LVU503
 2221 0124 05F11805 		add	r5, r5, #24
 2222              	.LVL114:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 2223              		.loc 14 340 4 is_stmt 1 view .LVU504
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 2224              		.loc 14 340 46 view .LVU505
 2225 0128 F4D1     		bne	.L78
 2226 012a D9F80040 		ldr	r4, [r9]
 2227              	.LVL115:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 2228              		.loc 14 340 46 is_stmt 0 view .LVU506
 2229 012e D9F80480 		ldr	r8, [r9, #4]
 2230 0132 D7E90056 		ldrd	r5, r6, [r7]
 2231              	.LVL116:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 2232              		.loc 14 340 46 view .LVU507
 2233 0136 711B     		subs	r1, r6, r5
 2234              	.L77:
 2235              	.LVL117:
 340:/usr/include/newlib/c++/9.2.1/bits/stl_algobase.h **** 	    {
 2236              		.loc 14 340 46 view .LVU508
 2237              	.LBE1753:
 2238              	.LBE1752:
 2239              	.LBE1751:
 2240              	.LBE1750:
 2241              	.LBE1749:
 2242              	.LBE1748:
 2243              	.LBE1747:
 245:/usr/include/newlib/c++/9.2.1/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 2244              		.loc 13 245 35 view .LVU509
 2245 0138 0C44     		add	r4, r4, r1
 2246              	.LVL118:
 2247              	.LBB1757:
 2248              	.LBI1757:
 2249              		.loc 17 305 5 is_stmt 1 view .LVU510
 2250              	.LBB1758:
 2251              	.LBI1758:
 115:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 2252              		.loc 17 115 5 view .LVU511
 2253              	.LBB1759:
 2254              	.LBB1760:
 2255              	.LBI1760:
  76:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 2256              		.loc 17 76 9 view .LVU512
 2257              	.LBB1761:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2258              		.loc 17 82 23 view .LVU513
 2259 013a 4445     		cmp	r4, r8
 2260 013c A5D0     		beq	.L92
 2261 013e 0836     		adds	r6, r6, #8
 2262              	.LVL119:
 2263              	.L80:
 2264              	.LBB1762:
 2265              	.LBI1762:
  74:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
ARM GAS  /tmp/ccOYETru.s 			page 260


 2266              		.loc 16 74 5 view .LVU514
  74:/usr/include/newlib/c++/9.2.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 2267              		.loc 16 74 5 is_stmt 0 view .LVU515
 2268              	.LBE1762:
 2269              	.LBE1761:
 2270              	.LBE1760:
 2271              	.LBE1759:
 2272              	.LBE1758:
 2273              	.LBE1757:
 2274              	.LBE1815:
 2275              	.LBE1818:
 2276              	.LBE1822:
 2277              		.loc 18 174 3 is_stmt 1 view .LVU516
 2278              	.LBB1823:
 2279              	.LBB1819:
 2280              	.LBB1816:
 2281              	.LBB1799:
 2282              	.LBB1798:
 2283              	.LBB1797:
 2284              	.LBB1796:
 2285              	.LBB1795:
 2286              	.LBB1793:
 2287              	.LBB1763:
 2288              	.LBI1763:
 448:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 2289              		.loc 2 448 7 view .LVU517
 2290              	.LBB1764:
 2291              	.LBB1765:
 2292              	.LBI1765:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2293              		.loc 2 190 7 view .LVU518
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2294              		.loc 2 190 7 is_stmt 0 view .LVU519
 2295              	.LBE1765:
 2296              	.LBB1766:
 2297              	.LBI1766:
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 2298              		.loc 2 290 7 is_stmt 1 view .LVU520
 290:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus; }
 2299              		.loc 2 290 7 is_stmt 0 view .LVU521
 2300              	.LBE1766:
 2301              	.LBB1767:
 2302              	.LBI1767:
 2303              		.loc 11 97 19 is_stmt 1 view .LVU522
 2304              	.LBB1768:
 2305              	.LBI1768:
 2306              		.loc 12 514 7 view .LVU523
 2307              	.LBB1769:
 2308              	.LBI1769:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2309              		.loc 3 141 7 view .LVU524
 2310              	.LBB1770:
 2311              	.LBI1770:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2312              		.loc 4 83 7 view .LVU525
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2313              		.loc 4 83 7 is_stmt 0 view .LVU526
ARM GAS  /tmp/ccOYETru.s 			page 261


 2314              	.LBE1770:
 2315              	.LBE1769:
 2316              	.LBE1768:
 2317              	.LBE1767:
 2318              	.LBB1771:
 2319              	.LBI1771:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 2320              		.loc 2 159 2 is_stmt 1 view .LVU527
 2321              	.LBB1772:
 2322              	.LBB1773:
 2323              	.LBI1773:
 2324              		.loc 5 99 5 view .LVU528
 2325              		.loc 5 99 5 is_stmt 0 view .LVU529
 2326              	.LBE1773:
 2327              	.LBB1774:
 2328              	.LBI1774:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2329              		.loc 3 141 7 is_stmt 1 view .LVU530
 2330              	.LBB1775:
 2331              	.LBI1775:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2332              		.loc 4 83 7 view .LVU531
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2333              		.loc 4 83 7 is_stmt 0 view .LVU532
 2334              	.LBE1775:
 2335              	.LBE1774:
 2336              	.LBE1772:
 2337              	.LBE1771:
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 2338              		.loc 2 451 9 view .LVU533
 2339 0140 6268     		ldr	r2, [r4, #4]
 2340              	.LBE1764:
 2341              	.LBE1763:
 2342              	.LBE1793:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2343              		.loc 17 82 8 view .LVU534
 2344 0142 1834     		adds	r4, r4, #24
 2345              	.LVL120:
 2346              	.LBB1794:
 2347              	.LBB1792:
 2348              	.LBB1791:
 2349              	.LBB1777:
 2350              	.LBB1776:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 2351              		.loc 2 160 46 view .LVU535
 2352 0144 46F8086C 		str	r6, [r6, #-8]
 2353              	.LVL121:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 2354              		.loc 2 160 46 view .LVU536
 2355              	.LBE1776:
 2356              	.LBE1777:
 2357              	.LBB1778:
 2358              	.LBI1778:
 2359              		.loc 3 153 7 is_stmt 1 view .LVU537
 2360              	.LBB1779:
 2361              	.LBI1779:
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 262


 2362              		.loc 4 89 7 view .LVU538
 2363              	.LBE1779:
 2364              	.LBE1778:
 2365              	.LBB1780:
 2366              	.LBB1781:
 2367              	.LBB1782:
 2368              	.LBB1783:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 2369              		.loc 2 247 11 is_stmt 0 view .LVU539
 2370 0148 A6F10800 		sub	r0, r6, #8
 2371              	.LVL122:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 2372              		.loc 2 247 11 view .LVU540
 2373              	.LBE1783:
 2374              	.LBE1782:
 2375              	.LBE1781:
 2376              	.LBE1780:
 451:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 2377              		.loc 2 451 9 view .LVU541
 2378 014c 54F8181C 		ldr	r1, [r4, #-24]
 2379              	.LBB1787:
 2380              	.LBI1787:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2381              		.loc 2 186 7 is_stmt 1 view .LVU542
 2382              	.LVL123:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2383              		.loc 2 186 7 is_stmt 0 view .LVU543
 2384              	.LBE1787:
 2385              	.LBB1788:
 2386              	.LBI1788:
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2387              		.loc 2 186 7 is_stmt 1 view .LVU544
 186:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2388              		.loc 2 186 7 is_stmt 0 view .LVU545
 2389              	.LBE1788:
 2390              	.LBB1789:
 2391              	.LBI1789:
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 2392              		.loc 2 936 7 is_stmt 1 view .LVU546
 936:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { return _M_string_length; }
 2393              		.loc 2 936 7 is_stmt 0 view .LVU547
 2394              	.LBE1789:
 2395              	.LBB1790:
 2396              	.LBI1780:
 263:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	{
 2397              		.loc 2 263 9 is_stmt 1 view .LVU548
 2398              	.LBB1786:
 2399              	.LBB1785:
 2400              	.LBI1782:
 243:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 			 std::__false_type)
 2401              		.loc 2 243 9 view .LVU549
 2402              	.LBB1784:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 2403              		.loc 2 247 11 is_stmt 0 view .LVU550
 2404 0150 4FF00003 		mov	r3, #0
 2405 0154 1836     		adds	r6, r6, #24
 2406 0156 0A44     		add	r2, r2, r1
ARM GAS  /tmp/ccOYETru.s 			page 263


 2407 0158 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 2408              	.LVL124:
 247:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	}
 2409              		.loc 2 247 11 view .LVU551
 2410              	.LBE1784:
 2411              	.LBE1785:
 2412              	.LBE1786:
 2413              	.LBE1790:
 2414              	.LBE1791:
 2415              	.LBE1792:
 2416              	.LBE1794:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2417              		.loc 17 82 8 is_stmt 1 view .LVU552
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2418              		.loc 17 82 23 view .LVU553
 2419 015c A045     		cmp	r8, r4
 2420 015e EFD1     		bne	.L80
 2421 0160 92E7     		b	.L74
 2422              	.LVL125:
 2423              	.L94:
  82:/usr/include/newlib/c++/9.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 2424              		.loc 17 82 23 is_stmt 0 view .LVU554
 2425              	.LBE1795:
 2426              	.LBE1796:
 2427              	.LBE1797:
 2428              	.LBE1798:
 2429              	.LBE1799:
 2430              	.LBB1800:
 2431              	.LBB1745:
 2432              	.LBB1718:
 2433              	.LBB1716:
 2434              	.LBB1669:
 343:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h ****       }
 2435              		.loc 7 343 18 view .LVU555
 2436 0162 5646     		mov	r6, r10
 2437 0164 A2E7     		b	.L60
 2438              	.LVL126:
 2439              	.L95:
 2440              	.LBB1668:
 2441              	.LBB1667:
 2442              	.LBB1666:
 105:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2443              		.loc 4 105 26 view .LVU556
 2444 0166 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 2445              	.LVL127:
 2446              	.L97:
 105:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2447              		.loc 4 105 26 view .LVU557
 2448 016a 00BF     		.align	2
 2449              	.L96:
 2450 016c ABAAAAAA 		.word	-1431655765
 2451 0170 55555505 		.word	89478485
 2452              	.LBE1666:
 2453              	.LBE1667:
 2454              	.LBE1668:
 2455              	.LBE1669:
 2456              	.LBE1716:
ARM GAS  /tmp/ccOYETru.s 			page 264


 2457              	.LBE1718:
 2458              	.LBE1745:
 2459              	.LBE1800:
 2460              	.LBE1816:
 2461              	.LBE1819:
 2462              	.LBE1823:
 2463              		.cfi_endproc
 2464              	.LFE2510:
 2466              		.section	.text._ZN2mu8MenuItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_
 2467              		.align	1
 2468              		.p2align 2,,3
 2469              		.global	_ZN2mu8MenuItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_E
 2470              		.syntax unified
 2471              		.thumb
 2472              		.thumb_func
 2473              		.fpu fpv5-d16
 2475              	_ZN2mu8MenuItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEiSt8func
 2476              	.LVL128:
 2477              	.LFB2251:
  22:Mu/logistics/menuitem.cpp ****     name = aName;
 2478              		.loc 1 22 1 is_stmt 1 view -0
 2479              		.cfi_startproc
 2480              		@ args = 4, pretend = 0, frame = 24
 2481              		@ frame_needed = 0, uses_anonymous_args = 0
  22:Mu/logistics/menuitem.cpp ****     name = aName;
 2482              		.loc 1 22 1 is_stmt 0 view .LVU559
 2483 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2484              		.cfi_def_cfa_offset 24
 2485              		.cfi_offset 4, -24
 2486              		.cfi_offset 5, -20
 2487              		.cfi_offset 6, -16
 2488              		.cfi_offset 7, -12
 2489              		.cfi_offset 8, -8
 2490              		.cfi_offset 14, -4
 2491 0004 0446     		mov	r4, r0
 2492              	.LVL129:
 2493              	.LBB1899:
 2494              	.LBB1900:
 2495              	.LBI1900:
 431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 2496              		.loc 2 431 7 is_stmt 1 view .LVU560
 2497              	.LBB1901:
 2498              	.LBI1901:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2499              		.loc 2 190 7 view .LVU561
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2500              		.loc 2 190 7 is_stmt 0 view .LVU562
 2501              	.LBE1901:
 2502              	.LBB1903:
 2503              	.LBI1903:
 138:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 2504              		.loc 3 138 7 is_stmt 1 view .LVU563
 2505              	.LBB1904:
 2506              	.LBI1904:
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2507              		.loc 4 80 7 view .LVU564
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 265


 2508              		.loc 4 80 7 is_stmt 0 view .LVU565
 2509              	.LBE1904:
 2510              	.LBE1903:
 2511              	.LBB1905:
 2512              	.LBI1905:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 2513              		.loc 2 159 2 is_stmt 1 view .LVU566
 2514              	.LBB1906:
 2515              	.LBB1907:
 2516              	.LBI1907:
 2517              		.loc 5 99 5 view .LVU567
 2518              		.loc 5 99 5 is_stmt 0 view .LVU568
 2519              	.LBE1907:
 2520              	.LBB1908:
 2521              	.LBI1908:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2522              		.loc 3 141 7 is_stmt 1 view .LVU569
 2523              	.LBB1909:
 2524              	.LBI1909:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2525              		.loc 4 83 7 view .LVU570
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2526              		.loc 4 83 7 is_stmt 0 view .LVU571
 2527              	.LBE1909:
 2528              	.LBE1908:
 2529              	.LBE1906:
 2530              	.LBE1905:
 2531              	.LBB1911:
 2532              	.LBB1912:
 2533              	.LBB1913:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 2534              		.loc 2 183 9 view .LVU572
 2535 0006 0025     		movs	r5, #0
 2536              	.LBE1913:
 2537              	.LBE1912:
 2538              	.LBE1911:
 2539              	.LBE1900:
 2540              	.LBE1899:
  22:Mu/logistics/menuitem.cpp ****     name = aName;
 2541              		.loc 1 22 1 view .LVU573
 2542 0008 86B0     		sub	sp, sp, #24
 2543              		.cfi_def_cfa_offset 48
  22:Mu/logistics/menuitem.cpp ****     name = aName;
 2544              		.loc 1 22 1 view .LVU574
 2545 000a 1646     		mov	r6, r2
 2546 000c 9846     		mov	r8, r3
 2547              	.LBB2007:
 2548              	.LBB1925:
 2549              	.LBB1919:
 2550              	.LBB1902:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 2551              		.loc 2 193 51 view .LVU575
 2552 000e 00F10C02 		add	r2, r0, #12
 2553              	.LVL130:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 2554              		.loc 2 193 51 view .LVU576
 2555              	.LBE1902:
ARM GAS  /tmp/ccOYETru.s 			page 266


 2556              	.LBE1919:
 2557              	.LBE1925:
 2558              	.LBB1926:
 2559              	.LBB1927:
 2560              	.LBB1928:
 2561 0012 00F12403 		add	r3, r0, #36
 2562              	.LVL131:
 193:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #else
 2563              		.loc 2 193 51 view .LVU577
 2564              	.LBE1928:
 2565              	.LBE1927:
 2566              	.LBE1926:
 2567              	.LBE2007:
  22:Mu/logistics/menuitem.cpp ****     name = aName;
 2568              		.loc 1 22 1 view .LVU578
 2569 0016 0C9F     		ldr	r7, [sp, #48]
 2570              	.LBB2008:
 2571              	.LBB1946:
 2572              	.LBB1920:
 2573              	.LBB1910:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 2574              		.loc 2 160 46 view .LVU579
 2575 0018 C0E90125 		strd	r2, r5, [r0, #4]
 2576              	.LVL132:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 2577              		.loc 2 160 46 view .LVU580
 2578              	.LBE1910:
 2579              	.LBE1920:
 2580              	.LBB1921:
 2581              	.LBI1921:
 2582              		.loc 3 153 7 is_stmt 1 view .LVU581
 2583              	.LBB1922:
 2584              	.LBI1922:
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2585              		.loc 4 89 7 view .LVU582
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2586              		.loc 4 89 7 is_stmt 0 view .LVU583
 2587              	.LBE1922:
 2588              	.LBE1921:
 2589              	.LBB1923:
 2590              	.LBI1911:
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2591              		.loc 2 214 7 is_stmt 1 view .LVU584
 2592              	.LBB1914:
 2593              	.LBI1912:
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 2594              		.loc 2 182 7 view .LVU585
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 2595              		.loc 2 182 7 is_stmt 0 view .LVU586
 2596              	.LBE1914:
 2597              	.LBB1915:
 2598              	.LBI1915:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 2599              		.loc 6 299 7 is_stmt 1 view .LVU587
 2600              	.LBB1916:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 2601              		.loc 6 300 9 view .LVU588
ARM GAS  /tmp/ccOYETru.s 			page 267


 2602              	.LBE1916:
 2603              	.LBE1915:
 2604              	.LBE1923:
 2605              	.LBE1946:
 2606              	.LBB1947:
 2607              	.LBB1948:
 2608              	.LBB1949:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 2609              		.loc 2 1366 2 is_stmt 0 view .LVU589
 2610 001c 0430     		adds	r0, r0, #4
 2611              	.LVL133:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 2612              		.loc 2 1366 2 view .LVU590
 2613              	.LBE1949:
 2614              	.LBE1948:
 2615              	.LBE1947:
 2616              	.LBB1953:
 2617              	.LBB1929:
 2618              	.LBB1930:
 160:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** #endif
 2619              		.loc 2 160 46 view .LVU591
 2620 001e E361     		str	r3, [r4, #28]
 2621              	.LBE1930:
 2622              	.LBE1929:
 2623              	.LBE1953:
 2624              	.LBB1954:
 2625              	.LBB1924:
 2626              	.LBB1918:
 2627              	.LBB1917:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 2628              		.loc 6 300 14 view .LVU592
 2629 0020 2573     		strb	r5, [r4, #12]
 2630              	.LVL134:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 2631              		.loc 6 300 14 view .LVU593
 2632              	.LBE1917:
 2633              	.LBE1918:
 2634              	.LBE1924:
 2635              	.LBE1954:
 2636              	.LBB1955:
 2637              	.LBI1926:
 431:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 2638              		.loc 2 431 7 is_stmt 1 view .LVU594
 2639              	.LBB1935:
 2640              	.LBI1927:
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2641              		.loc 2 190 7 view .LVU595
 190:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2642              		.loc 2 190 7 is_stmt 0 view .LVU596
 2643              	.LBE1935:
 2644              	.LBB1936:
 2645              	.LBI1936:
 138:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 2646              		.loc 3 138 7 is_stmt 1 view .LVU597
 2647              	.LBB1937:
 2648              	.LBI1937:
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 268


 2649              		.loc 4 80 7 view .LVU598
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2650              		.loc 4 80 7 is_stmt 0 view .LVU599
 2651              	.LBE1937:
 2652              	.LBE1936:
 2653              	.LBB1938:
 2654              	.LBI1929:
 159:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 2655              		.loc 2 159 2 is_stmt 1 view .LVU600
 2656              	.LBB1934:
 2657              	.LBB1931:
 2658              	.LBI1931:
 2659              		.loc 5 99 5 view .LVU601
 2660              		.loc 5 99 5 is_stmt 0 view .LVU602
 2661              	.LBE1931:
 2662              	.LBB1932:
 2663              	.LBI1932:
 141:/usr/include/newlib/c++/9.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2664              		.loc 3 141 7 is_stmt 1 view .LVU603
 2665              	.LBB1933:
 2666              	.LBI1933:
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2667              		.loc 4 83 7 view .LVU604
  83:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2668              		.loc 4 83 7 is_stmt 0 view .LVU605
 2669              	.LBE1933:
 2670              	.LBE1932:
 2671              	.LBE1934:
 2672              	.LBE1938:
 2673              	.LBB1939:
 2674              	.LBI1939:
 2675              		.loc 3 153 7 is_stmt 1 view .LVU606
 2676              	.LBB1940:
 2677              	.LBI1940:
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2678              		.loc 4 89 7 view .LVU607
  89:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2679              		.loc 4 89 7 is_stmt 0 view .LVU608
 2680              	.LBE1940:
 2681              	.LBE1939:
 2682              	.LBB1941:
 2683              	.LBI1941:
 214:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2684              		.loc 2 214 7 is_stmt 1 view .LVU609
 2685              	.LBB1942:
 2686              	.LBI1942:
 182:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       { _M_string_length = __length; }
 2687              		.loc 2 182 7 view .LVU610
 2688              	.LBB1943:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 2689              		.loc 2 183 9 is_stmt 0 view .LVU611
 2690 0022 2562     		str	r5, [r4, #32]
 2691              	.LVL135:
 183:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 
 2692              		.loc 2 183 9 view .LVU612
 2693              	.LBE1943:
 2694              	.LBE1942:
ARM GAS  /tmp/ccOYETru.s 			page 269


 2695              	.LBB1944:
 2696              	.LBI1944:
 299:/usr/include/newlib/c++/9.2.1/bits/char_traits.h ****       { __c1 = __c2; }
 2697              		.loc 6 299 7 is_stmt 1 view .LVU613
 2698              	.LBB1945:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 2699              		.loc 6 300 9 view .LVU614
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 2700              		.loc 6 300 14 is_stmt 0 view .LVU615
 2701 0024 84F82450 		strb	r5, [r4, #36]
 2702              	.LVL136:
 300:/usr/include/newlib/c++/9.2.1/bits/char_traits.h **** 
 2703              		.loc 6 300 14 view .LVU616
 2704              	.LBE1945:
 2705              	.LBE1944:
 2706              	.LBE1941:
 2707              	.LBE1955:
 2708              	.LBB1956:
 2709              	.LBI1956:
 484:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 2710              		.loc 7 484 7 is_stmt 1 view .LVU617
 2711              	.LBB1957:
 2712              	.LBI1957:
 285:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** #else
 2713              		.loc 7 285 7 view .LVU618
 2714              	.LBB1958:
 2715              	.LBI1958:
 128:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 2716              		.loc 7 128 2 view .LVU619
 2717              	.LBB1959:
 2718              	.LBI1959:
 138:/usr/include/newlib/c++/9.2.1/bits/allocator.h **** 
 2719              		.loc 3 138 7 view .LVU620
 2720              	.LBB1960:
 2721              	.LBI1960:
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2722              		.loc 4 80 7 view .LVU621
  80:/usr/include/newlib/c++/9.2.1/ext/new_allocator.h **** 
 2723              		.loc 4 80 7 is_stmt 0 view .LVU622
 2724              	.LBE1960:
 2725              	.LBE1959:
 2726              	.LBB1961:
 2727              	.LBI1961:
  94:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 2728              		.loc 7 94 2 is_stmt 1 view .LVU623
 2729              	.LBB1962:
  95:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 2730              		.loc 7 95 47 is_stmt 0 view .LVU624
 2731 0028 E563     		str	r5, [r4, #60]
 2732              	.LVL137:
  95:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 2733              		.loc 7 95 47 view .LVU625
 2734              	.LBE1962:
 2735              	.LBE1961:
 2736              	.LBE1958:
 2737              	.LBE1957:
 2738              	.LBE1956:
ARM GAS  /tmp/ccOYETru.s 			page 270


 2739              	.LBB1967:
 2740              	.LBI1967:
 396:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       : _Function_base() { }
 2741              		.loc 8 396 7 is_stmt 1 view .LVU626
 2742              	.LBB1968:
 2743              	.LBI1968:
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2744              		.loc 8 255 5 view .LVU627
 2745              	.LBB1969:
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2746              		.loc 8 255 42 is_stmt 0 view .LVU628
 2747 002a A564     		str	r5, [r4, #72]
 2748              	.LVL138:
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2749              		.loc 8 255 42 view .LVU629
 2750              	.LBE1969:
 2751              	.LBE1968:
 2752              	.LBE1967:
  23:Mu/logistics/menuitem.cpp ****     values = aValues;
 2753              		.loc 1 23 5 is_stmt 1 view .LVU630
 2754              	.LBB1970:
 2755              	.LBI1947:
 665:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2756              		.loc 2 665 7 view .LVU631
 2757              	.LBB1951:
 2758              	.LBI1948:
1364:/usr/include/newlib/c++/9.2.1/bits/basic_string.h ****       {
 2759              		.loc 2 1364 7 view .LVU632
 2760              	.LBE1951:
 2761              	.LBE1970:
 2762              	.LBB1971:
 2763              	.LBB1966:
 2764              	.LBB1965:
 2765              	.LBB1964:
 2766              	.LBB1963:
  95:/usr/include/newlib/c++/9.2.1/bits/stl_vector.h **** 	{ }
 2767              		.loc 7 95 47 is_stmt 0 view .LVU633
 2768 002c C4E90D55 		strd	r5, r5, [r4, #52]
 2769              	.LBE1963:
 2770              	.LBE1964:
 2771              	.LBE1965:
 2772              	.LBE1966:
 2773              	.LBE1971:
 2774              	.LBB1972:
 2775              	.LBB1952:
 2776              	.LBB1950:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 2777              		.loc 2 1366 2 view .LVU634
 2778 0030 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_
 2779              	.LVL139:
1366:/usr/include/newlib/c++/9.2.1/bits/basic_string.h **** 	return *this;
 2780              		.loc 2 1366 2 view .LVU635
 2781              	.LBE1950:
 2782              	.LBE1952:
 2783              	.LBE1972:
  24:Mu/logistics/menuitem.cpp ****     index = aDefault;
 2784              		.loc 1 24 5 is_stmt 1 view .LVU636
ARM GAS  /tmp/ccOYETru.s 			page 271


  24:Mu/logistics/menuitem.cpp ****     index = aDefault;
 2785              		.loc 1 24 14 is_stmt 0 view .LVU637
 2786 0034 3146     		mov	r1, r6
 2787 0036 04F13400 		add	r0, r4, #52
 2788 003a FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_
 2789              	.LVL140:
  25:Mu/logistics/menuitem.cpp ****     myOnChangeCallback = cb;
 2790              		.loc 1 25 5 is_stmt 1 view .LVU638
 2791              	.LBB1973:
 2792              	.LBB1974:
 2793              	.LBB1975:
 2794              	.LBB1976:
 2795              	.LBB1977:
 2796              	.LBB1978:
 2797              	.LBB1979:
 565:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2798              		.loc 8 565 25 is_stmt 0 view .LVU639
 2799 003e BE68     		ldr	r6, [r7, #8]
 2800              	.LVL141:
 565:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2801              		.loc 8 565 25 view .LVU640
 2802              	.LBE1979:
 2803              	.LBE1978:
 2804              	.LBE1977:
 2805              	.LBE1976:
 2806              	.LBE1975:
 2807              	.LBE1974:
 2808              	.LBE1973:
  25:Mu/logistics/menuitem.cpp ****     myOnChangeCallback = cb;
 2809              		.loc 1 25 11 view .LVU641
 2810 0040 C4F80080 		str	r8, [r4]
  26:Mu/logistics/menuitem.cpp **** 
 2811              		.loc 1 26 5 is_stmt 1 view .LVU642
 2812              	.LVL142:
 2813              	.LBB2005:
 2814              	.LBI1973:
 462:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 2815              		.loc 8 462 7 view .LVU643
 2816              	.LBB2003:
 2817              	.LBB1988:
 2818              	.LBI1975:
 653:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     function(const function& __x)
 2819              		.loc 8 653 5 view .LVU644
 2820              	.LBB1986:
 2821              	.LBB1984:
 2822              	.LBB1980:
 2823              	.LBI1980:
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2824              		.loc 8 255 5 view .LVU645
 2825              	.LBB1981:
 2826              	.LBB1982:
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2827              		.loc 8 255 42 is_stmt 0 view .LVU646
 2828 0044 0495     		str	r5, [sp, #16]
 2829              	.LVL143:
 255:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2830              		.loc 8 255 42 view .LVU647
ARM GAS  /tmp/ccOYETru.s 			page 272


 2831              	.LBE1982:
 2832              	.LBE1981:
 2833              	.LBE1980:
 2834              	.LBB1983:
 2835              	.LBI1978:
 564:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       { return !_M_empty(); }
 2836              		.loc 8 564 16 is_stmt 1 view .LVU648
 564:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       { return !_M_empty(); }
 2837              		.loc 8 564 16 is_stmt 0 view .LVU649
 2838              	.LBE1983:
 2839              	.LBE1984:
 2840              	.LBE1986:
 2841              	.LBE1988:
 2842              	.LBE2003:
 2843              	.LBE2005:
 2844              	.LBE2008:
 263:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 
 2845              		.loc 8 263 29 is_stmt 1 view .LVU650
 2846              	.LBB2009:
 2847              	.LBB2006:
 2848              	.LBB2004:
 2849              	.LBB1989:
 2850              	.LBB1987:
 2851              	.LBB1985:
 657:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	{
 2852              		.loc 8 657 7 is_stmt 0 view .LVU651
 2853 0046 2EB3     		cbz	r6, .L106
 659:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_invoker = __x._M_invoker;
 2854              		.loc 8 659 8 view .LVU652
 2855 0048 02AD     		add	r5, sp, #8
 2856              	.LVL144:
 659:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	  _M_invoker = __x._M_invoker;
 2857              		.loc 8 659 8 view .LVU653
 2858 004a 0222     		movs	r2, #2
 2859 004c 3946     		mov	r1, r7
 2860 004e 2846     		mov	r0, r5
 2861 0050 B047     		blx	r6
 2862              	.LVL145:
 661:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 2863              		.loc 8 661 21 view .LVU654
 2864 0052 D7E9026C 		ldrd	r6, ip, [r7, #8]
 2865              	.L100:
 2866              	.LVL146:
 661:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	}
 2867              		.loc 8 661 21 view .LVU655
 2868              	.LBE1985:
 2869              	.LBE1987:
 2870              	.LBE1989:
 2871              	.LBB1990:
 2872              	.LBI1990:
 547:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****       {
 2873              		.loc 8 547 12 is_stmt 1 view .LVU656
 2874              	.LBB1991:
 2875              	.LBI1991:
 100:/usr/include/newlib/c++/9.2.1/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 101:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 102:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
ARM GAS  /tmp/ccOYETru.s 			page 273


 103:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
 104:/usr/include/newlib/c++/9.2.1/bits/move.h ****     struct __move_if_noexcept_cond
 105:/usr/include/newlib/c++/9.2.1/bits/move.h ****     : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
 106:/usr/include/newlib/c++/9.2.1/bits/move.h ****                     is_copy_constructible<_Tp>>::type { };
 107:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 108:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
 109:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @brief  Conditionally convert a value to an rvalue.
 110:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @param  __x  A thing of arbitrary type.
 111:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @return The parameter, possibly cast to an rvalue-reference.
 112:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *
 113:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  Same as std::move unless the type's move constructor could throw and the
 114:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  type is copyable, in which case an lvalue-reference is returned instead.
 115:/usr/include/newlib/c++/9.2.1/bits/move.h ****    */
 116:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
 117:/usr/include/newlib/c++/9.2.1/bits/move.h ****     constexpr typename
 118:/usr/include/newlib/c++/9.2.1/bits/move.h ****     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
 119:/usr/include/newlib/c++/9.2.1/bits/move.h ****     move_if_noexcept(_Tp& __x) noexcept
 120:/usr/include/newlib/c++/9.2.1/bits/move.h ****     { return std::move(__x); }
 121:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 122:/usr/include/newlib/c++/9.2.1/bits/move.h ****   // declval, from type_traits.
 123:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 124:/usr/include/newlib/c++/9.2.1/bits/move.h **** #if __cplusplus > 201402L
 125:/usr/include/newlib/c++/9.2.1/bits/move.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 126:/usr/include/newlib/c++/9.2.1/bits/move.h ****   // 2296. std::addressof should be constexpr
 127:/usr/include/newlib/c++/9.2.1/bits/move.h **** # define __cpp_lib_addressof_constexpr 201603
 128:/usr/include/newlib/c++/9.2.1/bits/move.h **** #endif
 129:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
 130:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @brief Returns the actual address of the object or function
 131:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *         referenced by r, even in the presence of an overloaded
 132:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *         operator&.
 133:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @param  __r  Reference to an object or function.
 134:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @return   The actual address.
 135:/usr/include/newlib/c++/9.2.1/bits/move.h ****   */
 136:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
 137:/usr/include/newlib/c++/9.2.1/bits/move.h ****     inline _GLIBCXX17_CONSTEXPR _Tp*
 138:/usr/include/newlib/c++/9.2.1/bits/move.h ****     addressof(_Tp& __r) noexcept
 139:/usr/include/newlib/c++/9.2.1/bits/move.h ****     { return std::__addressof(__r); }
 140:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 141:/usr/include/newlib/c++/9.2.1/bits/move.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 142:/usr/include/newlib/c++/9.2.1/bits/move.h ****   // 2598. addressof works on temporaries
 143:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
 144:/usr/include/newlib/c++/9.2.1/bits/move.h ****     const _Tp* addressof(const _Tp&&) = delete;
 145:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 146:/usr/include/newlib/c++/9.2.1/bits/move.h ****   // C++11 version of std::exchange for internal use.
 147:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template <typename _Tp, typename _Up = _Tp>
 148:/usr/include/newlib/c++/9.2.1/bits/move.h ****     inline _Tp
 149:/usr/include/newlib/c++/9.2.1/bits/move.h ****     __exchange(_Tp& __obj, _Up&& __new_val)
 150:/usr/include/newlib/c++/9.2.1/bits/move.h ****     {
 151:/usr/include/newlib/c++/9.2.1/bits/move.h ****       _Tp __old_val = std::move(__obj);
 152:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __obj = std::forward<_Up>(__new_val);
 153:/usr/include/newlib/c++/9.2.1/bits/move.h ****       return __old_val;
 154:/usr/include/newlib/c++/9.2.1/bits/move.h ****     }
 155:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 156:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /// @} group utilities
 157:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 158:/usr/include/newlib/c++/9.2.1/bits/move.h **** #define _GLIBCXX_MOVE(__val) std::move(__val)
 159:/usr/include/newlib/c++/9.2.1/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
ARM GAS  /tmp/ccOYETru.s 			page 274


 160:/usr/include/newlib/c++/9.2.1/bits/move.h **** #else
 161:/usr/include/newlib/c++/9.2.1/bits/move.h **** #define _GLIBCXX_MOVE(__val) (__val)
 162:/usr/include/newlib/c++/9.2.1/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) (__val)
 163:/usr/include/newlib/c++/9.2.1/bits/move.h **** #endif
 164:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 165:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
 166:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @addtogroup utilities
 167:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @{
 168:/usr/include/newlib/c++/9.2.1/bits/move.h ****    */
 169:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 170:/usr/include/newlib/c++/9.2.1/bits/move.h ****   /**
 171:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @brief Swaps two values.
 172:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @param  __a  A thing of arbitrary type.
 173:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @param  __b  Another thing of arbitrary type.
 174:/usr/include/newlib/c++/9.2.1/bits/move.h ****    *  @return   Nothing.
 175:/usr/include/newlib/c++/9.2.1/bits/move.h ****   */
 176:/usr/include/newlib/c++/9.2.1/bits/move.h ****   template<typename _Tp>
 177:/usr/include/newlib/c++/9.2.1/bits/move.h ****     inline
 178:/usr/include/newlib/c++/9.2.1/bits/move.h **** #if __cplusplus >= 201103L
 179:/usr/include/newlib/c++/9.2.1/bits/move.h ****     typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
 180:/usr/include/newlib/c++/9.2.1/bits/move.h **** 			      is_move_constructible<_Tp>,
 181:/usr/include/newlib/c++/9.2.1/bits/move.h **** 			      is_move_assignable<_Tp>>::value>::type
 182:/usr/include/newlib/c++/9.2.1/bits/move.h ****     swap(_Tp& __a, _Tp& __b)
 2876              		.loc 5 182 5 view .LVU657
 2877              	.LBB1992:
 183:/usr/include/newlib/c++/9.2.1/bits/move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 184:/usr/include/newlib/c++/9.2.1/bits/move.h **** 	            is_nothrow_move_assignable<_Tp>>::value)
 185:/usr/include/newlib/c++/9.2.1/bits/move.h **** #else
 186:/usr/include/newlib/c++/9.2.1/bits/move.h ****     void
 187:/usr/include/newlib/c++/9.2.1/bits/move.h ****     swap(_Tp& __a, _Tp& __b)
 188:/usr/include/newlib/c++/9.2.1/bits/move.h **** #endif
 189:/usr/include/newlib/c++/9.2.1/bits/move.h ****     {
 190:/usr/include/newlib/c++/9.2.1/bits/move.h ****       // concept requirements
 191:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
 192:/usr/include/newlib/c++/9.2.1/bits/move.h **** 
 193:/usr/include/newlib/c++/9.2.1/bits/move.h ****       _Tp __tmp = _GLIBCXX_MOVE(__a);
 2878              		.loc 5 193 11 is_stmt 0 view .LVU658
 2879 0056 95E80300 		ldm	r5, {r0, r1}
 2880 005a 6A46     		mov	r2, sp
 194:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __a = _GLIBCXX_MOVE(__b);
 2881              		.loc 5 194 7 view .LVU659
 2882 005c 04F14003 		add	r3, r4, #64
 193:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __a = _GLIBCXX_MOVE(__b);
 2883              		.loc 5 193 11 view .LVU660
 2884 0060 82E80300 		stm	r2, {r0, r1}
 2885              		.loc 5 194 7 view .LVU661
 2886 0064 93E80300 		ldm	r3, {r0, r1}
 2887 0068 85E80300 		stm	r5, {r0, r1}
 195:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2888              		.loc 5 195 7 view .LVU662
 2889 006c 92E80300 		ldm	r2, {r0, r1}
 2890 0070 83E80300 		stm	r3, {r0, r1}
 2891              	.LVL147:
 2892              		.loc 5 195 7 view .LVU663
 2893              	.LBE1992:
 2894              	.LBE1991:
 2895              	.LBB1993:
ARM GAS  /tmp/ccOYETru.s 			page 275


 2896              	.LBI1993:
 182:/usr/include/newlib/c++/9.2.1/bits/move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 2897              		.loc 5 182 5 is_stmt 1 view .LVU664
 182:/usr/include/newlib/c++/9.2.1/bits/move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 2898              		.loc 5 182 5 is_stmt 0 view .LVU665
 2899              	.LBE1993:
 2900              	.LBB1995:
 2901              	.LBB1996:
 194:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2902              		.loc 5 194 7 view .LVU666
 2903 0074 D4E91232 		ldrd	r3, r2, [r4, #72]
 2904              	.LBE1996:
 2905              	.LBE1995:
 2906              	.LBB1998:
 2907              	.LBB1994:
 2908              		.loc 5 195 7 view .LVU667
 2909 0078 A664     		str	r6, [r4, #72]
 194:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2910              		.loc 5 194 7 view .LVU668
 2911 007a 0493     		str	r3, [sp, #16]
 2912              	.LVL148:
 194:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2913              		.loc 5 194 7 view .LVU669
 2914              	.LBE1994:
 2915              	.LBE1998:
 2916              	.LBB1999:
 2917              	.LBI1995:
 182:/usr/include/newlib/c++/9.2.1/bits/move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 2918              		.loc 5 182 5 is_stmt 1 view .LVU670
 2919              	.LBB1997:
 194:/usr/include/newlib/c++/9.2.1/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2920              		.loc 5 194 7 is_stmt 0 view .LVU671
 2921 007c 0592     		str	r2, [sp, #20]
 2922              	.LVL149:
 2923              		.loc 5 195 7 view .LVU672
 2924 007e C4F84CC0 		str	ip, [r4, #76]
 2925              	.LVL150:
 2926              		.loc 5 195 7 view .LVU673
 2927              	.LBE1997:
 2928              	.LBE1999:
 2929              	.LBE1990:
 2930              	.LBB2000:
 2931              	.LBI2000:
 369:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
 2932              		.loc 8 369 11 is_stmt 1 view .LVU674
 2933              	.LBB2001:
 2934              	.LBI2001:
 257:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     {
 2935              		.loc 8 257 5 view .LVU675
 2936              	.LBB2002:
 259:/usr/include/newlib/c++/9.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 2937              		.loc 8 259 7 view .LVU676
 2938 0082 1BB1     		cbz	r3, .L101
 260:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     }
 2939              		.loc 8 260 2 view .LVU677
 260:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     }
 2940              		.loc 8 260 12 is_stmt 0 view .LVU678
ARM GAS  /tmp/ccOYETru.s 			page 276


 2941 0084 0322     		movs	r2, #3
 2942 0086 2946     		mov	r1, r5
 2943 0088 2846     		mov	r0, r5
 2944 008a 9847     		blx	r3
 2945              	.LVL151:
 2946              	.L101:
 260:/usr/include/newlib/c++/9.2.1/bits/std_function.h ****     }
 2947              		.loc 8 260 12 view .LVU679
 2948              	.LBE2002:
 2949              	.LBE2001:
 2950              	.LBE2000:
 2951              	.LBE2004:
 2952              	.LBE2006:
 2953              	.LBE2009:
  37:Mu/logistics/menuitem.cpp **** 
 2954              		.loc 1 37 1 view .LVU680
 2955 008c 2046     		mov	r0, r4
 2956 008e 06B0     		add	sp, sp, #24
 2957              		.cfi_remember_state
 2958              		.cfi_def_cfa_offset 24
 2959              		@ sp needed
 2960 0090 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2961              	.LVL152:
 2962              	.L106:
 2963              		.cfi_restore_state
  37:Mu/logistics/menuitem.cpp **** 
 2964              		.loc 1 37 1 view .LVU681
 2965 0094 DDF814C0 		ldr	ip, [sp, #20]
 2966 0098 02AD     		add	r5, sp, #8
 2967              	.LVL153:
  37:Mu/logistics/menuitem.cpp **** 
 2968              		.loc 1 37 1 view .LVU682
 2969 009a DCE7     		b	.L100
 2970              		.cfi_endproc
 2971              	.LFE2251:
 2973              		.global	_ZN2mu8MenuItemC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_E
 2974              		.thumb_set _ZN2mu8MenuItemC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS
 2975              		.text
 2976              	.Letext0:
 2977              		.file 19 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2978              		.file 20 "../../libdaisy/Drivers/CMSIS/Include/core_cm7.h"
 2979              		.file 21 "../../libdaisy/Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2980              		.file 22 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2981              		.file 23 "/usr/include/newlib/c++/9.2.1/cmath"
 2982              		.file 24 "/usr/include/newlib/c++/9.2.1/bits/std_abs.h"
 2983              		.file 25 "/usr/include/newlib/c++/9.2.1/type_traits"
 2984              		.file 26 "/usr/include/newlib/c++/9.2.1/arm-none-eabi/thumb/v7e-m+dp/hard/bits/c++config.h"
 2985              		.file 27 "/usr/include/newlib/c++/9.2.1/bits/exception_ptr.h"
 2986              		.file 28 "/usr/include/newlib/c++/9.2.1/bits/stl_pair.h"
 2987              		.file 29 "/usr/include/newlib/c++/9.2.1/bits/cpp_type_traits.h"
 2988              		.file 30 "/usr/include/newlib/c++/9.2.1/bits/stl_iterator_base_types.h"
 2989              		.file 31 "/usr/include/newlib/c++/9.2.1/debug/debug.h"
 2990              		.file 32 "/usr/include/newlib/c++/9.2.1/cwchar"
 2991              		.file 33 "/usr/include/newlib/c++/9.2.1/cstdint"
 2992              		.file 34 "/usr/include/newlib/c++/9.2.1/clocale"
 2993              		.file 35 "/usr/include/newlib/c++/9.2.1/cstdlib"
 2994              		.file 36 "/usr/include/newlib/c++/9.2.1/cstdio"
ARM GAS  /tmp/ccOYETru.s 			page 277


 2995              		.file 37 "/usr/include/newlib/c++/9.2.1/initializer_list"
 2996              		.file 38 "/usr/include/newlib/c++/9.2.1/bits/stringfwd.h"
 2997              		.file 39 "/usr/include/newlib/c++/9.2.1/bits/uses_allocator.h"
 2998              		.file 40 "/usr/include/newlib/c++/9.2.1/tuple"
 2999              		.file 41 "/usr/include/newlib/c++/9.2.1/functional"
 3000              		.file 42 "/usr/include/newlib/c++/9.2.1/bits/refwrap.h"
 3001              		.file 43 "/usr/include/newlib/c++/9.2.1/bits/ptr_traits.h"
 3002              		.file 44 "/usr/include/newlib/c++/9.2.1/bits/functexcept.h"
 3003              		.file 45 "/usr/include/newlib/c++/9.2.1/bits/predefined_ops.h"
 3004              		.file 46 "/usr/include/newlib/c++/9.2.1/ext/numeric_traits.h"
 3005              		.file 47 "/usr/include/newlib/c++/9.2.1/ext/type_traits.h"
 3006              		.file 48 "/usr/include/newlib/sys/_types.h"
 3007              		.file 49 "/usr/include/newlib/sys/reent.h"
 3008              		.file 50 "/usr/include/newlib/sys/lock.h"
 3009              		.file 51 "/usr/include/newlib/math.h"
 3010              		.file 52 "/usr/include/newlib/stdlib.h"
 3011              		.file 53 "/usr/include/newlib/c++/9.2.1/math.h"
 3012              		.file 54 "../../libdaisy/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 3013              		.file 55 "../../libdaisy/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 3014              		.file 56 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h"
 3015              		.file 57 "/usr/include/newlib/wchar.h"
 3016              		.file 58 "/usr/include/newlib/locale.h"
 3017              		.file 59 "/usr/include/newlib/ctype.h"
 3018              		.file 60 "/usr/include/newlib/stdio.h"
 3019              		.file 61 "/usr/include/newlib/sys/errno.h"
 3020              		.file 62 "Mu/logistics/menuitem.h"
 3021              		.file 63 "<built-in>"
ARM GAS  /tmp/ccOYETru.s 			page 278


DEFINED SYMBOLS
                            *ABS*:0000000000000000 menuitem.cpp
     /tmp/ccOYETru.s:17     .text._ZN2mu8MenuItemC2Ev:0000000000000000 $t
     /tmp/ccOYETru.s:26     .text._ZN2mu8MenuItemC2Ev:0000000000000000 _ZN2mu8MenuItemC2Ev
     /tmp/ccOYETru.s:26     .text._ZN2mu8MenuItemC2Ev:0000000000000000 _ZN2mu8MenuItemC1Ev
     /tmp/ccOYETru.s:324    .text._ZN2mu8MenuItem9IncrementEv:0000000000000000 $t
     /tmp/ccOYETru.s:332    .text._ZN2mu8MenuItem9IncrementEv:0000000000000000 _ZN2mu8MenuItem9IncrementEv
     /tmp/ccOYETru.s:438    .text._ZN2mu8MenuItem9IncrementEv:0000000000000030 $d
     /tmp/ccOYETru.s:446    .text._ZN2mu8MenuItem9DecrementEv:0000000000000000 $t
     /tmp/ccOYETru.s:454    .text._ZN2mu8MenuItem9DecrementEv:0000000000000000 _ZN2mu8MenuItem9DecrementEv
     /tmp/ccOYETru.s:538    .text._ZN2mu8MenuItem9DecrementEv:000000000000002c $d
     /tmp/ccOYETru.s:546    .text._ZN2mu8MenuItem8SetIndexEi:0000000000000000 $t
     /tmp/ccOYETru.s:554    .text._ZN2mu8MenuItem8SetIndexEi:0000000000000000 _ZN2mu8MenuItem8SetIndexEi
     /tmp/ccOYETru.s:623    .text._ZN2mu8MenuItem8OnChangeEv:0000000000000000 $t
     /tmp/ccOYETru.s:631    .text._ZN2mu8MenuItem8OnChangeEv:0000000000000000 _ZN2mu8MenuItem8OnChangeEv
     /tmp/ccOYETru.s:678    .rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.str1.4:0000000000000000 $d
     /tmp/ccOYETru.s:682    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000000 $t
     /tmp/ccOYETru.s:690    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
     /tmp/ccOYETru.s:1018   .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000064 $d
     /tmp/ccOYETru.s:1023   .text._ZN2mu8MenuItem12DisplayValueB5cxx11Ev:0000000000000000 $t
     /tmp/ccOYETru.s:1031   .text._ZN2mu8MenuItem12DisplayValueB5cxx11Ev:0000000000000000 _ZN2mu8MenuItem12DisplayValueB5cxx11Ev
     /tmp/ccOYETru.s:1244   .text._ZN2mu8MenuItem5ValueB5cxx11Ev:0000000000000000 $t
     /tmp/ccOYETru.s:1252   .text._ZN2mu8MenuItem5ValueB5cxx11Ev:0000000000000000 _ZN2mu8MenuItem5ValueB5cxx11Ev
     /tmp/ccOYETru.s:1442   .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_:0000000000000000 $t
     /tmp/ccOYETru.s:1450   .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_:0000000000000000 _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_
     /tmp/ccOYETru.s:2450   .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_:000000000000016c $d
     /tmp/ccOYETru.s:2467   .text._ZN2mu8MenuItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEiSt8functionIFvvEE:0000000000000000 $t
     /tmp/ccOYETru.s:2475   .text._ZN2mu8MenuItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEiSt8functionIFvvEE:0000000000000000 _ZN2mu8MenuItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEiSt8functionIFvvEE
     /tmp/ccOYETru.s:2475   .text._ZN2mu8MenuItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEiSt8functionIFvvEE:0000000000000000 _ZN2mu8MenuItemC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEiSt8functionIFvvEE

UNDEFINED SYMBOLS
_ZSt25__throw_bad_function_callv
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
memcpy
_ZSt19__throw_logic_errorPKc
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_
_ZdlPv
_Znwj
_ZSt17__throw_bad_allocv
